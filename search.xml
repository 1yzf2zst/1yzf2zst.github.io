<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mysql基础学习笔记</title>
      <link href="/post/d50ffcd6.html"/>
      <url>/post/d50ffcd6.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7a581da59a5f12222c94825e643773fd55e680430d6496ae377bc2121ef73882"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">个人文档要经过授权才能访问.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matplotlib小项目--绘制学生成绩雷达图</title>
      <link href="/post/9026a025.html"/>
      <url>/post/9026a025.html</url>
      
        <content type="html"><![CDATA[<p>这个小项目其实挺简单的是博主最近学习从书里面看到的。比较有意思。正好博主自己也想做一个这样的小项目，来熟悉 对 数据分析三剑客的学习。</p><p>有什么问题小伙伴可以加博主的联系方式和博主一起讨论学习 python书分析三剑客。</p><p>这个详细的在代码里面都有注释，就不单独拿出来说了（嘿嘿🤭，偷个懒）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">courses = [&#x27;c++&#x27;,&#x27;python&#x27;,&#x27;java&#x27;,&#x27;php&#x27;,&#x27;c&#x27;,&#x27;cs&#x27;,&#x27;html&#x27;,&#x27;javascript&#x27;]</span><br><span class="line">scores =[80,95,78,85,45,65,80,60]</span><br><span class="line">dataLength = len(scores)</span><br><span class="line"></span><br><span class="line"># angles 数组将圆周等分为dataLength份</span><br><span class="line">angles = np.linspace(0,2*np.pi,dataLength,endpoint=False)</span><br><span class="line"></span><br><span class="line"># scores.append(scores[0])</span><br><span class="line"># angles = np.append(angles,angles[0])</span><br><span class="line"></span><br><span class="line"># 绘制雷达图</span><br><span class="line">plt.polar(angles,scores,&#x27;rv--&#x27;, linewidth =2)</span><br><span class="line"></span><br><span class="line"># 设置角度网络标签</span><br><span class="line">plt.thetagrids(angles[:8]*180/np.pi,courses,fontproperties = &#x27;simhei&#x27;)</span><br><span class="line"></span><br><span class="line"># 填充雷达图内部</span><br><span class="line">plt.fill(angles,scores,facecolor = &#x27;skyblue&#x27;,alpha = 0.6)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>这俩行代码真心觉得没啥用，有他没他效果都是一样的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># scores.append(scores[0])</span><br><span class="line"># angles = np.append(angles,angles[0])</span><br></pre></td></tr></table></figure><p>这里是一张效果图</p><img src="/post/9026a025/2.png" class title="This is an image">]]></content>
      
      
      <categories>
          
          <category> matplotlib小项目合集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matplotlib基础知识</title>
      <link href="/post/8710c1f.html"/>
      <url>/post/8710c1f.html</url>
      
        <content type="html"><![CDATA[<p><strong>这里全是博主在网上学习是搜到的笔记，如有侵权请联系删除。</strong></p><p>数据可视化</p><p>Matplotlib图形组成<br>Matplotlib 生成的图形主要由以下几个部分构成：</p><p>Figure：指整个图形，您可以把它理解成一张画布，它包括了所有的元素，比如标题、轴线等；</p><p>Axes：绘制 2D 图像的实际区域，也称为轴域区，或者绘图区；</p><p>Axis：指坐标系中的垂直轴与水平轴，包含轴的长度大小（图中轴长为 7）、轴标签（指 x 轴，y轴）和刻度标签；</p><p>Artist：您在画布上看到的所有元素都属于 Artist 对象，比如文本对象（title、xlabel、ylabel）、Line2D 对象（用于绘制2D图像）等。</p><h4 id="Matplotlib-pyplot接口汇总"><a href="#Matplotlib-pyplot接口汇总" class="headerlink" title="Matplotlib.pyplot接口汇总"></a>Matplotlib.pyplot接口汇总</h4><p>Matplotlib 中的 pyplot 模块是一个类似命令风格的函数集合，这使得 Matplotlib 的工作模式和 MATLAB 相似。</p><p>pyplot 模块提供了可以用来绘图的各种函数，比如创建一个画布，在画布中创建一个绘图区域，或是在绘图区域添加一些线、标签等。以下表格对这些函数做了简单地介绍。</p><h5 id="绘图类型"><a href="#绘图类型" class="headerlink" title="绘图类型"></a>绘图类型</h5><p>Bar<br>绘制条形图</p><p>Barh<br>绘制水平条形图</p><p>Boxplot<br>绘制箱型图</p><p>Hist<br>绘制直方图</p><p>his2d<br>绘制2D直方图</p><p>Pie<br>绘制饼状图</p><p>Plot<br>在坐标轴上画线或者标记</p><p>Polar<br>绘制极坐标图</p><p>Scatter<br>绘制x与y的散点图</p><p>Stackplot<br>绘制堆叠图</p><p>Stem<br>用来绘制二维离散数据绘制（又称为“火柴图”）</p><p>Step<br>绘制阶梯图</p><p>Quiver<br>绘制一个二维按箭头</p><h5 id="Image函数"><a href="#Image函数" class="headerlink" title="Image函数"></a>Image函数</h5><p>Imread<br>从文件中读取图像的数据并形成数组。</p><p>Imsave<br>将数组另存为图像文件。</p><p>Imshow<br>在数轴区域内显示图像。</p><h5 id="Axis函数"><a href="#Axis函数" class="headerlink" title="Axis函数"></a>Axis函数</h5><p>Axes<br>在画布(Figure)中添加轴</p><p>Text<br>向轴添加文本</p><p>Title<br>设置当前轴的标题</p><p>Xlabel<br>设置x轴标签</p><p>Xlim<br>获取或者设置x轴区间大小</p><p>Xscale<br>设置x轴缩放比例</p><p>Xticks<br>获取或设置x轴刻标和相应标签</p><p>Ylabel<br>设置y轴的标签</p><p>Ylim<br>获取或设置y轴的区间大小</p><p>Yscale<br>设置y轴的缩放比例</p><p>Yticks<br>获取或设置y轴的刻标和相应标签</p><h5 id="Figure函数"><a href="#Figure函数" class="headerlink" title="Figure函数"></a>Figure函数</h5><p>Figtext<br>在画布上添加文本</p><p>Figure<br>创建一个新画布</p><p>Show<br>显示数字</p><p>Savefig<br>保存当前画布</p><p>Close<br>关闭画布窗口</p><h4 id="第一个Matplotlib绘图程序"><a href="#第一个Matplotlib绘图程序" class="headerlink" title="第一个Matplotlib绘图程序"></a>第一个Matplotlib绘图程序</h4><p>首先导入 Matplotlib 包中的 Pyplot 模块，并以 as 别名的形式简化引入包的名称。import matplotlib.pyplot as plt</p><p>使用 NumPy 提供的函数 arange() 创建一组数据来绘制图像。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#引入numpy包</span><br><span class="line">import numpy as np</span><br><span class="line">#获得0到2π之间的ndarray对象</span><br><span class="line">x = np.arange(0, math.pi*2, 0.05)</span><br></pre></td></tr></table></figure><p>上述所得 x 的值作用到 x 轴上，而该值对应的正弦值，也就是 y 值，使用以下方法获取：y &#x3D; np.sin(x)</p><p>使用 plot() 函数对 x、y 进行绘制。plt.plot(x,y)</p><p>主要的绘图工作已经完成，不过还需要绘制一些细节，需要我们补充一下，比如图像的标题(title)、x 轴与 y 轴的标签（label）等。<br>plt.xlabel(“angle”)<br>plt.ylabel(“sine”)<br>plt.title(‘sine wave’)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from matplotlib import pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">import math</span><br><span class="line">#调用math.pi方法弧度转为角度</span><br><span class="line">x = np.arange(0, math.pi*2, 0.05)</span><br><span class="line">y = np.sin(x)</span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.xlabel(&quot;angle&quot;)</span><br><span class="line">plt.ylabel(&quot;sine&quot;)</span><br><span class="line">plt.title(&#x27;sine wave&#x27;)</span><br><span class="line">#使用show展示图像</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="PyLab绘制曲线图"><a href="#PyLab绘制曲线图" class="headerlink" title="PyLab绘制曲线图"></a>PyLab绘制曲线图</h4><p>PyLab 是一个面向 Matplotlib 的绘图库接口，其语法和 MATLAB 十分相近。它和 Pyplot 模快都够实现 Matplotlib 的绘图功能。PyLab 是一个单独的模块，随 Matplotlib 软件包一起安装，该模块的导包方式和 Pyplot 不同，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#Pyplot导包方式</span><br><span class="line">from matplotlib import pyplot as plt</span><br><span class="line">#PyLab导包有两种方式</span><br><span class="line">import pylab</span><br><span class="line">from pylab import *</span><br></pre></td></tr></table></figure><p>PyLab 是一个很便捷的模块，下面对它的使用方法做相应的介绍。<br>基本绘图</p><p>提供一对相同长度的数组（或序列），然后使用plot()绘制曲线：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from numpy import *</span><br><span class="line">from pylab import *</span><br><span class="line">x = linspace(-3, 3, 30)</span><br><span class="line">y = x**2</span><br><span class="line">plot(x, y)</span><br><span class="line">show()</span><br></pre></td></tr></table></figure><p>如果您要绘制特殊类型的线条，并想添加一些颜色，PyLab 提供了如下方法：</p><img src="/post/8710c1f/359.png" class title="This is an image"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from pylab import *</span><br><span class="line">x = linspace(-3, 3, 30)</span><br><span class="line">y = x**2</span><br><span class="line">plot(x, y, &#x27;r.&#x27;)</span><br><span class="line">show()</span><br></pre></td></tr></table></figure><p>如果您想在同一绘图区域内绘制多个图形，只需要使用多个绘图命令。示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from pylab import *</span><br><span class="line">plot(x, sin(x))</span><br><span class="line">plot(x, cos(x), &#x27;r-&#x27;)</span><br><span class="line">plot(x, -sin(x), &#x27;g--&#x27;)</span><br><span class="line">show()</span><br></pre></td></tr></table></figure><p>如果您想清除图像，直接在程序末尾调用 clf() 方法即可</p><h4 id="Matplotlib-figure图形对象"><a href="#Matplotlib-figure图形对象" class="headerlink" title="Matplotlib figure图形对象"></a>Matplotlib figure图形对象</h4><p>在 Matplotlib 中，面向对象编程的核心思想是创建图形对象。通过图形对象来调用其它的方法和属性，这样有助于我们更好地处理多个画布。在这个过程中，pyplot 负责生成图形对象，并通过该对象来添加一个或多个 axes 对象（即绘图区域）。</p><p>Matplotlib 提供了matplotlib.figure图形类模块，它包含了创建图形对象的方法。</p><p>通过调用 pyplot 模块中 figure() 函数来实例化 figure 对象。<br>如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from matplotlib import pyplot as plt</span><br><span class="line">#创建图形对象</span><br><span class="line">fig = plt.figure()</span><br></pre></td></tr></table></figure><p>figsize<br>指定画布的大小，(宽度,高度)，单位为英寸。</p><p>dpi<br>指定绘图对象的分辨率，即每英寸多少个像素，默认值为80。</p><p>facecolor<br>背景颜色。</p><p>dgecolor<br>边框颜色。</p><p>frameon<br>是否显示边框。</p><p>下面使用 figure() 创建一个空白画布：fig &#x3D; plt.figure()</p><p>我们使用 add_axes() 将 axes 轴域添加到画布中。如下所示：ax&#x3D;fig.add_axes([0,0,1,1])</p><p>add_axes() 的参数值是一个序列，序列中的 4 个数字分别对应图形的左侧，底部，宽度，和高度，且每个数字必须介于 0 到 1 之间。</p><p>设置 x 和 y 轴的标签以及标题，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ax.set_title(&quot;sine wave&quot;)</span><br><span class="line">ax.set_xlabel(&#x27;angle&#x27;)</span><br><span class="line">ax.set_ylabel(&#x27;sine&#x27;)</span><br></pre></td></tr></table></figure><p>调用 axes 对象的 plot() 方法，对 x 、 y 数组进行绘图操作：ax.plot(x,y)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from matplotlib import pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">import math</span><br><span class="line">x = np.arange(0, math.pi*2, 0.05)</span><br><span class="line">y = np.sin(x)</span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_axes([0,0,1,1])</span><br><span class="line">ax.plot(x,y)</span><br><span class="line">ax.set_title(&quot;sine wave&quot;)</span><br><span class="line">ax.set_xlabel(&#x27;angle&#x27;)</span><br><span class="line">ax.set_ylabel(&#x27;sine&#x27;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="Matplotlib-axes类使用详解"><a href="#Matplotlib-axes类使用详解" class="headerlink" title="Matplotlib axes类使用详解"></a>Matplotlib axes类使用详解</h4><p>Matplotlib 定义了一个 axes 类（轴域类），该类的对象被称为 axes 对象（即轴域对象），它指定了一个有数值范围限制的绘图区域。在一个给定的画布（figure）中可以包含多个 axes 对象，但是同一个 axes 对象只能在一个画布中使用。<br>2D 绘图区域（axes）包含两个轴（axis）对象；如果是 3D 绘图区域，则包含三个。</p><p>通过调用 add_axes() 方法能够将 axes 对象添加到画布中，该方法用来生成一个 axes 轴域对象，对象的位置由参数rect决定。</p><p>rect 是位置参数，接受一个由 4 个元素组成的浮点数列表，形如 [left, bottom, width, height] ，它表示添加到画布中的矩形区域的左下角坐标(x, y)，以及宽度和高度。如下所示：</p><p>ax&#x3D;fig.add_axes([0.1,0.1,0.8,0.8])</p><p>注意：每个元素的值是画布宽度和高度的分数。即将画布的宽、高作为 1 个单位。比如，[ 0.1, 0.1, 0.8, 0.8]，它代表着从画布 10% 的位置开始绘制, 宽高是画布的 80%。</p><p>下面介绍 axes 类的其他成员函数，这些函数在绘图过程中都承担着不同的作用。</p><p>legend()绘制图例</p><p>axes 类的 legend() 方法负责绘制画布中的图例，它需要三个参数<br>ax.legend(handles, labels, loc)</p><p>labels<br>是一个字符串序列，用来指定标签的名称；</p><p>loc<br>是指定图例位置的参数，其参数值可以用字符串或整数来表示；</p><p>handles<br>参数，它也是一个序列，它包含了所有线型的实例；</p><p>下面是 loc 参数的表示方法，分为字符串和整数两种，如下所示：<img src="/post/8710c1f/360.png" class title="This is an image"></p><p>axes.plot()</p><p>这是 axes 类的基本方法，它将一个数组的值与另一个数组的值绘制成线或标记，plot() 方法具有可选格式的字符串参数，用来指定线型、标记颜色、样式以及大小。<br>颜色代码如下表：<img src="/post/8710c1f/361.png" class title="This is an image"></p><p>标记符号如下表：</p><img src="/post/8710c1f/362.png" class title="This is an image"><p>线型表示字符，如下表：</p><img src="/post/8710c1f/363.png" class title="This is an image"><p>下面的例子，以直线图的形式展示了电视、智能手机广告费与其所带来产品销量的关系图。其中描述电视的是带有黄色和方形标记的实线，而代表智能手机的则是绿色和圆形标记的虚线。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">y = [1, 4, 9, 16, 25,36,49, 64]</span><br><span class="line">x1 = [1, 16, 30, 42,55, 68, 77,88]</span><br><span class="line">x2 = [1,6,12,18,28, 40, 52, 65]</span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_axes([0,0,1,1])</span><br><span class="line">#使用简写的形式color/标记符/线型</span><br><span class="line">l1 = ax.plot(x1,y,&#x27;ys-&#x27;) </span><br><span class="line">l2 = ax.plot(x2,y,&#x27;go--&#x27;) </span><br><span class="line">ax.legend(labels = (&#x27;tv&#x27;, &#x27;Smartphone&#x27;), loc = &#x27;lower right&#x27;) # legend placed at lower right</span><br><span class="line">ax.set_title(&quot;Advertisement effect on sales&quot;)</span><br><span class="line">ax.set_xlabel(&#x27;medium&#x27;)</span><br><span class="line">ax.set_ylabel(&#x27;sales&#x27;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="Matplotlib-subplot-函数用法"><a href="#Matplotlib-subplot-函数用法" class="headerlink" title="Matplotlib subplot()函数用法"></a>Matplotlib subplot()函数用法</h4><p>如何在同一画布上绘制多个子图。</p><p>matplotlib.pyplot模块提供了一个 subplot() 函数，它可以均等地划分画布，该函数的参数格式如下：plt.subplot(nrows, ncols, index)</p><p>nrows 与 ncols 表示要划分几行几列的子区域</p><p>nrows*nclos  表示子图数量）</p><p>index 的初始值为1，用来选定具体的某个子区域。</p><p>如果新建的子图与现有的子图重叠，那么重叠部分的子图将会被自动删除，因为它们不可以共享绘图区域。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">plt.plot([1,2,3])</span><br><span class="line">#现在创建一个子图，它表示一个有2行1列的网格的顶部图。</span><br><span class="line">#因为这个子图将与第一个重叠，所以之前创建的图将被删除</span><br><span class="line">plt.subplot(2,1,1)</span><br><span class="line">plt.plot(range(12))</span><br><span class="line">#创建带有黄色背景的第二个子图</span><br><span class="line">plt.subplot(2,1,2, facecolor=&#x27;y&#x27;)</span><br><span class="line">plt.plot(range(12))</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>如果不想覆盖之前的图</strong>，需要使用 add_subplot() 函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax1 = fig.add_subplot(111)</span><br><span class="line">ax1.plot([1,2,3])</span><br><span class="line">ax2 = fig.add_subplot(2,2,1, facecolor=&#x27;y&#x27;)</span><br><span class="line">ax2.plot([1,2,3])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>通过给画布添加 axes 对象可以实现在同一画布中插入另外的图像。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">import math</span><br><span class="line">x = np.arange(0, math.pi*2, 0.05)</span><br><span class="line">fig=plt.figure()</span><br><span class="line">axes1 = fig.add_axes([0.1, 0.1, 0.8, 0.8]) # main axes</span><br><span class="line">axes2 = fig.add_axes([0.55, 0.55, 0.3, 0.3]) # inset axes</span><br><span class="line">y = np.sin(x)</span><br><span class="line">axes1.plot(x, y, &#x27;b&#x27;)</span><br><span class="line">axes2.plot(x,np.cos(x),&#x27;r&#x27;)</span><br><span class="line">axes1.set_title(&#x27;sine&#x27;)</span><br><span class="line">axes2.set_title(&quot;cosine&quot;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="Matplotlib-subplots-函数"><a href="#Matplotlib-subplots-函数" class="headerlink" title="Matplotlib subplots()函数"></a>Matplotlib subplots()函数</h4><p>matplotlib.pyplot模块提供了一个 subplots() 函数，它的使用方法和 subplot() 函数类似。其不同之处在于，subplots() <strong>既创建了一个包含子图区域的画布，又创建了一个 figure 图形对象，而 subplot() 只是创建一个包含子图区域的画布。</strong></p><p>subplots 的函数格式如下：fig , ax &#x3D; plt.subplots(nrows, ncols)</p><p>nrows 与 ncols 表示两个整数参数，它们指定子图所占的行数、列数。</p><p>函数的返回值是一个元组，包括一个图形对象和所有的 axes 对象。其中 axes 对象的数量等于 nrows * ncols，且每个 axes 对象均可通过索引值访问（从1开始）。</p><p>下面我们创建了一个 2 行 2 列的子图，并在每个子图中显示 4 个不同的图像。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">fig,a =  plt.subplots(2,2)</span><br><span class="line">import numpy as np</span><br><span class="line">x = np.arange(1,5)</span><br><span class="line">#绘制平方函数</span><br><span class="line">a[0][0].plot(x,x*x)</span><br><span class="line">a[0][0].set_title(&#x27;square&#x27;)</span><br><span class="line">#绘制平方根图像</span><br><span class="line">a[0][1].plot(x,np.sqrt(x))</span><br><span class="line">a[0][1].set_title(&#x27;square root&#x27;)</span><br><span class="line">#绘制指数函数</span><br><span class="line">a[1][0].plot(x,np.exp(x))</span><br><span class="line">a[1][0].set_title(&#x27;exp&#x27;)</span><br><span class="line">#绘制对数函数</span><br><span class="line">a[1][1].plot(x,np.log10(x))</span><br><span class="line">a[1][1].set_title(&#x27;log&#x27;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="Matplotlib-subplot2grid-函数"><a href="#Matplotlib-subplot2grid-函数" class="headerlink" title="Matplotlib subplot2grid()函数"></a>Matplotlib subplot2grid()函数</h4><p>matplotlib.pyplot 模块提供了 subplot2grid() ，该函数能够在画布的特定位置创建 axes 对象（即绘图区域）<br>不仅如此，它还可以使用不同数量的行、列来创建跨度不同的绘图区域。与 subplot() 和 subplots() 函数不同，subplot2gird() 函数以非等分的形式对画布进行切分，并按照绘图区域的大小来展示最终绘图结果。</p><p>函数语法格式如下：</p><p>plt.subplot2grid(shape, location, rowspan, colspan)</p><p>shape：把该参数值规定的网格区域作为绘图区域；</p><p>location：在给定的位置绘制图形，初始位置 (0,0) 表示第1行第1列；</p><p>rowsapan&#x2F;colspan：这两个参数用来设置让子区跨越几行几列。</p><p>下面，在画布（figure）中添加了行、列跨度均不相同的绘图子区域，然后在每个绘图区上，绘制不同的图形</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">#使用 colspan指定列，使用rowspan指定行</span><br><span class="line">a1 = plt.subplot2grid((3,3),(0,0),colspan = 2)</span><br><span class="line">a2 = plt.subplot2grid((3,3),(0,2), rowspan = 3)</span><br><span class="line">a3 = plt.subplot2grid((3,3),(1,0),rowspan = 2, colspan = 2)</span><br><span class="line">import numpy as np</span><br><span class="line">x = np.arange(1,10)</span><br><span class="line">a2.plot(x, x*x)</span><br><span class="line">a2.set_title(&#x27;square&#x27;)</span><br><span class="line">a1.plot(x, np.exp(x))</span><br><span class="line">a1.set_title(&#x27;exp&#x27;)</span><br><span class="line">a3.plot(x, np.log(x))</span><br><span class="line">a3.set_title(&#x27;log&#x27;)</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="Matplotlib-grid-设置网格格式"><a href="#Matplotlib-grid-设置网格格式" class="headerlink" title="Matplotlib grid()设置网格格式"></a>Matplotlib grid()设置网格格式</h4><p>通过 Matplotlib axes 对象提供的 grid() 方法可以开启或者关闭画布中的网格（即是否显示网格）以及网格的主&#x2F;次刻度。除此之外，grid() 函数还可以设置网格的颜色、线型以及线宽等属性。</p><p>grid() 的函数使用格式如下：grid(color&#x3D;’b’, ls &#x3D; ‘-.’, lw &#x3D; 0.25)</p><p>color：表示网格线的颜色；<br>ls：表示网格线的样式；<br>lw：表示网格线的宽度；</p><p>网格在默认状态下是关闭的，通过调用上述函数，网格会被自动开启，如果您只是想开启不带任何样式的网格，可以通过 grid(True) 来实现。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">#fig画布；axes子图区域</span><br><span class="line">fig, axes = plt.subplots(1,3, figsize = (12,4))</span><br><span class="line">x = np.arange(1,11)</span><br><span class="line">axes[0].plot(x, x**3, &#x27;g&#x27;,lw=2)</span><br><span class="line">#开启网格</span><br><span class="line">axes[0].grid(True)</span><br><span class="line">axes[0].set_title(&#x27;default grid&#x27;)</span><br><span class="line">axes[1].plot(x, np.exp(x), &#x27;r&#x27;)</span><br><span class="line">#设置网格的颜色，线型，线宽</span><br><span class="line">axes[1].grid(color=&#x27;b&#x27;, ls = &#x27;-.&#x27;, lw = 0.25)</span><br><span class="line">axes[1].set_title(&#x27;custom grid&#x27;)</span><br><span class="line">axes[2].plot(x,x)</span><br><span class="line">axes[2].set_title(&#x27;no grid&#x27;)</span><br><span class="line">fig.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="Matplotlib坐标轴格式"><a href="#Matplotlib坐标轴格式" class="headerlink" title="Matplotlib坐标轴格式"></a>Matplotlib坐标轴格式</h4><p>在一个函数图像中，有时自变量 x 与因变量 y 是指数对应关系，这时需要将坐标轴刻度设置为对数刻度。Matplotlib 通过 axes 对象的xscale或yscale属性来实现对坐标轴的格式设置。</p><p>右侧的子图显示对数刻度，左侧子图则显示标量刻度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">fig, axes = plt.subplots(1, 2, figsize=(10,4))</span><br><span class="line">x = np.arange(1,5)</span><br><span class="line">axes[0].plot( x, np.exp(x))</span><br><span class="line">axes[0].plot(x,x**2)</span><br><span class="line">axes[0].set_title(&quot;Normal scale&quot;)</span><br><span class="line">axes[1].plot (x, np.exp(x))</span><br><span class="line">axes[1].plot(x, x**2)</span><br><span class="line">#设置y轴</span><br><span class="line">axes[1].set_yscale(&quot;log&quot;)</span><br><span class="line">axes[1].set_title(&quot;Logarithmic scale (y)&quot;)</span><br><span class="line">axes[0].set_xlabel(&quot;x axis&quot;)</span><br><span class="line">axes[0].set_ylabel(&quot;y axis&quot;)</span><br><span class="line">axes[0].xaxis.labelpad = 10</span><br><span class="line">#设置x、y轴标签</span><br><span class="line">axes[1].set_xlabel(&quot;x axis&quot;)</span><br><span class="line">axes[1].set_ylabel(&quot;y axis&quot;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>轴是连接刻度的线，也就是绘图区域的边界，在绘图区域（axes 对象）的顶部、底部、左侧和右侧都有一个边界线（轴）。</p><p>通过指定轴的颜色和宽度，从而对进行显示格式设置，比如将所有轴的颜色设置为 None，那么它们都会成为隐藏状态，或者也可以给轴添加相应的颜色。</p><p>以下示例为左侧轴、底部轴分别设置了红色、蓝色，如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_axes([0,0,1,1])</span><br><span class="line">#为左侧轴，底部轴添加颜色</span><br><span class="line">ax.spines[&#x27;bottom&#x27;].set_color(&#x27;blue&#x27;)</span><br><span class="line">ax.spines[&#x27;left&#x27;].set_color(&#x27;red&#x27;)</span><br><span class="line">ax.spines[&#x27;left&#x27;].set_linewidth(2)</span><br><span class="line">#将侧轴、顶部轴设置为None</span><br><span class="line">ax.spines[&#x27;right&#x27;].set_color(None)</span><br><span class="line">ax.spines[&#x27;top&#x27;].set_color(None)</span><br><span class="line">ax.plot([1,2,3,4,5])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="Matplotlib-坐标轴范围"><a href="#Matplotlib-坐标轴范围" class="headerlink" title="Matplotlib 坐标轴范围"></a>Matplotlib 坐标轴范围</h4><p>Matplotlib 可以根据自变量与因变量的取值范围，自动设置 x 轴与 y 轴的数值大小。当然，也可以用自定义的方式，通过 set_xlim() 和 set_ylim() 对 x、y 轴的数值范围进行设置。</p><p>当对 3D 图像进行设置的时，会增加一个 z 轴，此时使用 set_zlim() 可以对 z 轴进行设置。</p><p>下面示例分别对自动设置和自定义设置做了演示：第一种 Matplotlib 自动设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">fig = plt.figure()</span><br><span class="line">#添加绘图区域</span><br><span class="line">a1 = fig.add_axes([0,0,1,1])</span><br><span class="line">#准备数据</span><br><span class="line">x = np.arange(1,10)</span><br><span class="line">#绘制函数图像</span><br><span class="line">a1.plot(x, np.exp(x))</span><br><span class="line">#添加题目</span><br><span class="line">a1.set_title(&#x27;exp&#x27;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>第二种：自定义设置，set_xlim() 将 x 轴的数值范围设置为（0到10)； set_ylim() 将 y 轴的范围设置为（0到10000）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">fig = plt.figure()</span><br><span class="line">a1 = fig.add_axes([0,0,1,1])</span><br><span class="line">import numpy as np</span><br><span class="line">x = np.arange(1,10)</span><br><span class="line">a1.plot(x, np.exp(x),&#x27;r&#x27;)</span><br><span class="line">a1.set_title(&#x27;exp&#x27;)</span><br><span class="line">#设置y轴</span><br><span class="line">a1.set_ylim(0,10000)</span><br><span class="line">#设置x轴</span><br><span class="line">a1.set_xlim(0,10)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="Matplotlib-刻度和刻度标签"><a href="#Matplotlib-刻度和刻度标签" class="headerlink" title="Matplotlib 刻度和刻度标签"></a>Matplotlib 刻度和刻度标签</h4><p>刻度指的是轴上数据点的标记，Matplotlib 能够自动的在 x 、y 轴上绘制出刻度。这一功能的实现得益于 Matplotlib 内置的刻度定位器和格式化器（两个内建类）。在大多数情况下，这两个内建类完全能够满足我们的绘图需求，但是在某些情况下，刻度标签或刻度也需要满足特定的要求，比如将刻度设置为“英文数字形式”或者“大写阿拉伯数字”，此时就需要对它们重新设置。</p><p>xticks() 和 yticks() 函数接受一个列表对象作为参数，列表中的元素表示对应数轴上要显示的刻度。</p><p>如下所示：ax.set_xticks([2,4,6,8,10])</p><p>x 轴上的刻度标记，依次为 2，4，6，8，10。</p><p>您也可以分别通过 set_xticklabels() 和 set_yticklabels() 函数设置与刻度线相对应的刻度标签。</p><p>下面示例对刻度和标签的使用方法做了说明。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">import math</span><br><span class="line">x = np.arange(0, math.pi*2, 0.05)</span><br><span class="line">#生成画布对象</span><br><span class="line">fig = plt.figure()</span><br><span class="line">#添加绘图区域</span><br><span class="line">ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])</span><br><span class="line">y = np.sin(x)</span><br><span class="line">ax.plot(x, y)</span><br><span class="line">#设置x轴标签</span><br><span class="line">ax.set_xlabel(&#x27;angle&#x27;)</span><br><span class="line">ax.set_title(&#x27;sine&#x27;)</span><br><span class="line">ax.set_xticks([0,2,4,6])</span><br><span class="line">#设置x轴刻度标签</span><br><span class="line">ax.set_xticklabels([&#x27;zero&#x27;,&#x27;two&#x27;,&#x27;four&#x27;,&#x27;six&#x27;])</span><br><span class="line">#设置y轴刻度</span><br><span class="line">ax.set_yticks([-1,0,1])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="Matplotlib中文乱码解决方案"><a href="#Matplotlib中文乱码解决方案" class="headerlink" title="Matplotlib中文乱码解决方案"></a>Matplotlib中文乱码解决方案</h4><p>Matplotlib 默认不支持中文字体，这因为 Matplotlib 只支持 ASCII 字符，但中文标注更加符合中国人的阅读习惯。因此，本节重点讲解如何在 Windows 环境下让 Matplotlib 显示中文。</p><p>Matplotlib中文乱码</p><p>当不对 Matplotlib 进行设置，而直接使用中文时，绘制的图像会出现中文乱码。</p><p>下面给出了两种解决中文乱码方案：第一种是临时解决方案，第二种是一劳永逸的解决方案。</p><p>重写配置文件</p><p>通过临时重写配置文件的方法，可以解决 Matplotlib 显示中文乱码的问题，代码如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">plt.rcParams[&quot;font.sans-serif&quot;]=[&quot;SimHei&quot;] #设置字体</span><br><span class="line">plt.rcParams[&quot;axes.unicode_minus&quot;]=False #该语句解决图像中的“-”负号的乱码问题</span><br></pre></td></tr></table></figure><p>将上述代码添加到您的绘图程序中，即可解决中文乱码的问题。这是一种非常灵活、便捷的解决方法。完整的程序代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#绘制折线图</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">plt.rcParams[&quot;font.sans-serif&quot;]=[&quot;SimHei&quot;] #设置字体</span><br><span class="line">plt.rcParams[&quot;axes.unicode_minus&quot;]=False #正常显示负号</span><br><span class="line">year = [2017, 2018, 2019, 2020]</span><br><span class="line">people = [20, 40, 60, 70]</span><br><span class="line">#生成图表</span><br><span class="line">plt.plot(year, people)</span><br><span class="line">plt.xlabel(&#x27;年份&#x27;)</span><br><span class="line">plt.ylabel(&#x27;人口&#x27;)</span><br><span class="line">plt.title(&#x27;人口增长&#x27;)</span><br><span class="line">#设置纵坐标刻度</span><br><span class="line">plt.yticks([0, 20, 40, 60, 80])</span><br><span class="line">#设置填充选项：参数分别对应横坐标，纵坐标，纵坐标填充起始值，填充颜色</span><br><span class="line">plt.fill_between(year, people, 20, color = &#x27;green&#x27;)</span><br><span class="line">#显示图表</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>不过上述解决方案适用于所有操作系统，其唯一弊端是每编写一个绘图程序就要添加一次相同的代码。</p><p>修改配置文件</p><p>下面介绍第二种方式：通过直接修改配置文件的方法，可以一劳永逸的解决 Matplotlib 的中文乱码问题。注意此过程在 Windows 环境下进行。</p><p>Matplotlib 从配置文件 matplotlibrc 中读取相关配置信息，比如字体、样式等，因此我们需要对该配置文件进行更改。首先查看 matplotlibrc 所在的目录，使用如下代码确定目录位置：</p><p>import matplotlib<br>matplotlib.matplotlib_fname()</p><p>然后修改配置文件 matplotlibrc。打开配置文件后，找到以下信息：<br>#font.family: sans-serif</p><p>#font.serif: DejaVu Serif, Bitstream Vera Serif, Computer Modern Roman, New Century Schoolbook, Century Schoolbook L, Utopia, ITC Bookman, Bookman, Nimbus Roman No9 L, Times New Roman, Times, Palatino, Charter, serif</p><p>将上述配置项前面的#去掉，并修改的配置项，如下所示：</p><p>font.family   :  Microsoft YaHei, sans-serif<br>font.serif: Microsoft YaHei, DejaVu Serif, Bitstream Vera Serif, Computer Modern Roman, New Century Schoolbook, Century Schoolbook L, Utopia, ITC Bookman, Bookman, Nimbus Roman No9 L, Times New Roman, Times, Palatino, Charter, serif</p><p>最后，在以下目录中复制中文字体微软雅黑：C:\Windows\Fonts\Microsoft YaHei UI</p><p>复制完成后，将字体粘贴至以下路径文件中：D:\python\python37\lib\site-packages\matplotlib\mpl-data\fonts\ttf</p><p>字体粘贴后会出现一个 MSYH.ttc 的字体文件，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">x = np.linspace(-8, 8, 1024)</span><br><span class="line">y1 = 0.618 * np.abs(x) - 0.8 * np.sqrt(64 - x ** 2)</span><br><span class="line">y2 = 0.618 * np.abs(x) + 0.8 * np.sqrt(64 - x ** 2)</span><br><span class="line">plt.plot(x, y1, color=&#x27;r&#x27;)</span><br><span class="line">plt.plot(x, y2, color=&#x27;r&#x27;)</span><br><span class="line">plt.title(&quot;我爱C语言中文网&quot;,fontsize=20,color=&quot;b&quot;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="Matplotlib双轴图"><a href="#Matplotlib双轴图" class="headerlink" title="Matplotlib双轴图"></a>Matplotlib双轴图</h4><p>在一些应用场景中，有时需要绘制两个 x 轴或两个 y 轴，这样可以更直观地显现图像，从而获取更有效的数据。Matplotlib 提供的 twinx() 和 twiny() 函数，除了可以实现绘制双轴的功能外，还可以使用不同的单位来绘制曲线，比如一个轴绘制对函数，另外一个轴绘制指数函数。</p><p>下面示例绘制了一个具有两个 y 轴的图形，一个显示指数函数 exp(x)，另一个显示对数函数 log(x)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">#创建图形对象</span><br><span class="line">fig = plt.figure()</span><br><span class="line">#添加子图区域</span><br><span class="line">a1 = fig.add_axes([0,0,1,1])</span><br><span class="line">#准备数据</span><br><span class="line">x = np.arange(1,11)</span><br><span class="line">#绘制指数函数</span><br><span class="line">a1.plot(x,np.exp(x))</span><br><span class="line">a1.set_ylabel(&#x27;exp&#x27;)</span><br><span class="line">#添加双轴</span><br><span class="line">a2 = a1.twinx()</span><br><span class="line">#‘ro’表示红色圆点</span><br><span class="line">a2.plot(x, np.log(x),&#x27;ro-&#x27;)</span><br><span class="line">#绘制对数函数</span><br><span class="line">a2.set_ylabel(&#x27;log&#x27;)</span><br><span class="line">#绘制图例</span><br><span class="line">fig.legend(labels = (&#x27;exp&#x27;,&#x27;log&#x27;),loc=&#x27;upper left&#x27;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="Matplotlib柱状图"><a href="#Matplotlib柱状图" class="headerlink" title="Matplotlib柱状图"></a>Matplotlib柱状图</h4><p>柱状图是一种用矩形柱来表示数据分类的图表，柱状图可以垂直绘制，也可以水平绘制，它的高度与其所表示的数值成正比关系。柱状图显示了不同类别之间的比较关系，图表的水平轴 X 指定被比较的类别，垂直轴 Y 则表示具体的类别值</p><p>Matplotlib 提供了bar()函数来绘制柱状图，它可以应用在 MATLAB 样式以及面向对象的绘图方法中。当它与 axes 对象一起使用时</p><p>其语法格式如下：ax.bar(x, height, width, bottom, align)</p><p>x<br>一个标量序列，代表柱状图的x坐标，默认x取值是每个柱状图所在的中点位置，或者也可以是柱状图左侧边缘位置。</p><p>height<br>一个标量或者是标量序列，代表柱状图的高度。</p><p>width<br>可选参数，标量或类数组，柱状图的默认宽度值为 0.8。</p><p>bottom<br>可选参数，标量或类数组，柱状图的y坐标默认为None。</p><p>algin<br>有两个可选项 {“center”,”edge”}，默认为 ‘center’，该参数决定 x 值位于柱状图的位置。</p><p>该函数的返回值是一个 Matplotlib 容器对象，该对象包含了所有柱状图。</p><p>下面是一个关于 Matplotlib 柱状图的简单示例。它用来显示了不同编程语言的学习人数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">#创建图形对象</span><br><span class="line">fig = plt.figure()</span><br><span class="line">#添加子图区域，参数值表示[left, bottom, width, height ]</span><br><span class="line">ax = fig.add_axes([0,0,1,1])</span><br><span class="line">#准备数据</span><br><span class="line">langs = [&#x27;C&#x27;, &#x27;C++&#x27;, &#x27;Java&#x27;, &#x27;Python&#x27;, &#x27;PHP&#x27;]</span><br><span class="line">students = [23,17,35,29,12]</span><br><span class="line">#绘制柱状图</span><br><span class="line">ax.bar(langs,students)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>通过调整柱状图的宽度，可以实现在同一 x 轴位置绘制多个柱状图。可以将它们设置成不同的颜色，从而使它们更容易区分。</p><p>下面示例描述了某工程学院过去四年中，三个专业录取的统招学生数量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">#准备数据</span><br><span class="line">data = </span><br><span class="line">[[30, 25, 50, 20],</span><br><span class="line">[40, 23, 51, 17],</span><br><span class="line">[35, 22, 45, 19]]</span><br><span class="line">X = np.arange(4)</span><br><span class="line">fig = plt.figure()</span><br><span class="line">#添加子图区域</span><br><span class="line">ax = fig.add_axes([0,0,1,1])</span><br><span class="line">#绘制柱状图</span><br><span class="line">ax.bar(X + 0.00, data[0], color = &#x27;b&#x27;, width = 0.25)</span><br><span class="line">ax.bar(X + 0.25, data[1], color = &#x27;g&#x27;, width = 0.25)</span><br><span class="line">ax.bar(X + 0.50, data[2], color = &#x27;r&#x27;, width = 0.25)</span><br></pre></td></tr></table></figure><p>柱状图除了上述使用方法外，还有另外一种堆叠柱状图。所谓堆叠柱状图就是将不同数组别的柱状图堆叠在一起，堆叠后的柱状图高度显示了两者相加的结果值。</p><p>bar() 函数提供了一个可选参数bottom，该参数可以指定柱状图开始堆叠的起始值，一般从底部柱状图的最大值开始，依次类推。</p><p>下面是一个不同国家参加奥林匹克运动会所得奖牌（金银铜）的柱状堆叠图示例，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">countries = [&#x27;USA&#x27;, &#x27;India&#x27;, &#x27;China&#x27;, &#x27;Russia&#x27;, &#x27;Germany&#x27;] </span><br><span class="line">bronzes = np.array([38, 17, 26, 19, 15]) </span><br><span class="line">silvers = np.array([37, 23, 18, 18, 10]) </span><br><span class="line">golds = np.array([46, 27, 26, 19, 17]) </span><br><span class="line"># 此处的 _ 下划线表示将循环取到的值放弃，只得到[0,1,2,3,4]</span><br><span class="line">ind = [x for x, _ in enumerate(countries)] </span><br><span class="line">#绘制堆叠图</span><br><span class="line">plt.bar(ind, golds, width=0.5, label=&#x27;golds&#x27;, color=&#x27;gold&#x27;, bottom=silvers+bronzes) </span><br><span class="line">plt.bar(ind, silvers, width=0.5, label=&#x27;silvers&#x27;, color=&#x27;silver&#x27;, bottom=bronzes) </span><br><span class="line">plt.bar(ind, bronzes, width=0.5, label=&#x27;bronzes&#x27;, color=&#x27;#CD853F&#x27;) </span><br><span class="line">#设置坐标轴</span><br><span class="line">plt.xticks(ind, countries) </span><br><span class="line">plt.ylabel(&quot;Medals&quot;) </span><br><span class="line">plt.xlabel(&quot;Countries&quot;) </span><br><span class="line">plt.legend(loc=&quot;upper right&quot;) </span><br><span class="line">plt.title(&quot;2019 Olympics Top Scorers&quot;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>在上述代码中，第一次调用plt.bar()绘制了黄色柱状图， 第二次调用plot.bar()时绘制了灰色柱状图，最后一次调用plt.bar()则绘制最底部的柱状图。两个柱状图相接触的位置就是顶部与底部的位置，这样就构成了柱状堆叠图。</p><h4 id="Matplotlib直方图"><a href="#Matplotlib直方图" class="headerlink" title="Matplotlib直方图"></a>Matplotlib直方图</h4><p>直方图（Histogram），又称质量分布图，它是一种条形图的一种，由一系列高度不等的纵向线段来表示数据分布的情况。 直方图的横轴表示数据类型，纵轴表示分布情况。</p><p>首先，我们需要了解柱状图和直方图的区别。<br>直方图用于概率分布，它显示了一组数值序列在给定的数值范围内出现的概率；而柱状图则用于展示各个类别的频数。</p><p>例如，我们对某工厂的员工年龄做直方图统计，首先我们要统计出每一位员工的年龄，然后设定一个 20 至 65 的数值范围，并将该数值范围细分为 4 个区间段 (20,35),(35,45),(45,55),(55,65) , 最后通过直方图的形式，展示该工厂员工在相应年龄区间的分布情况。</p><p>如果想要构建直方图，必须遵循以下步骤：<br>将整个值范围划分为一系列区间。<br>区间值（bin）的取值，不可遗漏数据；<br>计算每个区间中有多少个值。</p><p>通常将 bin 指定为连续且不重叠的数值区间，而 bin 值指区间开始和结束的数值。</p><p>可以使用下面的函数来绘制直方图：matplotlib.pyplot.hist（）</p><p>x<br>必填参数，数组或者数组序列。</p><p>bins<br>可选参数，整数或者序列，bins 表示每一个间隔的边缘（起点和终点）默认会生成10个间隔。</p><p>range<br>指定全局间隔的下限与上限值 (min,max)，元组类型，默认值为 None。</p><p>density<br>如果为 True，返回概率密度直方图；默认为 False，返回相应区间元素的个数的直方图。</p><p>histtype<br>要绘制的直方图类型，默认值为“bar”，可选值有 barstacked(堆叠条形图)、step(未填充的阶梯图)、stepfilled(已填充的阶梯图)。</p><p>以下示例绘制了班级学生得分情况的直方图。其中定义了四个区间（bins）分别是：0-25、26-50、51-75 和 76-100。直方图显示了相应范围的学生人数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from matplotlib import pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">#创建图形对象和轴域对象</span><br><span class="line">fig,ax = plt.subplots(1,1)</span><br><span class="line">a = np.array([22,87,5,43,56,73,55,54,11,20,51,5,79,31,27])</span><br><span class="line">#绘制直方图</span><br><span class="line">ax.hist(a, bins = [0,25,50,75,100])</span><br><span class="line">#设置坐标轴</span><br><span class="line">ax.set_title(&quot;histogram of result&quot;)</span><br><span class="line">ax.set_xticks([0,25,50,75,100])</span><br><span class="line">ax.set_xlabel(&#x27;marks&#x27;)</span><br><span class="line">ax.set_ylabel(&#x27;no.of students&#x27;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="Matplotlib饼状图"><a href="#Matplotlib饼状图" class="headerlink" title="Matplotlib饼状图"></a>Matplotlib饼状图</h4><p>饼状图用来显示一个数据系列，具体来说，饼状图显示一个数据系列中各项目的占项目总和的百分比。<br>Matplotlib 提供了一个 pie() 函数，该函数可以生成数组中数据的饼状图。</p><p>可使用 x&#x2F;sum(x) 来计算各个扇形区域占饼图总和的百分比。</p><p>pie() 函数的参数说明如下：</p><p>X<br>数组序列，数组元素对应扇形区域的数量大小。</p><p>labels<br>列表字符串序列，为每个扇形区域备注一个标签名字。</p><p>color<br>为每个扇形区域设置颜色，默认按照颜色周期自动设置。</p><p>autopct<br>格式化字符串”fmt%pct”，使用百分比的格式设置每个扇形<br>区的标签，并将其放置在扇形区内。</p><p>以下示例：关于不同计算机语言学习人数的饼状图。</p><p>autopct 参数设置为 %1.2f% ，并将各项所占总和的百分比显示在相对应的扇形区内。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from matplotlib import pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">#添加图形对象</span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_axes([0,0,1,1])</span><br><span class="line">#使得X/Y轴的间距相等</span><br><span class="line">ax.axis(&#x27;equal&#x27;)</span><br><span class="line">#准备数据</span><br><span class="line">langs = [&#x27;C&#x27;, &#x27;C++&#x27;, &#x27;Java&#x27;, &#x27;Python&#x27;, &#x27;PHP&#x27;]</span><br><span class="line">students = [23,17,35,29,12]</span><br><span class="line">#绘制饼状图</span><br><span class="line">ax.pie(students, labels = langs,autopct=&#x27;%1.2f%%&#x27;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="Matplotlib折线图"><a href="#Matplotlib折线图" class="headerlink" title="Matplotlib折线图"></a>Matplotlib折线图</h4><p>折线图（line chart）是我们日常工作、学习中经常使用的一种图表，它可以直观的反映数据的变化趋势。与绘制柱状图、饼状图等图形不同，Matplotlib 并没有直接提供绘制折线图的函数，因此本节着重讲解如何绘制一幅折线图。</p><p>绘制单条折线</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">#准备绘制数据</span><br><span class="line">x = [&quot;Mon&quot;, &quot;Tues&quot;, &quot;Wed&quot;, &quot;Thur&quot;, &quot;Fri&quot;,&quot;Sat&quot;,&quot;Sun&quot;]</span><br><span class="line">y = [20, 40, 35, 55, 42, 80, 50]</span><br><span class="line"># &quot;g&quot; 表示红色，marksize用来设置&#x27;D&#x27;菱形的大小</span><br><span class="line">plt.plot(x, y, &quot;g&quot;, marker=&#x27;D&#x27;, markersize=5, label=&quot;周活&quot;)</span><br><span class="line">#显示图例</span><br><span class="line">plt.legend(loc=&quot;lower right&quot;)</span><br><span class="line">#调用 text()在图像上绘制注释文本</span><br><span class="line">#x1、y1表示文本所处坐标位置，ha参数控制水平对齐方式, va控制垂直对齐方式，str(y1)表示要绘制的文本</span><br><span class="line">for x1, y1 in zip(x, y):</span><br><span class="line">    plt.text(x1, y1, str(y1), ha=&#x27;center&#x27;, va=&#x27;bottom&#x27;, fontsize=10)</span><br><span class="line">#保存图片</span><br><span class="line">plt.savefig(&quot;1.jpg&quot;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>绘制多条折线图<br>当学习完如何绘制单条折线的绘制后，再绘制多条折线也变的容易，只要准备好绘制多条折线图的数据即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">#对比两天内同一时刻温度的变化情况</span><br><span class="line">x = [5, 8, 12, 14, 16, 18, 20]</span><br><span class="line">y1 = [18, 21, 29, 31, 26, 24, 20]</span><br><span class="line">y2 = [15, 18, 24, 30, 31, 25, 24]</span><br><span class="line">#绘制折线图，添加数据点，设置点的大小</span><br><span class="line"># * 表示绘制五角星；此处也可以不设置线条颜色，matplotlib会自动为线条添加不同的颜色</span><br><span class="line">plt.plot(x, y1, &#x27;r&#x27;,marker=&#x27;*&#x27;, markersize=10)</span><br><span class="line">plt.plot(x, y2, &#x27;b&#x27;, marker=&#x27;*&#x27;,markersize=10)</span><br><span class="line">plt.title(&#x27;温度对比折线图&#x27;)  # 折线图标题</span><br><span class="line">plt.xlabel(&#x27;时间(h)&#x27;)  # x轴标题</span><br><span class="line">plt.ylabel(&#x27;温度(℃)&#x27;)  # y轴标题</span><br><span class="line">#给图像添加注释，并设置样式</span><br><span class="line">for a, b in zip(x, y1):</span><br><span class="line">    plt.text(a, b, b, ha=&#x27;center&#x27;, va=&#x27;bottom&#x27;, fontsize=10)</span><br><span class="line">for a, b in zip(x, y2):</span><br><span class="line">    plt.text(a, b, b, ha=&#x27;center&#x27;, va=&#x27;bottom&#x27;, fontsize=10)</span><br><span class="line"></span><br><span class="line">#绘制图例</span><br><span class="line">plt.legend([&#x27;第一天&#x27;, &#x27;第二天&#x27;])</span><br><span class="line">#显示图像</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="Python-Matplotlib散点图"><a href="#Python-Matplotlib散点图" class="headerlink" title="Python Matplotlib散点图"></a>Python Matplotlib散点图</h4><p>散点图用于在水平轴和垂直轴上绘制数据点，它表示了因变量随自变量变化的趋势。通俗地讲，它反映的是一个变量受另一个变量的影响程度。</p><p>散点图将序列显示为一组点，其中每个散点值都由该点在图表中的坐标位置表示。对于不同类别的点，则由图表中不同形状或颜色的标记符表示。同时，您也可以设置标记符的颜色或大小。</p><p>下面示例，绘制了学生考试成绩的散点图，其中蓝色代表男孩成绩，红色表示女孩的成绩。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">girls_grades = [89, 90, 70, 89, 100, 80, 90, 100, 80, 34]</span><br><span class="line">boys_grades = [30, 29, 49, 48, 100, 48, 38, 45, 20, 30]</span><br><span class="line">grades_range = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]</span><br><span class="line">fig=plt.figure()</span><br><span class="line">#添加绘图区域</span><br><span class="line">ax=fig.add_axes([0,0,1,1])</span><br><span class="line">ax.scatter(grades_range, girls_grades, color=&#x27;r&#x27;,label=&quot;girls&quot;)</span><br><span class="line">ax.scatter(grades_range, boys_grades, color=&#x27;b&#x27;,label=&quot;boys&quot;)</span><br><span class="line">ax.set_xlabel(&#x27;Grades Range&#x27;)</span><br><span class="line">ax.set_ylabel(&#x27;Grades Scored&#x27;)</span><br><span class="line">ax.set_title(&#x27;scatter plot&#x27;)</span><br><span class="line">#添加图例</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="Matplotlib等高线图"><a href="#Matplotlib等高线图" class="headerlink" title="Matplotlib等高线图"></a>Matplotlib等高线图</h4><p>等高线图（也称“水平图”）是一种在二维平面上显示 3D 图像的方法。等高线有时也被称为 “Z 切片”，如果您想要查看因变量 Z 与自变量 X、Y 之间的函数图像变化（即 Z&#x3D;f(X,Y)），那么采用等高线图最为直观。</p><p>自变量 X 和 Y 需要被限制在矩形网格内，您可以将 x 、y 数组作为参数传递给 numpy.meshgrid() 函数来构建一个网格点矩阵。</p><p>Matplotlib API 提供了绘制等高线（contour）与填充等高线（ contourf）的函数。这两个函数都需要三个参数，分别是 X、Y 与 Z。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">#创建xlist、ylist数组</span><br><span class="line">xlist = np.linspace(-3.0, 3.0, 100)</span><br><span class="line">ylist = np.linspace(-3.0, 3.0, 100)</span><br><span class="line">#将上述数据变成网格数据形式</span><br><span class="line">X, Y = np.meshgrid(xlist, ylist)</span><br><span class="line">#定义Z与X,Y之间的关系</span><br><span class="line">Z = np.sqrt(X**2 + Y**2)</span><br><span class="line">fig,ax=plt.subplots(1,1)</span><br><span class="line">#填充等高线颜色</span><br><span class="line">cp = ax.contourf(X, Y, Z)</span><br><span class="line">fig.colorbar(cp) # 给图像添加颜色柱</span><br><span class="line">ax.set_title(&#x27;Filled Contours Plot&#x27;)</span><br><span class="line">ax.set_xlabel(&#x27;x (cm)&#x27;)</span><br><span class="line">ax.set_ylabel(&#x27;y (cm)&#x27;)</span><br><span class="line">#画等高线</span><br><span class="line">plt.contour(X,Y,Z)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>左侧图像绘制了两个变量 X、Y ，右侧的颜色柱（colorbar）则表示 X 的取值，颜色越深表示值越小，中间深色部分的圆心点表示 x&#x3D;0，y&#x3D;0，z&#x3D;0。</p><h4 id="Matplotlib振动图"><a href="#Matplotlib振动图" class="headerlink" title="Matplotlib振动图"></a>Matplotlib振动图</h4><p>振动图也叫磁场图，或量场图，其图像的表现形式是一组矢量箭头，其数学含义是在点 (x,y) 处具有分向量 (u,v)。</p><p>Matplotlib 提供绘制量场图的函数，如下所示：quiver(x,y,u,v)</p><p>上述函数表示，在指定的 (x,y) 坐标上以箭头的形式绘制向量，参数说明如下：</p><p>x<br>一维、二维数组或者序列，表示箭头位置的x坐标。</p><p>y<br>一维、二维数组或者序列，表示箭头位置的y坐标。</p><p>u<br>一维、二维数组或者序列，表示箭头向量的x分量。</p><p>v<br>一维、二维数组或者序列，表示箭头向量的y分量。</p><p>c<br>一维、二维数组或者序列，表示箭头颜色。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">x,y = np.meshgrid(np.arange(-2, 2, 0.2), np.arange(-2, 2, 0.25))</span><br><span class="line">z = x*np.exp(-x**2 - y**2)</span><br><span class="line">#计算数组中元素的梯度</span><br><span class="line">v, u = np.gradient(z, 0.2, 0.2)</span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">q = ax.quiver(x,y,u,v)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="Matplotlib提琴图"><a href="#Matplotlib提琴图" class="headerlink" title="Matplotlib提琴图"></a>Matplotlib提琴图</h4><p>小提琴图（Violin Plot）是用来展示数据分布状态以及概率密度的图表。这种图表结合了箱形图和密度图的特征。小提琴图跟箱形图类似，不同之处在于小提琴图还显示数据在不同数值下的概率密度。</p><p>小提琴图使用核密度估计（KDE）来计算样本的分布情况，图中要素包括了中位数、四分位间距以及置信区间。在数据量非常大且不方便一一展示的时候，小提琴图特别适用。</p><p>概率密度估计、置信区间、四分位间距都属于统计学中的概念，可自行查阅，这里不做说明。</p><p>小提琴图比箱型图能提供了更多的信息。虽然箱型图显示了均值、中位数和上、下四分位数等统计信息，但是小提琴图却显示了数据的完整分布情况，这更利于数据的分析与比对。下面是小提琴图的使用示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">np.random.seed(10)</span><br><span class="line">collectn_1 = np.random.normal(100, 10, 200)</span><br><span class="line">collectn_2 = np.random.normal(80, 30, 200)</span><br><span class="line">collectn_3 = np.random.normal(90, 20, 200)</span><br><span class="line">collectn_4 = np.random.normal(70, 25, 200)</span><br><span class="line">#创建绘制小提琴图的数据序列</span><br><span class="line">data_to_plot = [collectn_1, collectn_2, collectn_3, collectn_4]</span><br><span class="line">#创建一个画布</span><br><span class="line">fig = plt.figure()</span><br><span class="line">#创建一个绘图区域</span><br><span class="line">ax = fig.add_axes([0,0,1,1])</span><br><span class="line"># 创建一个小提琴图</span><br><span class="line">bp = ax.violinplot(data_to_plot)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="Python-Matplotlib-3D绘图详解"><a href="#Python-Matplotlib-3D绘图详解" class="headerlink" title="Python Matplotlib 3D绘图详解"></a>Python Matplotlib 3D绘图详解</h4><p>最初开发的 Matplotlib，仅支持绘制 2d 图形，后来随着版本的不断更新， Matplotlib 在二维绘图的基础上，构建了一部分较为实用的 3D 绘图程序包，比如 mpl_toolkits.mplot3d，通过调用该程序包一些接口可以绘制 3D散点图、3D曲面图、3D线框图等</p><p>面编写第一个三维绘图程序。首先创建一个三维绘图区域， plt.axes() 函数提供了一个参数projection，将其参数值设置为 “3d”。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from mpl_toolkits import mplot3d</span><br><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">fig = plt.figure()</span><br><span class="line">#创建3d绘图区域</span><br><span class="line">ax = plt.axes(projection=&#x27;3d&#x27;)</span><br><span class="line">#从三个维度构建</span><br><span class="line">z = np.linspace(0, 1, 100)</span><br><span class="line">x = z * np.sin(20 * z)</span><br><span class="line">y = z * np.cos(20 * z)</span><br><span class="line">#调用 ax.plot3D创建三维线图</span><br><span class="line">ax.plot3D(x, y, z, &#x27;gray&#x27;)</span><br><span class="line">ax.set_title(&#x27;3D line plot&#x27;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>上述代码中的 ax.plot3D() 函数可以绘制各种三维图形，这些三维图都要根据(x，y，z)三元组类来创建。</p><p>3D散点图</p><p>通过 ax.scatter3D() 函数可以绘制 3D 散点图，示例代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from mpl_toolkits import mplot3d</span><br><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">fig = plt.figure()</span><br><span class="line">#创建绘图区域</span><br><span class="line">ax = plt.axes(projection=&#x27;3d&#x27;)</span><br><span class="line">#构建xyz</span><br><span class="line">z = np.linspace(0, 1, 100)</span><br><span class="line">x = z * np.sin(20 * z)</span><br><span class="line">y = z * np.cos(20 * z)</span><br><span class="line">c = x + y</span><br><span class="line">ax.scatter3D(x, y, z, c=c)</span><br><span class="line">ax.set_title(&#x27;3d Scatter plot&#x27;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>3D等高线图</p><p>ax.contour3D() 可以用来创建三维等高线图，该函数要求输入数据均采用二维网格式的矩阵坐标。同时，它可以在每个网格点(x,y)处计算出一个 z 值。</p><p>以下示例展示了如何绘制三维正弦等高线图。代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">from mpl_toolkits import mplot3d</span><br><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">def f(x, y):</span><br><span class="line">   return np.sin(np.sqrt(x ** 2 + y ** 2))</span><br><span class="line">#构建x、y数据</span><br><span class="line">x = np.linspace(-6, 6, 30)</span><br><span class="line">y = np.linspace(-6, 6, 30)</span><br><span class="line">#将数据网格化处理</span><br><span class="line">X, Y = np.meshgrid(x, y)</span><br><span class="line">Z = f(X, Y)</span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = plt.axes(projection=&#x27;3d&#x27;)</span><br><span class="line">#50表示在z轴方向等高线的高度层级，binary颜色从白色变成黑色</span><br><span class="line">ax.contour3D(X, Y, Z, 50, cmap=&#x27;binary&#x27;)</span><br><span class="line">ax.set_xlabel(&#x27;x&#x27;)</span><br><span class="line">ax.set_ylabel(&#x27;y&#x27;)</span><br><span class="line">ax.set_zlabel(&#x27;z&#x27;)</span><br><span class="line">ax.set_title(&#x27;3D contour&#x27;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>3D线框图</p><p>线框图同样要采用二维网格形式的数据，与绘制等高线图类似。线框图可以将数据投影到指定的三维表面上，并输出可视化程度较高的三维效果图。通过 plot_wireframe() 能够绘制 3D 线框图。代码如下：</p><figure class="highlight plaintext"><figcaption><span>mpl_toolkits import mplot3d</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">#要绘制函数图像</span><br><span class="line">def f(x, y):</span><br><span class="line">   return np.sin(np.sqrt(x ** 2 + y ** 2))</span><br><span class="line">#准备x,y数据</span><br><span class="line">x = np.linspace(-6, 6, 30)</span><br><span class="line">y = np.linspace(-6, 6, 30)</span><br><span class="line">#生成x、y网格化数据</span><br><span class="line">X, Y = np.meshgrid(x, y)</span><br><span class="line">#准备z值</span><br><span class="line">Z = f(X, Y)</span><br><span class="line">#绘制图像</span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = plt.axes(projection=&#x27;3d&#x27;)</span><br><span class="line">#调用绘制线框图的函数plot_wireframe()</span><br><span class="line">ax.plot_wireframe(X, Y, Z, color=&#x27;black&#x27;)</span><br><span class="line">ax.set_title(&#x27;wireframe&#x27;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>3D曲面图<br>曲面图表示一个指定的因变量y与两个自变量x和z之间的函数关系。3D 曲面图是一个三维图形，它非常类似于线框图。不同之处在于，线框图的每个面都由多边形填充而成。Matplotlib 提供的 plot_surface() 函数可以绘制 3D 曲面图，该函数需要接受三个参数值 x，y 和 z 。示例代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from mpl_toolkits import mplot3d</span><br><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">#求向量积(outer()方法又称外积)</span><br><span class="line">x = np.outer(np.linspace(-2, 2, 30), np.ones(30))</span><br><span class="line">#矩阵转置</span><br><span class="line">y = x.copy().T </span><br><span class="line">#数据z</span><br><span class="line">z = np.cos(x ** 2 + y ** 2)</span><br><span class="line">#绘制曲面图</span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = plt.axes(projection=&#x27;3d&#x27;)</span><br><span class="line">调用plot_surface()函数</span><br><span class="line">ax.plot_surface(x, y, z,cmap=&#x27;viridis&#x27;, edgecolor=&#x27;none&#x27;)</span><br><span class="line">ax.set_title(&#x27;Surface plot&#x27;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="Matplotlib-绘制文本"><a href="#Matplotlib-绘制文本" class="headerlink" title="Matplotlib 绘制文本"></a>Matplotlib 绘制文本</h4><p>Matplotlib 支持广泛的文本格式，比如 TTF 页面语言、Unicode 字符等。这是因为 Matplotlib 内置了 matplotlib.font_manager 字体管理器，它是一个实现了跨平台，并符合 W3C 字体查找算法的字体集合。TTF（TrueType Font） 是苹果公司和微软公司合作开发的页面描述语言，用来描述字符的轮廓，结合了光栅技术和矢量技术的优点。用户可以对文本属性进行控制，比如字体大小、粗细、位置和颜色等。</p><p>与此同时，Matplotlib 也支持绘制 TeX 包含的数学符号。TeX 是一套功能强大、十分灵活的排版语言，它可以用来绘制文本、符号、数学表达式等。</p><p>通过下面的方法可以绘制出相应的内容：</p><p>text<br>在绘图区域的任意位置添加文本。</p><p>annotate<br>在绘图区域的任意位置添加带有可选箭头的注释。</p><p>xlabel<br>在绘图区域的 x 轴上添加标签。</p><p>ylabel<br>在绘图区域的 y 轴上添加标签。</p><p>title<br>为绘图区域添加标题。</p><p>figtext<br>在画布的任意位置添加文本。</p><p>suptitle<br>为画布中添加标题。</p><p>Matplotlib 使用pyplot模块中的 text() 函数绘制文本<br>函数的语法格式如下：plt.text(x, y, string, weight&#x3D;”bold”, color&#x3D;”b”)</p><p>x:<br>注释文本内容所在位置的横坐标；<br>y：<br>注释文本内容所在位置的纵坐标；<br>string：<br>注释文本内容；<br>weight：<br>注释文本内容的粗细风格；</p><p>下面使用 text() 函数会创建一个文本对象。示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">plt.rcParams[&quot;font.sans-serif&quot;]=[&quot;SimHei&quot;] #设置字体</span><br><span class="line">plt.rcParams[&quot;axes.unicode_minus&quot;]=False #正常显示负号</span><br><span class="line">fig = plt.figure()</span><br><span class="line">#添加绘图区域</span><br><span class="line">ax = fig.add_axes([0,0,1,1])</span><br><span class="line">#设置格式</span><br><span class="line">ax.set_title(&#x27;axes title&#x27;)</span><br><span class="line">ax.set_xlabel(&#x27;xlabel&#x27;)</span><br><span class="line">ax.set_ylabel(&#x27;ylabel&#x27;)</span><br><span class="line"># 3,8 表示x，y的坐标点；style设置字体样式为斜体；bbox用来设置盒子的属性，比如背景色</span><br><span class="line">ax.text(3, 8, &#x27;啊啊啊&#x27;, style=&#x27;italic&#x27;,bbox = &#123;&#x27;facecolor&#x27;: &#x27;yellow&#x27;&#125;,fontsize=15)</span><br><span class="line">#绘制数学表达式,用$符包裹</span><br><span class="line">ax.text(2, 6, r&#x27;an equation: $E = mc^2$&#x27;, fontsize = 15)</span><br><span class="line">#添加文字，并设置样式</span><br><span class="line">ax.text(4, 0.05, &#x27;344f969&#x27;,verticalalignment = &#x27;bottom&#x27;, color = &#x27;green&#x27;, fontsize = 15)</span><br><span class="line">ax.plot([2], [1], &#x27;o&#x27;)</span><br><span class="line">#xy为点的坐标；xytext为注释内容坐标；arrowprops设置箭头的属性</span><br><span class="line">ax.annotate(&#x27;C, xy = (2, 1), xytext = (3, 4),arrowprops = dict(facecolor = &#x27;blue&#x27;, shrink = 0.1))</span><br><span class="line">#设置坐标轴x,y</span><br><span class="line">ax.axis([0, 10, 0, 10])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="Matplotlib数学表达式"><a href="#Matplotlib数学表达式" class="headerlink" title="Matplotlib数学表达式"></a>Matplotlib数学表达式</h4><p>Matplotlib 中的文本字符串都可以使用 Text Markup（一种文本标记语言）显现出来，具体的使用方法是将文本标记符放在一对美元符号$内，语法格式如下：<br>#数学表达式<br>plt.title(r’$\alpha &gt; \beta$’)</p><p>如果要绘制下标和上标，您需要使用’_’和’^’符号，下面是一个简单的示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#绘制表达式 r&#x27;$\alpha_i&gt; \beta_i$&#x27;</span><br><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">t = np.arange(0.0, 2.0, 0.01)</span><br><span class="line">s = np.sin(2*np.pi*t)</span><br><span class="line">#绘制函数图像</span><br><span class="line">plt.plot(t,s)</span><br><span class="line">#设置标题</span><br><span class="line">plt.title(r&#x27;$\alpha_i&gt; \beta_i$&#x27;, fontsize=20)</span><br><span class="line">#设置数学表达式</span><br><span class="line">plt.text(0.6, 0.6, r&#x27;$\mathcal&#123;A&#125;\mathrm&#123;sin&#125;(2 \omega t)$&#x27;, fontsize = 20)</span><br><span class="line">#设置数学表达式</span><br><span class="line">plt.text(0.1, -0.5, r&#x27;$\sqrt&#123;2&#125;$&#x27;, fontsize=10)</span><br><span class="line">plt.xlabel(&#x27;time (s)&#x27;)</span><br><span class="line">plt.ylabel(&#x27;volts (mV)&#x27;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>从上述示例可以看出，虽然数学表达式种类繁多，但是 Matplotlib 对各种数学符号都做了良好的支持。</p><h4 id="Matplotlib-image图像处理"><a href="#Matplotlib-image图像处理" class="headerlink" title="Matplotlib image图像处理"></a>Matplotlib image图像处理</h4><p>Matplotlib 软件包中的image模块提供了加载、缩放和显示图像的功能，该模块只能支持 PNG 格式的图片，如果格式不符，需要对图片的格式进行转换</p><p>下面示例，imread() 函数用于读取图像数据并形成 ndarray 数组 ，其数据类型为 float32</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import matplotlib.image as mpimg</span><br><span class="line">import numpy as np</span><br><span class="line">img = mpimg.imread(&#x27;mtplogo.png&#x27;)</span><br></pre></td></tr></table></figure><p>通过执行 imsave() 函数，可以将包含图像数据的 ndarray 数组保存到磁盘文件中。</p><p>plt.imsave(“logo.png”, img, cmap &#x3D; ‘gray’, origin &#x3D; ‘lower’)</p><p>如下所示，将 imsave()方法的origin参数设置为 lower 实现了原始图像的垂直翻转。</p><p>通过 imshow() 函数可以在 Matplotlib 查看器上绘制出相应的图像。其函数格式如下：imgplot &#x3D; plt.imshow(img)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">fig=plt.figure()</span><br><span class="line">ax1=fig.add_subplot(221)</span><br><span class="line">ax2=fig.add_subplot(222)</span><br><span class="line">ax3=fig.add_subplot(223)</span><br><span class="line">ax4=fig.add_subplot(224)</span><br><span class="line">#准备数据</span><br><span class="line">#绘制z = sqrt(x^2+y^2)图像</span><br><span class="line">points=np.arange(-5,5,0.01)</span><br><span class="line"># meshgrid 接受两个一维数组，然后产生两个二维矩阵</span><br><span class="line">xs,ys=np.meshgrid(points,points)</span><br><span class="line">#绘制图像</span><br><span class="line">z=np.sqrt(xs**2+ys**2)</span><br><span class="line">ax = fig.add_subplot(221)</span><br><span class="line">#默认</span><br><span class="line">ax.imshow(z)</span><br><span class="line">ax = fig.add_subplot(222)</span><br><span class="line">ax.imshow(z,cmap = &quot;gray&quot;)</span><br><span class="line">ax = fig.add_subplot(223)</span><br><span class="line">ax.imshow(z,cmap=&quot;cool&quot;)</span><br><span class="line">ax = fig.add_subplot(224)</span><br><span class="line">ax.imshow(z,cmap=&quot;hot&quot;)</span><br><span class="line">#显示图像</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># from PIL import Image</span><br><span class="line"># import matplotlib.pyplot as plt</span><br><span class="line"># img=Image.open(&#x27;E:/My/python1/12.png&#x27;)</span><br><span class="line"># plt.figure(&quot;dog&quot;)</span><br><span class="line"># plt.imshow(img)</span><br><span class="line"># plt.show()</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import matplotlib.image as pli</span><br><span class="line">image = plt.imread(&#x27;E:/My/python1/12.png&#x27;)    </span><br><span class="line">plt.imshow(image)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Matplotlib转换对象"><a href="#Matplotlib转换对象" class="headerlink" title="Matplotlib转换对象"></a>Matplotlib转换对象</h4><p>Matplotlib 是一款轻量级的图形转换框架，它通过转换对象轻松地实现了数据坐标系、轴域坐标系、图形坐标系，以及显示坐标系四者之间的相互转换，由于这种转换是 Matplotlib 自动完成的，因此无需考虑其底层原理。</p><p>坐标系转换对象</p><p>下面对四种坐标系做简单说明，其中ax代表轴域对象的实例；fig代表图形对象的实例。</p><img src="/post/8710c1f/364.png" class title="This is an image"><p>转换对象作用就是在不同对象之间架起一座沟通的桥梁。输入一组数据最终以图像的形式显示，这个过程就是依靠转换对象来实现的。</p><p>上表中的 Data、Axes、Figure，这三个转换对象都可以接受一组数据，它们会将接受的数据转换到显示坐标系中，即 Display。在这个过程中，显示坐标系只是充当数据的接收者，因此显示坐标系不存在转换对象。</p><p>示例说明<br>下面举一个简单的示例，现有文本“my text”放置在数据点 (x,y) 位置处：<br>axes.text(x,y,”my text”) </p><p>通过 Axes 转换对象，我们可以指定文本的位置。使用以下代码，将文本移动至在坐标系的中心位置：axes.text(0.5, 0.5, “middle of graph”, transform&#x3D;axes.transAxes)</p>]]></content>
      
      
      <categories>
          
          <category> matplotlib </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析三剑客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言常见函数</title>
      <link href="/post/25258312.html"/>
      <url>/post/25258312.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h4 id="一-lt-ctype-h-gt-函数原型功能"><a href="#一-lt-ctype-h-gt-函数原型功能" class="headerlink" title="一. &lt;ctype.h&gt;函数原型功能"></a>一. &lt;ctype.h&gt;函数原型功能</h4><p>int iscntrl(int c)<br>判断字符c是否为控制字符。</p><p>int isalnum(int c)<br>判断字符c是否为字母或数字</p><p>int isalpha(int c)<br>判断字符c是否为英文字母</p><p>int isascii(int c)<br>判断字符c是否为ascii码</p><p>int isblank(int c)<br>判断字符c是否为TAB或空格</p><p>int isdigit(int c)<br>判断字符c是否为数字</p><p>int isgraph(int c)<br>判断字符c是否为除空格外的可打印字符</p><p>int islower(int c)<br>判断字符c是否为小写英文字母</p><p>int isprint(int c)<br>判断字符c是否为可打印字符（含空格）</p><p>int ispunct(int c)<br>判断字符c是否为标点符号</p><p>int isspace(int c)<br>判断字符c是否为空白符</p><p>int isupper(int c)<br>判断字符c是否为大写英文字母</p><p>int isxdigit(int c)<br>判断字符c是否为十六进制数字</p><p>int toascii(int c)<br>将字符c转换为ascii码</p><p>int tolower(int c)<br>将字符c转换为小写英文字母</p><p>int toupper(int c)<br>将字符c转换为大写英文字母</p><h4 id="二-lt-math-h-gt-函数原型功能"><a href="#二-lt-math-h-gt-函数原型功能" class="headerlink" title="二. &lt;math.h&gt;函数原型功能"></a>二. &lt;math.h&gt;函数原型功能</h4><p>float fabs(float x)<br>求浮点数x的绝对值</p><p>int abs(int x)<br>求整数x的绝对值</p><p>float acos(float x)<br>求x（弧度表示）的反余弦值</p><p>float asin(float x)<br>求x（弧度表示）的反正弦值</p><p>float atan(float x)<br>求x（弧度表示）的反正切值</p><p>float atan2(float y, float x)<br>求y&#x2F;x（弧度表示）的反正切值</p><p>float ceil(float x)<br>不小于x的最小整数</p><p>float cos(float x)<br>求x（弧度表示）的余弦值</p><p>float cosh(float x)<br>求x的双曲余弦值</p><p>float exp(float x)<br>求e的x次幂</p><p>float floor(float x)<br>求不大于x的最大整数</p><p>float fmod(float x, float y)<br>计算x&#x2F;y的余数</p><p>float frexp(float x, int *exp)<br>把浮点数x分解成尾数和指数</p><p>float ldexp(float x, int exp)<br>返回x*2^exp的值</p><p>float modf(float num, float *i)<br>将浮点数num分解成整数部分和小数部分</p><p>float hypot(float x, float y)<br>对于给定的直角三角形的两个直角边，求其斜边的长度</p><p>float log(float x)<br>计算x的自然对数</p><p>float log10(float x)<br>计算x的常用对数</p><p>float pow(float x, float y)<br>计算x的y次幂</p><p>float pow10(float x)<br>计算10的x次幂</p><p>float sin(float x)<br>计算x（弧度表示）的正弦值</p><p>float sinh(float x)<br>计算x（弧度表示）的双曲正弦值</p><p>float sqrt(float x)<br>计算x的平方根</p><p>float tan(float x)<br>计算x（弧度表示）的正切值</p><p>float tanh(float x)<br>求x的双曲正切值</p><h4 id="三-lt-stdio-h-gt-函数原型功能"><a href="#三-lt-stdio-h-gt-函数原型功能" class="headerlink" title="三. &lt;stdio.h&gt;函数原型功能"></a>三. &lt;stdio.h&gt;函数原型功能</h4><p>int printf(char *format…)<br>产生格式化输出的函数</p><p>int getchar(void)<br>从键盘上读取一个键，并返回该键的键值</p><p>int putchar(char c)<br>在屏幕上显示字符</p><p>cFILE *fopen(char *filename, char *type)<br>打开一个文件</p><p>FILE *freopen(char *filename, char *type,FILE *fp)<br>打开一个文件，并将该文件关联到fp指定的流</p><p>int fflush(FILE *stream)<br>清除一个流</p><p>int fclose(FILE *stream)<br>关闭一个文件</p><p>int remove(char *filename)<br>删除一个文件</p><p>int rename(char *oldname, char *newname)<br>重命名文件</p><p>FILE *tmpfile(void)<br>以二进制方式打开暂存文件</p><p>char *tmpnam(char *sptr)<br>创建一个唯一的文件名</p><p>int setvbuf(FILE *stream, char *buf, int type, unsigned size)<br>把缓冲区与流相关</p><p>int fprintf(FILE *stream, char *format[, argument,…])<br>传送格式化输出到一个流中</p><p>int scanf(char *format[,argument,…])<br>执行格式化输入</p><p>int fscanf(FILE *stream, char *format[,argument…])<br>从一个流中执行格式化输入</p><p>int fgetc(FILE *stream)<br>从流中读取字符</p><p>char *fgets(char *string, int n, FILE *stream)<br>从流中读取一字符串</p><p>int fputc(int ch, FILE *stream)<br>送一个字符到一个流中</p><p>int fputs(char *string, FILE *stream)<br>送一个字符到一个流中</p><p>int getc(FILE *stream)<br>从流中取字符</p><p>int getchar(void)<br>从 stdin 流中读字符</p><p>char *gets(char *string)<br>从流中取一字符串</p><p>int putchar(int ch)<br>在 stdout 上输出字符</p><p>int puts(char *string)<br>送一字符串到流中</p><p>int ungetc(char c, FILE *stream)<br>把一个字符退回到输入流中</p><p>int fread(void *ptr, int size, int nitems, FILE *stream)<br>从一个流中读数据</p><p>int fwrite(void *ptr, int size, int nitems, FILE *stream)<br>写内容到流中</p><p>int fseek(FILE *stream, long offset, int fromwhere)<br>重定位流上的文件指针</p><p>long ftell(FILE *stream)<br>返回当前文件指针</p><p>int rewind(FILE *stream)<br>将文件指针重新指向一个流的开头</p><p>int fgetpos(FILE *stream)<br>取得当前文件的句柄</p><p>int fsetpos(FILE *stream, const fpos_t *pos)<br>定位流上的文件指针</p><p>void clearerr(FILE *stream)<br>复位错误标志</p><p>int feof(FILE *stream)<br>检测流上的文件结束符</p><p>int ferror(FILE *stream)<br>检测流上的错误</p><p>void perror(char *string)<br>系统错误信息</p><h4 id="四-lt-stdlib-h-gt-函数原型功能"><a href="#四-lt-stdlib-h-gt-函数原型功能" class="headerlink" title="四. &lt;stdlib.h&gt;函数原型功能"></a>四. &lt;stdlib.h&gt;函数原型功能</h4><p>char *itoa(int i)<br>把整数i转换成字符串</p><p>void exit(int retval)<br>结束程序</p><p>double atof(const char *s)<br>将字符串s转换为double类型</p><p>int atoi(const char *s)<br>将字符串s转换为int类型</p><p>long atol(const char *s)<br>将字符串s转换为long类型</p><p>double strtod (const char*s,char **endp)<br>将字符串s前缀转换为double型</p><p>long strtol(const char*s,char **endp,int base)<br>将字符串s前缀转换为long型</p><p>unsinged long strtol(const char*s,char **endp,int base)<br>将字符串s前缀转换为 </p><p>unsinged long型int rand(void)<br>产生一个0~RAND_MAX之间的伪随机数</p><p>void srand(unsigned int seed)<br>初始化随机数发生器</p><p>void *calloc(size_t nelem, size_t elsize)<br>分配主存储器</p><p>void *malloc(unsigned size)<br>内存分配函数</p><p>void *realloc(void *ptr, unsigned newsize)<br>重新分配主存</p><p>void free(void *ptr)<br>释放已分配的块</p><p>void abort(void)<br>异常终止一个进程</p><p>void exit(int status)<br>终止应用程序</p><p>int atexit(atexit_t func)<br>注册终止函数</p><p>char *getenv(char *envvar)<br>从环境中取字符串</p><p>void *bsearch(const void *key, const void *base, size_t *nelem, size_t width, int(*fcmp)(const void *, const *))<br>二分法搜索函数</p><p>void qsort(void *base, int nelem, int width, int (*fcmp)())<br>使用快速排序例程进行排序</p><p>int abs(int i)<br>求整数的绝对值</p><p>long labs(long n)<br>取长整型绝对值</p><p>div_t div(int number, int denom)<br>将两个整数相除 , 返回商和余数</p><p>ldiv_t ldiv(long lnumer, long ldenom)<br>两个长整型数相除 , 返回商和余数</p><h4 id="五-lt-time-h-gt-函数原型功能"><a href="#五-lt-time-h-gt-函数原型功能" class="headerlink" title="五. &lt;time.h&gt;函数原型功能"></a>五. &lt;time.h&gt;函数原型功能</h4><p>clock_t clock(void)<br>确定处理器时间函数</p><p>time_t time(time_t *tp)<br>返回当前日历时间</p><p>double difftime(time_t time2, time_t time1)<br>计算两个时刻之间的时间差</p><p>time_t mktime(struct tm *tp)<br>将分段时间值转换为日历时间值</p><p>char *asctime(const struct tm *tblock)<br>转换日期和时间为ASCII码</p><p>char *ctime(const time_t *time)<br>把日期和时间转换为字符串</p><p>struct tm *gmtime(const time_t *timer)<br>把日期和时间转换为格林尼治标准时间</p><p>struct tm *localtime(const time_t *timer)<br>把日期和时间转变为结构</p><p>size_t strftime(char *s,size_t smax,const char *fmt, const struct tm *tp)<br>根据 fmt 的格式 要求将 *tp中的日期与时间转换为指定格式</p><h4 id="六-lt-string-h-gt-函数原型功能"><a href="#六-lt-string-h-gt-函数原型功能" class="headerlink" title="六. &lt;string.h&gt;函数原型功能"></a>六. &lt;string.h&gt;函数原型功能</h4><p>int bcmp(const void *s1, const void *s2, int n)<br>比较字符串s1和s2的前n个字节是否相等</p><p>void bcopy(const void *src, void *dest, int n)<br>将字符串src的前n个字节复制到dest中</p><p>void bzero(void *s, int n)<br>置字节字符串s的前n个字节为零</p><p>void *memccpy(void *dest, void *src, unsigned char ch, unsigned int count)<br>由src所指内存区域复制不多于count个字节到dest所指内存区域，如果遇到字符ch则停止复制</p><p>void *memcpy(void *dest, void *src, unsigned int count)<br>由src所指内存区域复制count个字节到dest所指内存区域</p><p>void *memchr(void *buf, char ch, unsigned count)<br>从buf所指内存区域的前count个字节查找字符</p><p>chint memcmp(void *buf1, void *buf2, unsigned int count)<br>比较内存区域buf1和buf2的前count个字节</p><p>int memicmp(void *buf1, void *buf2, unsigned int count)<br>比较内存区域buf1和buf2的前count个字节但不区分字母的大小写</p><p>void *memmove(void *dest, const void *src, unsigned int count)<br>由src所指内存区域复制count个字节到dest所指内存区域</p><p>void *memset(void *buffer, int c, int count)<br>把buffer所指内存区域的前count个字节设置成字符c</p><p>void setmem(void *buf, unsigned int count, char ch)<br>把buf所指内存区域前count个字节设置成字符ch</p><p>void movmem(void *src, void *dest, unsigned int count)<br>由src所指内存区域复制count个字节到dest所指内存区域</p><p>char *stpcpy(char *dest,char *src)<br>把src所指由NULL结束的字符串复制到dest所指的数组中</p><p>char *strcpy(char *dest,char *src)<br>把src所指由NULL结束的字符串复制到dest所指的数组中</p><p>char *strcat(char *dest,char *src)<br>把src所指字符串添加到dest结尾处(覆盖dest结尾处的’\0’)并添加’\0’</p><p>char *strchr(char *s,char c)<br>查找字符串s中首次出现字符c的位置</p><p>int strcmp(char *s1,char * s2)<br>比较字符串s1和s2</p><p>int strcmp(char *s1,char * s2)<br>比较字符串s1和s2</p><p>int stricmp(char *s1,char * s2)<br>比较字符串s1和s2，但不区分字母的大小写</p><p>int strcspn(char *s1,char *s2)<br>在字符串s1中搜寻s2中所出现的字符</p><p>char *strdup(char *s)复制字符串s</p><p>int strlen(char *s)<br>计算字符串s的长度</p><p>char *strlwr(char *s)<br>将字符串s转换为小写形式</p><p>char *strupr(char *s)<br>将字符串s转换为大写形式</p><p>char *strncat(char *dest,char *src,int n)<br>把src所指字符串的前n个字符添加到dest结尾处(覆盖dest结尾处的’\0’)并添加’\0’</p><p>int strcmp(char *s1,char * s2，int n)<br>比较字符串s1和s2的前n个字符</p><p>int strnicmp(char *s1,char * s2，int n)<br>比较字符串s1和s2的前n个字符但不区分大小写</p><p>char *strncpy(char *dest, char *src, int n)<br>把src所指由NULL结束的字符串的前n个字节复制到dest所指的数组中</p><p>char *strpbrk(char *s1, char *s2)<br>在字符串s1中寻找字符串s2中任何一个字符相匹配的第一个字符的位置，空字符NULL不包括在内</p><p>char *strrev(char *s)<br>把字符串s的所有字符的顺序颠倒过来（不包括空字符NULL）</p><p>char *strset(char *s, char c)<br>把字符串s中的所有字符都设置成字符c</p><p>char *strstr(char *haystack, char *needle)<br>从字符串haystack中寻找needle第一次出现的位置（不比较结束符NULL)</p><p>char *strtok(char *s, char *delim)<br>分解字符串为一组标记串。s为要分解的字符串，delim为分隔符字符串</p><p>int strnicmp(char *s1,char * s2，int n)<br>比较字符串s1和s2的前n个字符但不区分大小写</p>]]></content>
      
      
      <categories>
          
          <category> c/c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numpy（七）</title>
      <link href="/post/80ae9ac0.html"/>
      <url>/post/80ae9ac0.html</url>
      
        <content type="html"><![CDATA[<h4 id="NumPy和Matplotlib绘图"><a href="#NumPy和Matplotlib绘图" class="headerlink" title="NumPy和Matplotlib绘图"></a>NumPy和Matplotlib绘图</h4><p>Matplotlib 是 Python 的绘图库，它经常与 NumPy 一起使用，从而提供一种能够代替 Matlab 的方案。不仅如此 Matplotlib 还可以与 PyQt 和 wxPython 等图形工具包一起使用。</p><p>绘制线性函数图像</p><p>Matplotlib 的子模块模块 pyplot 是用来绘制 2D 图像的重要模块。</p><p>绘制了函数 y &#x3D; 2x + 5 的图像：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">from matplotlib import pyplot as plt</span><br><span class="line">x = np.arange(1,11)</span><br><span class="line">y = 2 * x + 5</span><br><span class="line">#绘制坐标标题</span><br><span class="line">plt.title(&quot;Matplotlib demo&quot;)</span><br><span class="line">#绘制x、y轴备注</span><br><span class="line">plt.xlabel(&quot;x axis&quot;)</span><br><span class="line">plt.ylabel(&quot;y axis&quot;)</span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>您可以向 plot() 函数中添加格式化字符，来实现不同样式的显示或标记。 </p><p>常用的格式化字符：</p><p>‘-‘<br>实线样式</p><p>‘–’<br>短横线样式</p><p>‘-.’<br>点划线样式</p><p>‘:’<br>虚线样式</p><p>‘.’<br>点标记</p><p>‘,’<br>像素标记</p><p>‘o’<br>圆标记</p><p>‘v’<br>倒三角标记</p><p>‘^’<br>正三角标记</p><p>‘&lt;’<br>左三角标记</p><p>‘&gt;’<br>右三角标记</p><p>‘1’<br>下箭头标记</p><p>‘2’<br>上箭头标记</p><p>‘3’<br>左箭头标记</p><p>‘4’<br>右箭头标记</p><p>‘s’<br>正方形标记</p><p>‘p’<br>五边形标记</p><p>‘*’<br>星形标记</p><p>‘h’<br>六边形标记 1</p><p>‘H’<br>六边形标记 2</p><p>‘+’<br>加号标记</p><p>‘x’<br>X 标记</p><p>‘D’<br>菱形标记</p><p>‘d’<br>窄菱形标记</p><p>‘|’<br>竖直线标记</p><p>‘_’<br>水平线标记</p><p>同时 Matplotlib 还定义了一些颜色字符</p><p>‘b’<br>蓝色</p><p>‘g’<br>绿色</p><p>‘r’<br>红色</p><p>‘c’<br>青色</p><p>‘m’<br>品红色</p><p>‘y’<br>黄色</p><p>‘k’<br>黑色</p><p>‘w’<br>白色</p><p>如果想要以圆点的样式，来代替图 1 中的线条样式，那么可以使用“ ob”作为 plot() 的格式化字符。如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">from matplotlib import pyplot as plt</span><br><span class="line">x = np.arange(1,11)</span><br><span class="line">y = 2 * x + 5</span><br><span class="line">plt.title(&quot;Matplotlib demo1&quot;)</span><br><span class="line">plt.xlabel(&quot;x axis&quot;)</span><br><span class="line">plt.ylabel(&quot;y axis&quot;)</span><br><span class="line">plt.plot(x,y,&quot;ob&quot;)</span><br><span class="line">plt.show() </span><br></pre></td></tr></table></figure><p>绘制正弦波图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt </span><br><span class="line"># 计算正弦曲线上的x和y坐标</span><br><span class="line">x = np.arange(0, 3 * np.pi, 0.1)</span><br><span class="line">y = np.sin(x)</span><br><span class="line">plt.title(&quot;sine wave image&quot;)</span><br><span class="line"># 使用matplotlib制图</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.show() </span><br></pre></td></tr></table></figure><p>subplot()<br>subplot() 允许您在同一画布中的不同位置绘制多个图像，可以理解为对画布按行、列分割</p><p>函数的语法格式：</p><p>plt.subplot(nrows, ncols, index, **kwargs)</p><p>该函数使用三个整数描述子图的位置信息，这三个整数是行数、列数和索引值（此处索引值从1开始），子图将分布在设定的索引位置上。</p><p>从右上角增加到右下角。<br>plt.subplot(2, 3, 5) 表示子图位于 2 行 3 列 中的第 5 个位置上。</p><p>下面示例是在同一画布中绘制正弦和余弦图像：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt </span><br><span class="line">  </span><br><span class="line">#计算正弦和余弦曲线上的点的 x 和 y 坐标 </span><br><span class="line">x = np.arange(0, 3 * np.pi, 0.1)</span><br><span class="line">y_sin = np.sin(x)</span><br><span class="line">y_cos = np.cos(x) </span><br><span class="line">  </span><br><span class="line">#绘制subplot 网格为2行1列</span><br><span class="line">#激活第一个 subplot</span><br><span class="line">plt.subplot(2, 1, 1)</span><br><span class="line">#绘制第一个图像</span><br><span class="line">plt.plot(x, y_sin)</span><br><span class="line">plt.title(&#x27;Sine&#x27;) </span><br><span class="line"></span><br><span class="line">#将第二个 subplot 激活，并绘制第二个图像</span><br><span class="line">plt.subplot(2, 1, 2)</span><br><span class="line">plt.plot(x, y_cos)</span><br><span class="line">plt.title(&#x27;Cosine&#x27;)</span><br><span class="line">#展示图像</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>bar()柱状图</p><p>pyplot 子模块中提供了 bar() 函数来生成柱状图。</p><p>下面示例代码，生成了两组数据的柱状图：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from matplotlib import pyplot as plt</span><br><span class="line">#第一组数据</span><br><span class="line">x1 = [5,8,10]</span><br><span class="line">y1 = [12,16,6] </span><br><span class="line">#第二组数据</span><br><span class="line">x2 = [6,9,11]</span><br><span class="line">y2 = [6,15,7]</span><br><span class="line">plt.bar(x1, y1, align = &#x27;center&#x27;)</span><br><span class="line">plt.bar(x2, y2, color = &#x27;g&#x27;, align = &#x27;center&#x27;)</span><br><span class="line">plt.title(&#x27;Bar graph&#x27;)</span><br><span class="line">#设置x轴与y轴刻度</span><br><span class="line">plt.ylabel(&#x27;Y axis&#x27;)</span><br><span class="line">plt.xlabel(&#x27;X axis&#x27;) </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>numpy.histogram()</p><p>直方图是一种表示数据概率分布的常用图形。</p><p>NumPy 提供了 histogram() 函数，它以直方图的形式表示一组数据的概率分布值。histogram() 函数有两个返回值，分别是 hist 与 bin_edges，分别代表直方图高度值与 bin 数值区间范围，</p><p>函数的语法格式如下：<br>histogram(array,bins&#x3D;10,range&#x3D;None,weights&#x3D;None,density&#x3D;False)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np </span><br><span class="line">a = np.arange(8) </span><br><span class="line">hist, bin_edges = np.histogram(a, density=True) </span><br></pre></td></tr></table></figure><p>numpy.histogram() 将输入数组 a 和 bins 作为两个参数，其中 bins 数组的连续元素作为 bin 区间的边界值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.array([22,87,5,43,56,73,55,54,11,20,51,5,79,31,27])</span><br><span class="line">np.histogram(a,bins = [0,20,40,60,80,100])</span><br><span class="line">hist,bins = np.histogram(a,bins = [0,20,40,60,80,100]) </span><br><span class="line">print(hist)</span><br><span class="line">print(bins)</span><br></pre></td></tr></table></figure><p>plt()<br>pyplot 子模块的 plt() 函数将一个输入数组和 bins 数组作为参数，并将其输出为直方图。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from matplotlib import pyplot as plt</span><br><span class="line">import numpy as np </span><br><span class="line">a = np.array([22,87,5,43,56,73,55,54,11,20,51,5,79,31,27])</span><br><span class="line">plt.hist(a, bins =  [0,20,40,60,80,100])</span><br><span class="line">plt.title(&quot;histogram&quot;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="NumPy-IO操作"><a href="#NumPy-IO操作" class="headerlink" title="NumPy IO操作"></a>NumPy IO操作</h4><p>NumPy  IO 操作是以文件的形式从磁盘中加载 ndarray 对象。在这个过程中，NumPy 可以两种文件类型处理 ndarray 对象，一类是二进制文件（以.npy结尾），另一类是普通文本文件。</p><img src="/post/80ae9ac0/349.png" class title="This is an image"><p>我们知道，文件会被保存在不同的计算机上（比如 Linux、Windows、MacOSX 等）。为了不受的计算机架构影响，NumPy 开发团队给 ndarray 对象引入了一种.npy文件格式，通过它来件实现对 ndarray 对象的保存。</p><p>numpy.save() 方法将输入数组存储在.npy文件中。</p><p>numpy.save(file, arr, allow_pickle&#x3D;True, fix_imports&#x3D;True)</p><p>file：保存后的文件名称，其文件类型为.npy；</p><p>arr：要保存的数组</p><p>allow_pickle：可选项，布尔值参数，允许使用 pickle 序列化保存数组对象</p><p>fix_imports：可选项，为了便于在 Pyhton2 版本中读取 Python3 保存的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.array([1,2,3,4,5])</span><br><span class="line">np.save(&#x27;first&#x27;,a)</span><br></pre></td></tr></table></figure><p>使用 load() 从 first.npy 文件中加载数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">b = np.load(&#x27;outfile.npy&#x27;)</span><br><span class="line">print( b) </span><br></pre></td></tr></table></figure><p>savetxt()</p><p>savetxt() 和 loadtxt() 分别表示以文本格式存储数据或加载数据。</p><p>savetxt() 语法格式：<br>np.savetxt(‘filename文件路径’, self.task, fmt&#x3D;”%d”, delimiter&#x3D;” “)</p><p>filename：表示保存文件的路径<br>self.task： 要保存数组的变量名<br>fmt&#x3D;”%d”： 指定保存文件的格式，默认是十进制<br>delimiter&#x3D;” “表示分隔符，默认以空格的形式隔开</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.array([1,2,3,4,5])</span><br><span class="line">np.savetxt(&#x27;second.txt&#x27;,a)</span><br><span class="line">#使用loadtxt重载数据</span><br><span class="line">b = np.loadtxt(&#x27;second.txt&#x27;)</span><br><span class="line">print(b) </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> numpy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析三剑客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numpy（六）</title>
      <link href="/post/52aeed5f.html"/>
      <url>/post/52aeed5f.html</url>
      
        <content type="html"><![CDATA[<h4 id="NumPy排序和搜索功能"><a href="#NumPy排序和搜索功能" class="headerlink" title="NumPy排序和搜索功能"></a>NumPy排序和搜索功能</h4><h5 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h5><p>NumPy 提供了多种排序函数， 这些排序函数可以实现不同的排序算法。<br>排序算法特征主要体现在以下四个方面：执行速度，最坏情况下的复杂度，所需的工作空间以及算法的稳定性。</p><p>下表列举了三种排序算法：</p><img src="/post/52aeed5f/347.png" class title="This is an image"><p>numpy.sort()</p><p>numpy.sort() 对输入数组执行排序，并返回一个数组副本<br>numpy.sort(a, axis, kind, order)</p><p>a：要排序的数组；<br>axis：沿着指定轴进行排序，如果没有指定 axis，默认在最后一个轴上排序，若 axis&#x3D;0 表示按列排序，axis&#x3D;1 表示按行排序<br>kind：默认为 quicksort（快速排序）<br>order：若数组设置了字段，则 order 表示要排序的字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np </span><br><span class="line">a = np.array([[3,7],[9,1]]) </span><br><span class="line">print(&#x27;a数组是：&#x27;)</span><br><span class="line">print(a)</span><br><span class="line">#调用sort()函数</span><br><span class="line">print(np.sort(a))</span><br><span class="line">#按列排序：</span><br><span class="line">print(np.sort(a, axis = 0))</span><br><span class="line">#设置在sort函数中排序字段</span><br><span class="line">dt = np.dtype([(&#x27;name&#x27;,  &#x27;S10&#x27;),(&#x27;age&#x27;,  int)])</span><br><span class="line">a = np.array([(&quot;raju&quot;,21),(&quot;anil&quot;,25),(&quot;ravi&quot;,  17),  (&quot;amar&quot;,27)], dtype = dt) </span><br><span class="line">#再次打印a数组</span><br><span class="line">print(a)</span><br><span class="line">#按name字段排序</span><br><span class="line">print(np.sort(a, order = &#x27;name&#x27;))</span><br></pre></td></tr></table></figure><p>numpy.argsort()</p><p>argsort() 沿着指定的轴，对输入数组的元素值进行排序，并返回排序后的<strong>元素索引数组</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np </span><br><span class="line">a = np.array([90, 29, 89, 12]) </span><br><span class="line">print(&quot;原数组&quot;,a) </span><br><span class="line">sort_ind = np.argsort(a) </span><br><span class="line">print(&quot;打印排序元素索引值&quot;,sort_ind) </span><br><span class="line">#使用索引数组对原数组排序</span><br><span class="line">sort_a = a[sort_ind] </span><br><span class="line">print(&quot;打印排序数组&quot;) </span><br><span class="line">for i in sort_ind: </span><br><span class="line">    print(a[i],end = &quot; &quot;)  </span><br></pre></td></tr></table></figure><p>numpy.lexsort()</p><p>numpy.lexsort() 按键序列对数组进行排序，它返回一个已排序的<strong>索引数组</strong>，类似于 numpy.argsort()。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np </span><br><span class="line">a = np.array([&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;]) </span><br><span class="line">b = np.array([12, 90, 380, 12, 211]) </span><br><span class="line">ind = np.lexsort((a,b)) </span><br><span class="line">#打印排序元素的索引数组</span><br><span class="line">print(ind) </span><br><span class="line">#使用索引数组对数组进行排序</span><br><span class="line">for i in ind: </span><br><span class="line">    print(a[i],b[i])  </span><br></pre></td></tr></table></figure><h5 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h5><p>NumPy 提供了许多可以在数组内执行搜索功能的函数。</p><p>numpy.nonzero()</p><p>该函数从数组中查找非零元素的索引位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np </span><br><span class="line">b = np.array([12, 90, 380, 12, 211]) </span><br><span class="line">print(&quot;原数组b&quot;,b) </span><br><span class="line">print(&quot;打印非0元素的索引位置&quot;) </span><br><span class="line">print(b.nonzero())  </span><br></pre></td></tr></table></figure><p>numpy.where()</p><p>numpy.where() 的返回值是满足了给定条件的元素索引值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np </span><br><span class="line">b = np.array([12, 90, 380, 12, 211]) </span><br><span class="line">print(np.where(b&gt;12)) </span><br><span class="line">c = np.array([[20, 24],[21, 23]]) </span><br><span class="line">print(np.where(c&gt;20))  </span><br></pre></td></tr></table></figure><p>numpy.extract()<br>该函数的返回值是满足了给定条件的元素值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">x = np.arange(9.).reshape(3, 3)</span><br><span class="line">打印数组x:&#x27;</span><br><span class="line">print(x) </span><br><span class="line">#设置条件选择偶数元素</span><br><span class="line">condition = np.mod(x,2)== 0</span><br><span class="line">#输出布尔值数组</span><br><span class="line">print(condition)</span><br><span class="line">#按condition提取满足条件的元素值</span><br><span class="line">print np.extract(condition, x)</span><br></pre></td></tr></table></figure><p>numpy.argmax()</p><p>该函数返回最大值的的索引，与其相反的函数是 argmin() 求最小值索引 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.array([[30,40,70],[80,20,10],[50,90,60]]) </span><br><span class="line">#a数组</span><br><span class="line">print (a)</span><br><span class="line">#argmax() 函数</span><br><span class="line">print (np.argmax(a))</span><br><span class="line">#将数组以一维展开</span><br><span class="line">print (a.flatten())</span><br><span class="line">#沿轴 0 的最大值索引：</span><br><span class="line">maxindex = np.argmax(a, axis =  0) </span><br><span class="line">print (maxindex)</span><br><span class="line">#沿轴 1 的最大值索引</span><br><span class="line">maxindex = np.argmax(a, axis =  1) </span><br><span class="line">print (maxindex) </span><br></pre></td></tr></table></figure><p>numpy.argmin()</p><p>argmin() 求最小值索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">b= np.array([[3,4,7],[8,2,1],[5,9,6]]) </span><br><span class="line">print  (&#x27;数组b：&#x27;)</span><br><span class="line">print (b) </span><br><span class="line">#调用 argmin()函数</span><br><span class="line">minindex = np.argmin(b) </span><br><span class="line">print (minindex)</span><br><span class="line">#展开数组中的最小值：</span><br><span class="line">print (b.flatten()[minindex])</span><br><span class="line">#沿轴 0 的最小值索引：</span><br><span class="line">minindex = np.argmin(b, axis =  0) </span><br><span class="line">print (minindex)</span><br><span class="line">#沿轴 1 的最小值索引：</span><br><span class="line">minindex = np.argmin(b, axis =  1) </span><br><span class="line">print (minindex)</span><br></pre></td></tr></table></figure><h4 id="NumPy副本和视图"><a href="#NumPy副本和视图" class="headerlink" title="NumPy副本和视图"></a>NumPy副本和视图</h4><p>对 NumPy 数组执行些函数操作时，其中一部分函数会返回数组的副本，而另一部分函数则返回数组的视图。本节对数组的副本和视图做重点讲解。</p><p>其实从内存角度来说，副本就是对原数组进行深拷贝，新产生的副本与原数组具有不同的存储位置。而视图可理解为对数组的引用，它和原数组有着相同的内存位置。</p><p>赋值操作</p><p>赋值操作是数组引用的一种方法。比如，将 a 数组赋值给变量 b，被赋值后的变量 b 与 a 组具有相同的内存 id。因此，无论操作 a、b 中哪个数组，另一个数组也会受到影响。例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np </span><br><span class="line">a = np.array([[1,2,3,4],[9,0,2,3],[1,2,3,19]]) </span><br><span class="line">print(&quot;原数组&quot;,a) </span><br><span class="line">print(&quot;a数组的ID:&quot;,id(a)) </span><br><span class="line">b = a</span><br><span class="line">print(&quot;数组b的id:&quot;,id(b)) </span><br><span class="line">b.shape = 4,3; </span><br><span class="line">print(&quot;b数组形状的更改也会反映到a数组上:&quot;) </span><br><span class="line">print(a)  </span><br></pre></td></tr></table></figure><p>ndarray.view()</p><p>ndarray.view() 返回一个新生成的数组副本，因此对该数组的操作，不会影响到原数组。下面看一组示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np </span><br><span class="line">a = np.array([[1,2,3,4],[9,0,2,3],[1,2,3,19]]) </span><br><span class="line">print(&quot;原数组&quot;,a) </span><br><span class="line">print(&quot;数组a的ID:&quot;,id(a)) </span><br><span class="line">b = a.view() </span><br><span class="line">print(&quot;数组b的ID:&quot;,id(b)) </span><br><span class="line">#打印b数组</span><br><span class="line">print(b) </span><br><span class="line">#改变b数组形状</span><br><span class="line">b.shape = 4,3</span><br><span class="line">print(&quot;原数组a&quot;,a) </span><br><span class="line">print(&quot;新数组b&quot;,b) </span><br></pre></td></tr></table></figure><p>切片创建视图</p><p>使用切片可以创建视图数组，若要修改视图的就会影响到原数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">arr = np.arange(10)</span><br><span class="line">print (&#x27;数组arr：&#x27;)</span><br><span class="line">print (arr)</span><br><span class="line">#创建切片修改原数组arr</span><br><span class="line">a=arr[3:]</span><br><span class="line">b=arr[3:]</span><br><span class="line">a[1]=123</span><br><span class="line">b[2]=234</span><br><span class="line">print(arr)</span><br></pre></td></tr></table></figure><p>ndarray.copy()</p><p>该方法返回原数组的副本，对副本的修改不会影响到原数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np </span><br><span class="line">a = np.array([[1,2,3,4],[9,0,2,3],[1,2,3,19]]) </span><br><span class="line">print(&quot;原数组&quot;,a) </span><br><span class="line">print(&quot;a数组ID:&quot;,id(a)) </span><br><span class="line">b = a.copy() </span><br><span class="line">print(&quot;b数组ID:&quot;,id(b)) </span><br><span class="line">print(&quot;打印经过copy方法的b数组：&quot;) </span><br><span class="line">print(b) </span><br><span class="line">b.shape=4,3</span><br><span class="line">print(&quot;原数组&quot;,a) </span><br><span class="line">print(&quot;经过copy方法的b数组&quot;,b) </span><br></pre></td></tr></table></figure><h4 id="NumPy字节交换"><a href="#NumPy字节交换" class="headerlink" title="NumPy字节交换"></a>NumPy字节交换</h4><p>数据以字节的形式存储在计算机内存中，而存储规则可分为两类，即小端字节序与大端字节序。</p><p>小端字节序（little-endian），表示低位字节排放在内存的低地址端，高位字节排放在高地址段，它与大端字节序（big-endian）恰好相反。</p><p>对于二进制数 0x12345678，假设从地址 0x4000 开始存放，在大端和小端模式下，它们的字节排列顺序</p><img src="/post/52aeed5f/348.png" class title="This is an image"><p>numpy.ndarray.byteswap()</p><p>该函数将数组中每个元素的字节顺序进行大小端调换 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.array([1, 256, 8755], dtype = np.int16)</span><br><span class="line">#数组a</span><br><span class="line">print(a) </span><br><span class="line">#以16进制形式表示内存中的数据</span><br><span class="line">print(map(hex,a)) </span><br><span class="line">#byteswap()函数通过传递True参数在适当的位置进行转换</span><br><span class="line">#调用byteswap()函数</span><br><span class="line">print(a.byteswap(True))</span><br><span class="line">#十六进制形式</span><br><span class="line">print(map(hex,a))</span><br></pre></td></tr></table></figure><h4 id="NumPy-Matrix矩阵库"><a href="#NumPy-Matrix矩阵库" class="headerlink" title="NumPy Matrix矩阵库"></a>NumPy Matrix矩阵库</h4><p>NumPy 提供了一个 矩阵库模块numpy.matlib，该模块中的函数返回的是一个 matrix 对象，而非 ndarray 对象。矩阵由 m 行 n 列（m*n）元素排列而成，矩阵中的元素可以是数字、符号或数学公式等。</p><p>matlib.empty()</p><p>matlib.empty() 返回一个空矩阵，所以它的创建速度非常快。<br>numpy.matlib.empty(shape, dtype, order)</p><p>shape：以元组的形式指定矩阵的形状<br>dtype：表示矩阵的数据类型<br>order：有两种选择，C（行序优先） 或者 F（列序优先）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import numpy.matlib</span><br><span class="line">import numpy as np</span><br><span class="line">#矩阵中会填充无意义的随机值</span><br><span class="line">print(np.matlib.empty((2,2)))</span><br></pre></td></tr></table></figure><p>numpy.matlib.zeros()</p><p>numpy.matlib.zeros() 创建一个以 0 填充的矩阵</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import numpy.matlib</span><br><span class="line">import numpy as np</span><br><span class="line">print(np.matlib.zeros((2,2))) </span><br></pre></td></tr></table></figure><p>numpy.matlib.ones()<br>numpy.matlib.ones() 创建一个以 1 填充的矩阵。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import numpy.matlib</span><br><span class="line">import numpy as np</span><br><span class="line">print(np.matlib.ones((2,2)))</span><br></pre></td></tr></table></figure><p>numpy.matlib.eye()<br>numpy.matlib.eye() 返回一个对角线元素为 1，而其他元素为 0 的矩阵 。numpy.matlib.eye(n,M,k, dtype)</p><p>n：返回矩阵的行数；<br>M：返回矩阵的列数，默认为 n；<br>k：对角线的索引；<br>dtype：矩阵中元素数据类型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import numpy.matlib</span><br><span class="line">import numpy as np</span><br><span class="line">print (np.matlib.eye(n =  3, M =  4, k =  0, dtype =  float))</span><br></pre></td></tr></table></figure><p>numpy.matlib.identity()</p><p>该函数返回一个给定大小的单位矩阵，矩阵的对角线元素为 1，而其他元素均为 0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import numpy.matlib</span><br><span class="line">import numpy as np</span><br><span class="line">print np.matlib.identity(5, dtype = float)</span><br></pre></td></tr></table></figure><p>numpy.matlib.rand()<br>创建一个以随机数填充，并给定维度的矩阵</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import numpy.matlib</span><br><span class="line">import numpy as np</span><br><span class="line">print (np.matlib.rand(3,3))</span><br></pre></td></tr></table></figure><p>这里需要注意，因为 matrix 只能表示二维数据，而 ndarray 也可以是二维数组，所以两者可以互相转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#创建矩阵i</span><br><span class="line">import numpy.matlib</span><br><span class="line">import numpy as np </span><br><span class="line">i = np.matrix(&#x27;1,2;3,4&#x27;) </span><br><span class="line">print (i)</span><br></pre></td></tr></table></figure><p>实现 matrix 与 ndarray 之间的转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import numpy.matlib</span><br><span class="line">import numpy as np </span><br><span class="line">j = np.asarray(i) </span><br><span class="line">print (j)</span><br><span class="line">k = np.asmatrix (j)</span><br><span class="line">print (k)</span><br></pre></td></tr></table></figure><h4 id="NumPy线性代数"><a href="#NumPy线性代数" class="headerlink" title="NumPy线性代数"></a>NumPy线性代数</h4><p>NumPy 提供了 numpy.linalg 模块，该模块中包含了一些常用的线性代数计算方法</p><p>dot<br>两个数组的点积。</p><p>vdot<br>两个向量的点积。</p><p>inner<br>两个数组的内积。</p><p>matmul<br>两个数组的矩阵积。</p><p>det<br>计算输入矩阵的行列式。</p><p>solve<br>求解线性矩阵方程。</p><p>inv<br>计算矩阵的逆矩阵，逆矩阵与原始矩阵相乘，会得到单位矩阵。</p><p>numpy.dot()<br>按照矩阵的乘法规则，计算两个矩阵的点积运算结果。当输入一维数组时返回一个结果值，若输入的多维数组则同样返回一个多维数组结果。输入一维数组，示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">A=[1,2,3]</span><br><span class="line">B=[4,5,6]</span><br><span class="line">print(np.dot(A,B))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np </span><br><span class="line">a = np.array([[100,200],</span><br><span class="line">             [23,12]]) </span><br><span class="line">b = np.array([[10,20],</span><br><span class="line">            [12,21]]) </span><br><span class="line">dot = np.dot(a,b) </span><br><span class="line">print(dot) </span><br></pre></td></tr></table></figure><p>点积运算就是将 a 数组的每一行元素与 b 数组的每一列元素相乘再相加。</p><p>numpy.vdot()</p><p>该函数用于计算两个向量的点积结果，与 dot() 函数不同。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np </span><br><span class="line">a = np.array([[100,200],[23,12]]) </span><br><span class="line">b = np.array([[10,20],[12,21]]) </span><br><span class="line">vdot = np.vdot(a,b) </span><br><span class="line">print(vdot)  </span><br></pre></td></tr></table></figure><p>numpy.inner()</p><p>inner() 方法用于计算数组之间的内积。当计算的数组是一维数组时，它与 dot() 函数相同，若输入的是多维数组则两者存在不同，下面看一下具体的实例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">A=[[1 ,10],</span><br><span class="line">    [100,1000]]</span><br><span class="line">B=[[1,2],</span><br><span class="line">    [3,4]]</span><br><span class="line">#inner函数</span><br><span class="line">print(np.inner(A,B))</span><br><span class="line">#dot函数</span><br><span class="line">print(np.dot(A,B))</span><br></pre></td></tr></table></figure><p>inner() 函数的计算过程是 A 数组的每一行与 B 数组的每一行相乘再相加，如下所示：<br>[[1<em>1+2</em>10  1<em>3+10</em>4 ]<br>[100<em>1+1000</em>2  100<em>3+1000</em>4]]dot() 则表示是 A 数组每一行与 B 数组的每一列相乘。</p><p>numpy.matmul()</p><p>该函数返回两个矩阵的乘积，假如两个矩阵的维度不一致，就会产生错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np </span><br><span class="line">a = np.array([[1,2,3],[4,5,6],[7,8,9]]) </span><br><span class="line">b = np.array([[23,23,12],[2,1,2],[7,8,9]]) </span><br><span class="line">mul = np.matmul(a,b) </span><br><span class="line">print(mul)  </span><br></pre></td></tr></table></figure><p>numpy.linalg.det()</p><p>该函数使用对角线元素来计算矩阵的行列式，计算 2*2（两行两列） 的行列式，示例如下：</p><p>[[1,2],<br> [3,4]]</p><p>通过对角线元素求行列式的结果（口诀：“一撇一捺”计算法）：</p><p>1<em>4-2</em>3&#x3D;-2</p><p>我们可以使用 numpy.linalg.det() 函数来完成计算。示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np </span><br><span class="line">a = np.array([[1,2],[3,4]]) </span><br><span class="line">print(np.linalg.det(a))  </span><br></pre></td></tr></table></figure><p>numpy.linalg.solve()</p><p>该函数用于求解线性矩阵方程组，并以矩阵的形式表示线性方程的解，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3X  +  2 Y + Z =  10  </span><br><span class="line">X + Y + Z = 6</span><br><span class="line">X + 2Y - Z = 2</span><br></pre></td></tr></table></figure><p>首先将上述方程式转换为矩阵的表达形式：</p><p>方程系数矩阵：<br>3   2   1<br>1   1   1<br>1   2  -1<br>方程变量矩阵:<br>X<br>Y<br>Z<br>方程结果矩阵：<br>10<br>6<br>2</p><p>如果用  m 、x、n 分别代表上述三个矩阵，其表示结果如下：m*x&#x3D;n 或 x&#x3D;n&#x2F;m</p><p>将系数矩阵与结果矩阵传递给 numpy.solve() 函数，即可求出线程方程的解，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">m = np.array([[3,2,1],[1,1,1],[1,2,-1]])</span><br><span class="line">print (&#x27;数组 m：&#x27;)</span><br><span class="line">print (m)</span><br><span class="line">print (&#x27;矩阵 n：&#x27;)</span><br><span class="line">n = np.array([[10],[6],[2]])</span><br><span class="line">print (n)</span><br><span class="line">print (&#x27;计算：m^(-1)n：&#x27;)</span><br><span class="line">x = np.linalg.solve(m,n)</span><br><span class="line">print (x)</span><br></pre></td></tr></table></figure><p>numpy.linalg.inv()</p><p>该函数用于计算矩阵的逆矩阵，逆矩阵与原矩阵相乘得到单位矩阵。示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np </span><br><span class="line">a = np.array([[1,2],[3,4]]) </span><br><span class="line">print(&quot;原数组:&quot;,a) </span><br><span class="line">b = np.linalg.inv(a) </span><br><span class="line">print(&quot;求逆:&quot;,b)  </span><br></pre></td></tr></table></figure><h4 id="NumPy矩阵乘法"><a href="#NumPy矩阵乘法" class="headerlink" title="NumPy矩阵乘法"></a>NumPy矩阵乘法</h4><p>矩阵乘法是将两个矩阵作为输入值，并将 A 矩阵的行与 B 矩阵的列对应位置相乘再相加，从而生成一个新矩阵，如下图所示：<br>注意：必须确保第一个矩阵中的行数等于第二个矩阵中的列数，否则不能进行矩阵乘法运算。</p><p>矩阵乘法运算被称为向量化操作，向量化的主要目的是减少使用的 for 循环次数或者根本不使用。这样做的目的是为了加速程序的计算。下面介绍 NumPy 提供的三种矩阵乘法，从而进一步加深对矩阵乘法的理解。</p><p>逐元素矩阵乘法<br>multiple() 函数用于两个矩阵的逐元素乘法，示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np </span><br><span class="line">array1=np.array([[1,2,3],[4,5,6],[7,8,9]],ndmin=3) </span><br><span class="line">array2=np.array([[9,8,7],[6,5,4],[3,2,1]],ndmin=3) </span><br><span class="line">result=np.multiply(array1,array2) </span><br><span class="line">result  </span><br></pre></td></tr></table></figure><p>矩阵乘积运算</p><p>matmul() 用于计算两个数组的矩阵乘积。示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np </span><br><span class="line">array1=np.array([[1,2,3],[4,5,6],[7,8,9]],ndmin=3) </span><br><span class="line">array2=np.array([[9,8,7],[6,5,4],[3,2,1]],ndmin=3) </span><br><span class="line">result=np.matmul(array1,array2) </span><br><span class="line">print(result) </span><br></pre></td></tr></table></figure><p>矩阵点积</p><p>dot() 函数用于计算两个矩阵的点积。如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np </span><br><span class="line">array1=np.array([[1,2,3],[4,5,6],[7,8,9]],ndmin=3) </span><br><span class="line">array2=np.array([[9,8,7],[6,5,4],[3,2,1]],ndmin=3) </span><br><span class="line">result=np.dot(array1,array2) </span><br><span class="line">print(result)  </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> numpy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析三剑客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numpy（五）</title>
      <link href="/post/37a0a686.html"/>
      <url>/post/37a0a686.html</url>
      
        <content type="html"><![CDATA[<h4 id="NumPy数学函数"><a href="#NumPy数学函数" class="headerlink" title="NumPy数学函数"></a>NumPy数学函数</h4><p>NumPy 中包含了大量的数学函数，它们用于执行各种数学运算，其中包括三角函数、舍入函数等等</p><h5 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h5><p>NumPy 中提供了用于弧度计算的的 sin()（正弦）、cos()（余弦）和 tan()（正切）三角函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np </span><br><span class="line">arr = np.array([0, 30, 60, 90, 120, 150, 180]) </span><br><span class="line">#计算arr数组中给定角度的三角函数值</span><br><span class="line">#通过乘以np.pi/180将其转换为弧度</span><br><span class="line">print(np.sin(arr * np.pi/180)) </span><br><span class="line">print(np.cos(arr * np.pi/180)) </span><br><span class="line">print(np.tan(arr * np.pi/180))  </span><br></pre></td></tr></table></figure><h5 id="反三角函数"><a href="#反三角函数" class="headerlink" title="反三角函数"></a>反三角函数</h5><p>除了上述三角函数以外，NumPy 还提供了 arcsin，arcos 和 arctan 反三角函数。若要想验证反三角函数的结果，可以通过 numpy.degrees() 将弧度转换为角度来实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np </span><br><span class="line">arr = np.array([0, 30, 60, 90]) </span><br><span class="line">#正弦值数组</span><br><span class="line">sinval = np.sin(arr*np.pi/180) </span><br><span class="line">print(sinval) </span><br><span class="line">#计算角度反正弦，返回值以弧度为单位</span><br><span class="line">cosec = np.arcsin(sinval) </span><br><span class="line">print(cosec) </span><br><span class="line">#通过degrees函数转化为角度进行验证</span><br><span class="line">print(np.degrees(cosec)) </span><br><span class="line">#余弦值数组</span><br><span class="line">cosval = np.cos(arr*np.pi/180) </span><br><span class="line">print(cosval) </span><br><span class="line">#计算反余弦值，以弧度为单位</span><br><span class="line">sec = np.arccos(cosval) </span><br><span class="line">print(sec) </span><br><span class="line">#通过degrees函数转化为角度进行验证</span><br><span class="line">print(np.degrees(sec)) </span><br><span class="line">#下面是tan()正切函数 </span><br><span class="line">tanval = np.tan(arr*np.pi/180) </span><br><span class="line">print(tanval) </span><br><span class="line">cot = np.arctan(tanval) </span><br><span class="line">print(cot) </span><br><span class="line">print(np.degrees(cot))  </span><br></pre></td></tr></table></figure><h5 id="舍入函数"><a href="#舍入函数" class="headerlink" title="舍入函数"></a>舍入函数</h5><p>NumPy 提供了三个舍入函数</p><ol><li>numpy.around()<br>该函数返回一个十进制值数，并将数值四舍五入到指定的小数位上</li></ol><p>numpy.around(a,decimals)</p><p>a：代表要输入的数组<br>decimals：要舍入到的小数位数。它的默认值为0，如果为负数，则小数点将移到整数左侧</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np </span><br><span class="line">arr = np.array([12.202, 90.23120, 123.020, 23.202]) </span><br><span class="line">print(arr) </span><br><span class="line">print(&quot;数组值四舍五入到小数点后两位&quot;,np.around(arr, 2)) </span><br><span class="line">print(&quot;数组值四舍五入到小数点后-1位&quot;,np.around(arr, -1))  </span><br></pre></td></tr></table></figure><ol start="2"><li>numpy.floor()<br>该函数表示对数组中的每个元素向下取整数，即返回不大于数组中每个元素值的最大整数</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.array([-1.8,  1.1,  -0.4,  0.9,  18])</span><br><span class="line">#对数组a向下取整</span><br><span class="line">print (np.floor(a))</span><br></pre></td></tr></table></figure><ol start="3"><li>numpy.ceil()<br>该函数与 floor 函数相反，表示向上取整<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.array([-1.8,  1.1,  -0.4,  0.9,  18])</span><br><span class="line">#对数组a向上取整</span><br><span class="line">print (np.ceil(a))</span><br></pre></td></tr></table></figure></li></ol><h4 id="NumPy算术运算"><a href="#NumPy算术运算" class="headerlink" title="NumPy算术运算"></a>NumPy算术运算</h4><p>NumPy 数组的“加减乘除”算术运算，分别对应 add()、subtract()、multiple() 以及 divide() 函数。</p><p><strong>注意：</strong>做算术运算时，输入数组必须具有相同的形状，或者符合数组的广播规则，才可以执行运算。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.arange(9, dtype = np.float_).reshape(3,3)</span><br><span class="line">#数组a</span><br><span class="line">print(a)</span><br><span class="line">#数组b</span><br><span class="line">b = np.array([10,10,10])</span><br><span class="line">print(b)</span><br><span class="line">#数组加法运算</span><br><span class="line">print(np.add(a,b))</span><br><span class="line">#数组减法运算</span><br><span class="line">print(np.subtract(a,b))</span><br><span class="line">#数组乘法运算</span><br><span class="line">print(np.multiply(a,b))</span><br><span class="line">#数组除法运算</span><br><span class="line">print(np.divide(a,b))</span><br></pre></td></tr></table></figure><p>numpy.reciprocal()</p><p>该函数对数组中的每个元素取倒数，并以数组的形式将它们返回。</p><p>当数组元素的数据类型为整型（int）时，对于绝对值小于 1 的元素，返回值为 0，而当数组中包含 0 元素时，返回值将出现 overflow（inf） 溢出提示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">#注意此处有0</span><br><span class="line">a = np.array([0.25, 1.33, 1, 0, 100])</span><br><span class="line">#数组a默认为浮点类型数据</span><br><span class="line">print(a)</span><br><span class="line">#对数组a使用求倒数操作</span><br><span class="line">print (np.reciprocal(a))</span><br><span class="line">#b数组的数据类型为整形int</span><br><span class="line">b = np.array([100], dtype = int)</span><br><span class="line">print(b)</span><br><span class="line">#对数组b使用求倒数操作</span><br><span class="line">print( np.reciprocal(b) )</span><br></pre></td></tr></table></figure><p>numpy.power(a,b)</p><p>该函数将 a 数组中的元素作为底数，把 b 数组中与 a 相对应的元素作幂 ，最后以数组形式返回两者的计算结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.array([10,100,1000])</span><br><span class="line">#a数组</span><br><span class="line">print (&#x27;我们的数组是；&#x27;)</span><br><span class="line">#调用 power 函数</span><br><span class="line">print (np.power(a,2))</span><br><span class="line"># b数组</span><br><span class="line">b = np.array([1,2,3])</span><br><span class="line">print (b)</span><br><span class="line"># 调用 power 函数</span><br><span class="line">print (np.power(a,b))</span><br></pre></td></tr></table></figure><p>numpy.mod()</p><p>返回两个数组相对应位置上元素相除后的余数，它与 numpy.remainder() 的作用相同 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.array([11,22,33])</span><br><span class="line">b = np.array([3,5,7])</span><br><span class="line">#a与b相应位置的元素做除法</span><br><span class="line">print( np.mod(a,b))</span><br><span class="line">#remainder方法一样</span><br><span class="line">print(np.remainder(a,b)) </span><br></pre></td></tr></table></figure><h5 id="复数数组处理函数"><a href="#复数数组处理函数" class="headerlink" title="复数数组处理函数"></a>复数数组处理函数</h5><p>NumPy 提供了诸多处理复数类型数组的函数，主要有以下几个：</p><p>numpy.real()<br>返回复数数组的实部；</p><p>numpy.imag()<br>返回复数数组的虚部；</p><p>numpy.conj()<br>通过更改虚部的符号，从而返回共轭复数；</p><p>numpy.angle()<br>返回复数参数的角度，该函数的提供了一个 deg 参数，如果  deg&#x3D;True，则返回的值会以角度制来表示，否则以以弧度制来表示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.array([-5.6j, 0.2j, 11. , 1+1j])</span><br><span class="line">print(a)</span><br><span class="line">#real() </span><br><span class="line">print np.real(a)</span><br><span class="line">#imag() </span><br><span class="line">print np.imag(a)</span><br><span class="line">#conj()</span><br><span class="line">print np.conj(a)</span><br><span class="line">#angle() </span><br><span class="line">print np.angle(a)</span><br><span class="line">#angle() 带参数deg</span><br><span class="line">print np.angle(a, deg = True)</span><br></pre></td></tr></table></figure><h4 id="NumPy统计函数"><a href="#NumPy统计函数" class="headerlink" title="NumPy统计函数"></a>NumPy统计函数</h4><p>NumPy 提供了许多统计功能的函数，比如查找数组元素的最值、百分位数、方差以及标准差等。</p><p>numpy.amin() 和 numpy.amax()</p><p>这两个函数用于计算数组沿指定轴的最小值与最大值：<br>amin() 沿指定的轴，查找数组中元素的最小值，并以数组形式返回；<br>amax() 沿指定的轴，查找数组中元素的最大值，并以数组形式返回。</p><p>对于二维数组来说，axis&#x3D;1 表示沿着水平方向，axis&#x3D;0 表示沿着垂直方向。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.array([[3,7,5],[8,4,3],[2,4,9]]) </span><br><span class="line">print (&#x27;数组a是：&#x27;)</span><br><span class="line">print(a)</span><br><span class="line">#amin()函数</span><br><span class="line">print (np.amin(a))</span><br><span class="line">#调用 amin() 函数，axis=1</span><br><span class="line">print(np.amin(a,1))</span><br><span class="line">#调用amax()函数</span><br><span class="line">print(np.amax(a))</span><br><span class="line">#再次调用amax()函数</span><br><span class="line">print(np.amax(a,axis=0))</span><br></pre></td></tr></table></figure><p>numpy.ptp()</p><p>numpy.ptp() 用于计算数组元素中最值之差值，也就是（最大值 - 最小值）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np </span><br><span class="line">a = np.array([[2,10,20],[80,43,31],[22,43,10]]) </span><br><span class="line">print(&quot;原数组&quot;,a) </span><br><span class="line">print(&quot;沿着axis 1:&quot;,np.ptp(a,1)) </span><br><span class="line">print(&quot;沿着axis 0:&quot;,np.ptp(a,0)) </span><br></pre></td></tr></table></figure><p>numpy.percentile()</p><p>百分位数，是统计学中使用的一种度量单位。该函数表示沿指定轴，计算数组中任意百分比分位数</p><p>语法格式：<br>numpy.percentile(a, q, axis)</p><p>a：输入数组<br>q：要计算的百分位数，在 0~100 之间<br>axis：沿着指定的轴计算百分位数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np </span><br><span class="line">a = np.array([[2,10,20],[80,43,31],[22,43,10]]) </span><br><span class="line">print(&quot;数组a:&quot;,a) </span><br><span class="line">print(&quot;沿着axis=0计算百分位数&quot;,np.percentile(a,10,0)) </span><br><span class="line">print(&quot;沿着axis=1计算百分位数&quot;,np.percentile(a,10,1))</span><br></pre></td></tr></table></figure><p>numpy.median()</p><p>numpy.median() 用于计算 a 数组元素的中位数（中值）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.array([[30,65,70],[80,95,10],[50,90,60]])</span><br><span class="line">#数组a:</span><br><span class="line">print(a)</span><br><span class="line">#median()</span><br><span class="line">print np.median(a)</span><br><span class="line">#axis 0</span><br><span class="line">print np.median(a, axis = 0)</span><br><span class="line">#axis 1:</span><br><span class="line">print(np.median(a, axis = 1))</span><br></pre></td></tr></table></figure><p>numpy.mean()</p><p>该函数表示沿指定的轴，计算数组中元素的算术平均值（即元素之总和除以元素数量）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.array([[1,2,3],[3,4,5],[4,5,6]]) </span><br><span class="line">print (&#x27;我们的数组是：&#x27;)</span><br><span class="line">print (a)</span><br><span class="line"></span><br><span class="line">print (&#x27;调用 mean() 函数：&#x27;)</span><br><span class="line">print (np.mean(a))</span><br><span class="line"></span><br><span class="line">print (&#x27;沿轴 0 调用 mean() 函数：&#x27;)</span><br><span class="line">print (np.mean(a, axis =  0))</span><br><span class="line"></span><br><span class="line">print (&#x27;沿轴 1 调用 mean() 函数：&#x27;)</span><br><span class="line">print (np.mean(a, axis =  1))</span><br></pre></td></tr></table></figure><p>numpy.average()</p><p>加权平均值是将数组中各数值乘以相应的权数，然后再对权重值求总和，最后以权重的总和除以总的单位数（即因子个数）。numpy.average() 根据在数组中给出的权重，计算数组元素的加权平均值。该函数可以接受一个轴参数 axis，如果未指定，则数组被展开为一维数组。</p><p>示例：<br>现有数组 [1,2,3,4] 和相应的权重数组 [4,3,2,1]，它的加权平均值计算如下：加权平均值&#x3D;（1 * 4 + 2 * 3 + 3 * 2 + 4 * 1）&#x2F;（4 + 3 + 2 + 1）</p><p>使用 average() 计算加权平均值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.array([1,2,3,4]) </span><br><span class="line">print(&#x27;a数组是：&#x27;)</span><br><span class="line">print(a)</span><br><span class="line">#average()函数：</span><br><span class="line">print (np.average(a))</span><br><span class="line"># 若不指定权重相当于对数组求均值</span><br><span class="line">we = np.array([4,3,2,1]) </span><br><span class="line">#调用 average() 函数：&#x27;)</span><br><span class="line">print(np.average(a,weights = we))</span><br><span class="line">#returned 为Ture，则返回权重的和 </span><br><span class="line">prin(np.average([1,2,3,4],weights =  [4,3,2,1], returned =  True))</span><br></pre></td></tr></table></figure><p>在多维数组中，您也可以指定 axis 轴参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.arange(6).reshape(3,2) </span><br><span class="line">#多维数组a</span><br><span class="line">print (a)</span><br><span class="line">#修改后数组</span><br><span class="line">wt = np.array([3,5]) </span><br><span class="line">print (np.average(a, axis = 1, weights = wt))</span><br><span class="line">#修改后数组</span><br><span class="line">print (np.average(a, axis = 1, weights = wt, returned =  True))</span><br></pre></td></tr></table></figure><p>方差np.var() </p><p>方差，在统计学中也称样本方差，如何求得方差呢？首先我们要知道全体样本的的平均值，然后再求得每个样本值与均值之差的平方和，最后对差的平方和求均值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">print (np.var([1,2,3,4]))</span><br></pre></td></tr></table></figure><p>标准差np.std()</p><p>标准差是方差的算术平方根，用来描述一组数据平均值的分散程度。若一组数据的标准差较大，说明大部分的数值和其平均值之间差异较大；若标准差较小，则代表这组数值比较接近平均值。它的公式如下：</p><p>std &#x3D; sqrt(mean((x - x.mean())**2</p><p>NumPy 中使用 np.std() 计算标准差。示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">print (np.std([1,2,3,4]))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> numpy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析三剑客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numpy（四）</title>
      <link href="/post/583e63c1.html"/>
      <url>/post/583e63c1.html</url>
      
        <content type="html"><![CDATA[<h4 id="NumPy数组元素增删改查"><a href="#NumPy数组元素增删改查" class="headerlink" title="NumPy数组元素增删改查"></a>NumPy数组元素增删改查</h4><p>NumPy 数组元素的增删改查主要有以下方法：</p><p>resize<br>返回指定形状的新数组。</p><p>append<br>将元素值添加到数组的末尾。</p><p>insert<br>沿规定的轴将元素值插入到指定的元素前。</p><p>delete<br>删掉某个轴上的子数组，并返回删除后的新数组。</p><p>argwhere<br>返回数组内符合条件的元素的索引值。</p><p>unique<br>用于删除数组中重复的元素，并按元素值<strong>由大到小</strong>返回一个新数组。</p><ol><li>numpy.resize()</li></ol><p>numpy.resize() 返回指定形状的新数组</p><p>numpy.resize(arr, shape)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.array([[1,2,3],[4,5,6]])</span><br><span class="line">print(a)</span><br><span class="line">#a数组的形状</span><br><span class="line">print(a.shape)</span><br><span class="line">b = np.resize(a,(3,2))</span><br><span class="line">#b数组</span><br><span class="line">print (b)</span><br><span class="line">#b数组的形状</span><br><span class="line">print(b.shape)</span><br><span class="line">#修改b数组使其形状大于原始数组，会在那些比原来多的位置上重复前面的元素</span><br><span class="line">b = np.resize(a,(3,3))</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><p>这里需要区别 resize() 和 reshape() 的使用方法，它们看起来相似，实则不同。resize 仅对原数组进行修改，没有返回值，而 reshape 不仅对原数组进行修改，同时返回修改后的结果。</p><ol start="2"><li>numpy.append()</li></ol><p>在数组的末尾添加值，它返回一个一维数组。</p><p>numpy.append(arr, values, axis&#x3D;None)</p><p>arr：输入的数组；</p><p>values：向 arr 数组中添加的值，需要和 arr 数组的形状保持一致；</p><p>axis：默认为 None，返回的是一维数组；当 axis &#x3D;0 时，追加的值会被添加到行，而列数保持不变，若 axis&#x3D;1 则与其恰好相反。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.array([[1,2,3],[4,5,6]])</span><br><span class="line">#向数组a添加元素</span><br><span class="line">print (np.append(a, [7,8,9]))</span><br><span class="line"></span><br><span class="line">#沿轴 0 添加元素</span><br><span class="line">print (np.append(a, [[7,8,9]],axis = 0))</span><br><span class="line">#沿轴 1 添加元素</span><br><span class="line">print (np.append(a, [[5,5,5],[7,8,9]],axis = 1))</span><br></pre></td></tr></table></figure><ol start="3"><li>numpy.insert()</li></ol><p>表示沿指定的轴，在给定索引值的前一个位置插入相应的值，如果没有提供轴，则输入数组被展开为一维数组。numpy.insert(arr, obj, values, axis)</p><p>arr：要输入的数组<br>obj：表示索引值，在该索引值之前插入<br>values 值；values：要插入的值<br>axis：指定的轴，如果未提供，则输入数组会被展开为一维数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.array([[1,2],[3,4],[5,6]])</span><br><span class="line"></span><br><span class="line">#不提供axis的情况，会将数组展开</span><br><span class="line">print (np.insert(a,3,[11,12]))</span><br><span class="line"></span><br><span class="line">#沿轴 0 水平方向</span><br><span class="line">print (np.insert(a,1,[11],axis = 0))</span><br><span class="line"></span><br><span class="line">#沿轴 1 垂直方向</span><br><span class="line">print (np.insert(a,1,11,axis = 1))</span><br></pre></td></tr></table></figure><ol start="4"><li>numpy.delete()</li></ol><p>该方法表示从输入数组中删除指定的子数组，并返回一个新数组。它与 insert() 函数相似，若不提供 axis 参数，则输入数组被展开为一维数组。</p><p>numpy.delete(arr, obj, axis)</p><p>arr：要输入的数组<br>obj：整数或者整数数组，表示要被删除数组元素或者子数组<br>axis：沿着哪条轴删除子数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.arange(12).reshape(3,4)</span><br><span class="line">#a数组</span><br><span class="line">print(a)</span><br><span class="line">#不提供axis参数情况</span><br><span class="line">print(np.delete(a,5))</span><br><span class="line"></span><br><span class="line">#删除第二列</span><br><span class="line">print(np.delete(a,1,axis = 1))</span><br><span class="line"></span><br><span class="line">#删除经切片后的数组</span><br><span class="line">a = np.array([1,2,3,4,5,6,7,8,9,10])</span><br><span class="line">print (np.delete(a, np.s_[::2]))</span><br></pre></td></tr></table></figure><ol start="5"><li>numpy.argwhere()</li></ol><p>该函数返回数组中非 0 元素的索引，若是多维数组则返回行、列索引组成的索引坐标。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">x = np.arange(6).reshape(2,3)</span><br><span class="line">print(x)</span><br><span class="line">#返回所有大于1的元素索引组成的数组</span><br><span class="line">y=np.argwhere(x&gt;1)</span><br><span class="line">print(y)</span><br></pre></td></tr></table></figure><ol start="6"><li>numpy.unique()</li></ol><p>用于删除数组中重复的元素</p><p>语法格式：numpy.unique(arr, return_index, return_inverse, return_counts)</p><p>arr：输入数组，若是多维数组则以一维数组形式展开；</p><p>return_index：如果为 True，则返回新数组元素在原数组中的位置（索引）；</p><p>return_inverse：如果为 True，则返回原数组元素在新数组中的位置（索引）；</p><p>return_counts：如果为 True，则返回去重后的数组元素在原数组中出现的次数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.array([5,2,6,2,7,5,6,8,2,9])</span><br><span class="line">print (a)</span><br><span class="line">#对a数组的去重</span><br><span class="line">uq = np.unique(a)</span><br><span class="line">print (uq)</span><br><span class="line"></span><br><span class="line">#数组去重后的索引数组</span><br><span class="line">u,indices = np.unique(a, return_index = True)</span><br><span class="line">#打印去重后数组的索引</span><br><span class="line">print(indices)</span><br><span class="line"></span><br><span class="line">#去重数组的下标：</span><br><span class="line">ui,indices = np.unique(a,return_inverse = True)</span><br><span class="line">print (ui)</span><br><span class="line">#打印下标</span><br><span class="line">print (indices)</span><br><span class="line"></span><br><span class="line">#返回去重元素的重复数量</span><br><span class="line">uc,indices = np.unique(a,return_counts = True)</span><br><span class="line">print (uc)</span><br><span class="line">元素出现次数：</span><br><span class="line">print (indices)</span><br></pre></td></tr></table></figure><h4 id="NumPy位运算"><a href="#NumPy位运算" class="headerlink" title="NumPy位运算"></a>NumPy位运算</h4><p>NumPy 中提供了以下按位运算函数：</p><img src="/post/583e63c1/342.png" class title="This is an image"><p>bitwise_and()<br>该函数对数组中整数的二进制数进行“按位与”运算</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np </span><br><span class="line">a = 10 </span><br><span class="line">b = 12 </span><br><span class="line">print(&quot;a的二进制数:&quot;,bin(a)) </span><br><span class="line">print(&quot;b的二进制数:&quot;,bin(b)) </span><br><span class="line">print(&quot;将a与b执行按位与操作:&quot;,np.bitwise_and(a,b))  </span><br></pre></td></tr></table></figure><p>如果两个的二进制数相对应的位都为 1，那么执行位与运算后，该位的结果就为 1，否则就为 0。</p><p>上述示例：a 与 b 位与运算的结果为 1000，因此它的十进制结果为 8。</p><img src="/post/583e63c1/343.png" class title="This is an image"><p>bitwise_or()</p><p>bitwise_or() 对数组中整数的二进制数执行“按位或”运算。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a,b = 13,17</span><br><span class="line">print (&#x27;13 和 17 的二进制数：&#x27;)</span><br><span class="line">print (bin(a), bin(b))</span><br><span class="line"></span><br><span class="line">print (&#x27;13 和 17 的位或：&#x27;)</span><br><span class="line">print (np.bitwise_or(13, 17))</span><br></pre></td></tr></table></figure><p>对于按位或运算，只要相对应的二进制位上有一个为 1，那么它的运算结果就位 1，否则为 0，其真值表如下：</p><img src="/post/583e63c1/344.png" class title="This is an image"><p>Invert()</p><p>该方法对数组中整数做按位取反运算，也就是 0 变成 1，1 变为 0。若是有符号的负整数，取其二进制数的补码，并执行 +1 操作。对于有符号二进制数，其最高位为 0， 表示正数；最高位为 1， 表示负数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np </span><br><span class="line">#数据类型为无符号整型uint8</span><br><span class="line">arr = np.array([20],dtype = np.uint8) </span><br><span class="line">print(&quot;二进制表示:&quot;,np.binary_repr(20,8)) </span><br><span class="line">print(np.invert(arr)) </span><br><span class="line">#进行取反操作</span><br><span class="line">print(&quot;二进制表示: &quot;, np.binary_repr(235,8))  </span><br></pre></td></tr></table></figure><p>注意：上述示例中，np.binary_repr 函数用来设置二进制数的位数。若对补码概念不熟悉，可参考百度百科《补码》。</p><p>left_shift()</p><p>该方法把数组元素的二进制数向左移动到指定位置，而其返回值所对应的二进制数，则会从右侧追加相等数量的 0（移动了多少位便追加多少个0）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">#移动三位后的输出值</span><br><span class="line">print (np.left_shift(20,3)</span><br><span class="line">#打印移动后20的二进制数</span><br><span class="line">print (np.binary_repr(20, width = 8))</span><br><span class="line">#函数返回值的二进制数</span><br><span class="line">print (np.binary_repr(160, width = 8))</span><br></pre></td></tr></table></figure><p>right_shift()</p><p>right_shift() 将数组中元素的二进制数向右移动到指定位置，其返回值对应的二进制数会从左侧追加相等数量的 0。该函数使用与 left_shift() 恰好相反。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">#将40右移两位后返回值：</span><br><span class="line">print (np.right_shift(40,2))</span><br><span class="line">#移动后40的二进制数：</span><br><span class="line">print (np.binary_repr(40, width = 8))</span><br><span class="line">#移动后返回值的二进制数：</span><br><span class="line">print (np.binary_repr(10, width = 8))</span><br></pre></td></tr></table></figure><h4 id="NumPy字符串处理函数"><a href="#NumPy字符串处理函数" class="headerlink" title="NumPy字符串处理函数"></a>NumPy字符串处理函数</h4><p>NumPy 提供了许多字符串处理函数，它们被定义在用于处理字符串数组的 numpy.char 这个类中，这些函数的操作对象是 string_ 或者 unicode_ 字符串数组。</p><p>add()<br>对两个数组相应位置的字符串做连接操作。</p><p>multiply()<br>返回多个字符串副本，比如将字符串“ hello”乘以3，则返回字符串“ hello hello hello”。</p><p>center()<br>用于居中字符串，并将指定的字符，填充在原字符串的左右两侧。</p><p>capitalize()<br>将字符串第一个字母转换为大写。</p><p>title()<br>标题样式，将每个字符串的第一个字母转换为大写形式。</p><p>lower()<br>将数组中所有的字符串的大写转换为小写。</p><p>upper()<br>将数组中所有的字符串的小写转换为大写。</p><p>split()<br>通过指定分隔符对字符串进行分割，并返回一个数组序列，默认分隔符为空格。</p><p>splitlines()<br>以换行符作为分隔符来分割字符串，并返回数组序列。</p><p>strip()<br>删除字符串开头和结尾处的空字符。</p><p>join()<br>返回一个新的字符串，该字符串是以指定分隔符来连接数组中的所有元素。</p><p>replace()<br>用新的字符串替换原数组中指定的字符串。</p><p>decode()<br>用指定的编码格式对数组中元素依次执行解码操作。</p><p>encode()<br>用指定的编码格式对数组中元素依次执行编码操作。</p><p>numpy.char.add()</p><p>numpy.char.add() 将两个数组对应位置的字符串元素进行连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np  </span><br><span class="line">print(np.char.add([&#x27;welcome&#x27;,&#x27;url&#x27;], [&#x27; to 漂亮鬼 net&#x27;,&#x27;is 1yzf2zst.github.io&#x27;] ))  </span><br></pre></td></tr></table></figure><p>numpy.char.multiply()<br>该函数将指定的字符串进行多次拷贝，并将拷贝结果返回</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">print (np.char.multiply(&#x27;1yzf2zst.github.io&#x27;&#x27;,3))</span><br></pre></td></tr></table></figure><p>numpy.char.center()</p><p>numpy.char.center() 用于居中字符串</p><p>语法格式：np.char.center(string, width, fillchar) </p><p>string: 代表字符串，width: 表示长度，fillchar: 要填充的字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np  </span><br><span class="line">print(np.char.center(&quot;1yzf2zst.github.io&quot;, 20, &#x27;*&#x27;))  </span><br></pre></td></tr></table></figure><p>numpy.char.capitalize()</p><p>numpy.char.capitalize() 将字符串的第一个字母转换为大写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">print (np.char.capitalize(&#x27;python&#x27;))</span><br></pre></td></tr></table></figure><p>numpy.char.title()</p><p>numpy.char.title() 将字符串数组中每个元素的第一个字母转换为大写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np  </span><br><span class="line">print(np.char.title(&quot;welcome to china&quot;)) </span><br></pre></td></tr></table></figure><p>numpy.char.lower()</p><p>numpy.char.lower() 将字符串数组中每个元素转换为小写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np  </span><br><span class="line">print(np.char.lower(&quot;WELCOME TO MYHOME&quot;)) </span><br></pre></td></tr></table></figure><p>numpy.char.upper()<br>numpy.char.upper() 将数组中的每个元素转换为大写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">print(np.char.upper(&quot;Welcome To Python&quot;)) </span><br></pre></td></tr></table></figure><p>numpy.char.split()</p><p>该函数通过指定分隔符对字符串进行分割，并返回数组序列<br>默认情况下，分隔符为空格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np  </span><br><span class="line">print(np.char.split(&quot;Welcome To Python&quot;),sep = &quot; &quot;)  </span><br></pre></td></tr></table></figure><p>numpy.char.splitlines()<br>以换行符作为分隔符来分割字符串，并返回一个数组序列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np  </span><br><span class="line">print(&quot;Splitting the String line by line..&quot;) </span><br><span class="line">print(np.char.splitlines(&quot;Welcome\nTo\nPython&quot;))  </span><br></pre></td></tr></table></figure><p>numpy.char.strip()<br>用于移除开头或结尾处的空格。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np  </span><br><span class="line">print(&quot;原字符串:&quot;,str)  </span><br><span class="line">str = &quot;     welcome to Python     &quot; </span><br><span class="line">print(np.char.strip(str))  </span><br></pre></td></tr></table></figure><p>numpy.char.join()</p><p>numpy.char.join() 通过指定的分隔符来连接数组中的元素或字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">print (np.char.join(&#x27;:&#x27;,&#x27;Love&#x27;))</span><br><span class="line">#也可指定多个分隔符</span><br><span class="line">print (np.char.join([&#x27;:&#x27;,&#x27;-&#x27;],[&#x27;Love&#x27;,&#x27;Python&#x27;]))</span><br></pre></td></tr></table></figure><p>numpy.char.replace()<br>numpy.char.replace() 使用新字符替换字符串中的指定字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np </span><br><span class="line">str = &quot;Welcome to China&quot; </span><br><span class="line">print(&quot;原字符串:&quot;,str) </span><br><span class="line">#更改后字符串</span><br><span class="line">print(np.char.replace(str, &quot;Welcome to&quot;,&quot;Hello&quot;))  </span><br></pre></td></tr></table></figure><p>numpy.char.encode()与decode()<br>默认以utf-8的形式进行编码与解码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np </span><br><span class="line">#cp500国际编码</span><br><span class="line">encode_str = np.char.encode(&quot;Welcome to China&quot;, &#x27;cp500&#x27;) </span><br><span class="line">decode_str =np.char.decode(encode_str, &#x27;cp500&#x27;) </span><br><span class="line">print(encode_str) </span><br><span class="line">print(decode_str)  </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> numpy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析三剑客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numpy（三）</title>
      <link href="/post/ef137aa4.html"/>
      <url>/post/ef137aa4.html</url>
      
        <content type="html"><![CDATA[<h4 id="NumPy广播机制"><a href="#NumPy广播机制" class="headerlink" title="NumPy广播机制"></a>NumPy广播机制</h4><p>NumPy 中的广播机制（Broadcast）旨在解决不同形状数组之间的算术运算问题。我们知道，如果进行运算的两个数组形状完全相同，它们直接可以做相应的运算</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.array([0.1,0.2,0.3,0.4])</span><br><span class="line">b = np.array([10,20,30,40])</span><br><span class="line">c = a * b</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure><p>但如果两个形状不同的数组呢？它们之间就不能做算术运算了吗？当然不是！为了保持数组形状相同，NumPy 设计了一种广播机制，这种机制的核心是对形状较小的数组，在横向或纵向上进行一定次数的重复，使其与形状较大的数组拥有相同的维度。</p><p>当进行运算的两个数组形状不同，Numpy 会自动触发广播机制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.array([[ 0, 0, 0],</span><br><span class="line">           [10,10,10],</span><br><span class="line">           [20,20,20],</span><br><span class="line">           [30,30,30]])</span><br><span class="line">#b数组与a数组形状不同</span><br><span class="line">b = np.array([1,2,3])</span><br><span class="line">print(a + b)</span><br></pre></td></tr></table></figure><img src="/post/ef137aa4/340.png" class title="This is an image"><h4 id="NumPy遍历数组"><a href="#NumPy遍历数组" class="headerlink" title="NumPy遍历数组"></a>NumPy遍历数组</h4><p>NumPy 提供了一个 nditer 迭代器对象，它可以配合 for 循环完成对数组元素的遍历。</p><p>使用 arange() 函数创建一个 3*4 数组，并使用 nditer 生成迭代器对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.arange(0,60,5)</span><br><span class="line">a = a.reshape(3,4)</span><br><span class="line">#使用nditer迭代器,并使用for进行遍历</span><br><span class="line">for x in np.nditer(a):</span><br><span class="line">   print(x)</span><br></pre></td></tr></table></figure><h5 id="遍历顺序"><a href="#遍历顺序" class="headerlink" title="遍历顺序"></a>遍历顺序</h5><p>在内存中，Numpy 数组提供了两种存储数据的方式，分别是 C-order（行优先顺序）与 Fortrant-order（列优先顺序）。nditer 迭代器选择了一种与数组内存布局一致的顺序，之所以这样做，是为了提升数据的访问效率。</p><p>在默认情况下，当我们遍历数组中元素的时候，不需要考虑数组的存储顺序，这一点可以通过遍历上述数组的转置数组来验证。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.arange(0,60,5)</span><br><span class="line">a = a.reshape(3,4)</span><br><span class="line">#a的转置数组</span><br><span class="line">b = a.T</span><br><span class="line">print (b)</span><br><span class="line">for x in np.nditer(b):</span><br><span class="line">   print(x，end=&quot;,&quot;)</span><br></pre></td></tr></table></figure><p>从示例的输出结果可以看出，a 和 a.T 的遍历顺序是一样的，也就是说，它们在内存中的存储顺序是一样的。</p><p>下面以 C 样式访问转置数组的副本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.arange(0,60,5).reshape(3,4)</span><br><span class="line">#copy方法生成数组副本</span><br><span class="line">for x in np.nditer(a.T.copy(order=&#x27;C&#x27;)):</span><br><span class="line">    print (x, end=&quot;, &quot; )</span><br></pre></td></tr></table></figure><p>通过示例可知 a.T.copy(order &#x3D; ‘C’) 的遍历结果与前面的数组遍历结果不一样。究其原因，就是因为它们在内存中的存储方式不一样。</p><h5 id="指定遍历顺序"><a href="#指定遍历顺序" class="headerlink" title="指定遍历顺序"></a>指定遍历顺序</h5><p>您可以通过 nditer 对象的order参数来指定数组的遍历的顺序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.arange(0,60,5)</span><br><span class="line">a = a.reshape(3,4)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">for x in np.nditer(a, order = &#x27;C&#x27;):</span><br><span class="line">   print (x,end=&quot;,&quot;) </span><br><span class="line"></span><br><span class="line">for x in np.nditer(a, order = &#x27;F&#x27;):</span><br><span class="line">   print (x,end=&quot;,&quot;)</span><br></pre></td></tr></table></figure><h5 id="修改数组元素值"><a href="#修改数组元素值" class="headerlink" title="修改数组元素值"></a>修改数组元素值</h5><p>nditer 对象提供了一个可选参数op_flags，它表示能否在遍历数组时对元素进行修改。它提供了三种模式</p><ol><li>read-only</li></ol><p>只读模式，在这种模式下，遍历时不能修改数组中的元素。</p><ol start="2"><li><p>read-write<br>读写模式，遍历时可以修改元素值。</p></li><li><p>write-only<br>只写模式，在遍历时可以修改元素值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.arange(0,60,5)</span><br><span class="line">a = a.reshape(3,4) </span><br><span class="line">print (&quot;原数组是:&quot;,a)</span><br><span class="line">for x in np.nditer(a, op_flags=[&#x27;readwrite&#x27;]):</span><br><span class="line">    x[...]=2*x</span><br><span class="line">print (&#x27;修改后的数组是：&#x27;,a)</span><br></pre></td></tr></table></figure></li></ol><h5 id="外部循环使用"><a href="#外部循环使用" class="headerlink" title="外部循环使用"></a>外部循环使用</h5><p>nditer 对象的构造函数有一个“flags”参数，它可以接受以下参数值：</p><p>c_index<br>可以跟踪 C 顺序的索引。<br>f_index<br>可以跟踪 Fortran 顺序的索引。<br>multi_index<br>每次迭代都会跟踪一种索引类型。<br>external_loop<br>返回的遍历结果是具有多个值的一维数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.arange(0,60,5)</span><br><span class="line">a = a.reshape(3,4)</span><br><span class="line">print(&quot;原数组&quot;,a)</span><br><span class="line">#修改后数组</span><br><span class="line">for x in np.nditer(a, flags = [&#x27;external_loop&#x27;], order = &#x27;F&#x27;):</span><br><span class="line">   print(x)</span><br></pre></td></tr></table></figure><h5 id="迭代多个数组"><a href="#迭代多个数组" class="headerlink" title="迭代多个数组"></a>迭代多个数组</h5><p>如果两个数组都能够被广播，那么 nditer 对象就可以同时对它们迭代。</p><p>假设数组 a 的维度是 3<em>4，另一个数组 b 的维度是 1</em>4 （即维度较小的数组 b 可以被广播到数组 a 中）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.arange(0,60,5)</span><br><span class="line">a = a.reshape(3,4)</span><br><span class="line">print (a)</span><br><span class="line">b = np.array([1, 2, 3, 4], dtype = int)</span><br><span class="line">print (b） </span><br><span class="line">#广播迭代</span><br><span class="line">for x,y in np.nditer([a,b]):</span><br><span class="line">    print (&quot;%d:%d&quot; % (x,y),end=&quot;,&quot;)</span><br></pre></td></tr></table></figure><h4 id="NumPy相关数组操作"><a href="#NumPy相关数组操作" class="headerlink" title="NumPy相关数组操作"></a>NumPy相关数组操作</h4><p>NumPy 中包含了一些处理数组的常用方法，大致可分为以下几类：</p><p>数组变维操作<br>数组转置操作<br>修改数组维度操作<br>连接与分割数组操作</p><h5 id="数组变维操作"><a href="#数组变维操作" class="headerlink" title="数组变维操作"></a>数组变维操作</h5><p>reshape<br>在不改变数组元素的条件下，修改数组的形状。</p><p>flat<br>返回是一个迭代器，可以用 for 循环遍历其中的每一个元素。</p><p>flatten<br>以一维数组的形式返回一份数组的副本，对副本的操作不会影响到原数组。</p><p>ravel<br>返回一个连续的扁平数组（即展开的一维数组），与 flatten不同，它返回的是数组视图（修改视图会影响原数组）。</p><ol><li><p>numpy.ndarray.flat<br>numpy.ndarray.flat 返回一个数组迭代器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.arange(9).reshape(3,3)</span><br><span class="line">for row in a:</span><br><span class="line">    print (row)</span><br><span class="line">#使用flat属性：</span><br><span class="line">for ele in a.flat:</span><br><span class="line">    print (ele,end=&quot;，&quot;)</span><br></pre></td></tr></table></figure></li><li><p>numpy.ndarray.flatten()</p></li></ol><p>numpy.ndarray.flatten 返回一份数组副本，对副本修改不会影响原始数组</p><p>语法格式：ndarray.flatten(order&#x3D;’C’)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.arange(8).reshape(2,4)</span><br><span class="line">print (a)</span><br><span class="line">#默认按行C风格展开的数组</span><br><span class="line">print (a.flatten())</span><br><span class="line">#以F风格顺序展开的数组</span><br><span class="line">print (a.flatten(order = &#x27;F&#x27;))</span><br></pre></td></tr></table></figure><ol start="3"><li>numpy.ravel()</li></ol><p>numpy.ravel() 将多维数组中的元素以一维数组的形式展开，该方法返回数组的视图（view），如果修改，则会影响原始数组。</p><p>numpy.ravel(a, order&#x3D;’C’)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.arange(8).reshape(2,4)</span><br><span class="line">print (&#x27;原数组：&#x27;)</span><br><span class="line">print (a)</span><br><span class="line"></span><br><span class="line">print (&#x27;调用 ravel 函数后：&#x27;)</span><br><span class="line">print (a.ravel())</span><br><span class="line"></span><br><span class="line">print (&#x27;F 风格顺序调用 ravel 函数之后：&#x27;)</span><br><span class="line">print (a.ravel(order = &#x27;F&#x27;))</span><br></pre></td></tr></table></figure><h5 id="数组转置操作"><a href="#数组转置操作" class="headerlink" title="数组转置操作"></a>数组转置操作</h5><p>transpose<br>将数组的维度值进行对换，比如二维数组维度(2,4)使用该方法后为(4,2)。</p><p>ndarray.T<br>与 transpose 方法相同。</p><p>rollaxis<br>沿着指定的轴向后滚动至规定的位置。</p><p>swapaxes<br>对数组的轴进行对换。</p><ol><li>numpy.transpose()</li></ol><p>numpy.transpose() 用于对换多维数组的维度，比如二维数组使用此方法可以实现矩阵转置</p><p>语法格式：numpy.transpose(arr, axes)</p><p>arr：要操作的数组</p><p>axes：可选参数，元组或者整数列表，将会按照该参数进行转置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.arange(12).reshape(3,4)</span><br><span class="line">print (a)</span><br><span class="line">print (np.transpose(a))</span><br></pre></td></tr></table></figure><ol start="2"><li>numpy.rollaxis()</li></ol><p>该方法表示沿着指定的轴，向后滚动至一个特定位置</p><p>格式如下：numpy.rollaxis(arr, axis, start)</p><p>arr：要传入的数组；<br>axis：沿着哪条轴向后滚动，其它轴的相对位置不会改变；<br>start：默认以 0 轴开始，可以根据数组维度调整它的值。</p><ol start="3"><li>numpy.swapaxes()</li></ol><p>该方法用于交换数组的两个轴，</p><p>语法格式：numpy.swapaxes(arr, axis1, axis2) </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"># 创建了三维的 ndarray</span><br><span class="line">a = np.arange(27).reshape(3,3,3)</span><br><span class="line">print (a)</span><br><span class="line">#对换0轴与2轴</span><br><span class="line">print(np.swapaxes(a,2,0))</span><br></pre></td></tr></table></figure><h5 id="修改数组维度操作"><a href="#修改数组维度操作" class="headerlink" title="修改数组维度操作"></a>修改数组维度操作</h5><p>修改数组维度的操作，主要有以下方法：</p><p>broadcast<br>生成一个模拟广播的对象。</p><p>broadcast_to<br>将数组广播为新的形状。</p><p>expand_dims<br>扩展数组的形状。</p><p>squeeze<br>从数组的形状中删除一维项。</p><ol><li>numpy.broadcast()</li></ol><p>返回值是数组被广播后的对象，该函数以两个数组作为输入参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.array([[1], [2], [3]])</span><br><span class="line">b = np.array([4, 5, 6]) </span><br><span class="line"># 对b广播a</span><br><span class="line">d = np.broadcast(a,b) </span><br><span class="line">#d它拥有 iterator 属性</span><br><span class="line">r,c = d.iters</span><br><span class="line">print (next(r), next(c))</span><br><span class="line">print (next(r), next(c))</span><br><span class="line"># 使用broadcast将a与b相加</span><br><span class="line">e = np.broadcast(a,b)</span><br><span class="line">f=np.empty(e.shape)</span><br><span class="line">f.flat=[x+y for (x,y) in e]</span><br><span class="line">print(f)</span><br><span class="line">print(a+b)</span><br></pre></td></tr></table></figure><ol start="2"><li>numpy.broadcast_to()</li></ol><p>该函数将数组广播到新形状中，它在原始数组的基础上返回一个只读视图。 如果新形状不符合 NumPy 的广播规则，则会抛出 ValueError 异常。函数的语法格式如下：numpy.broadcast_to(array, shape, subok)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.arange(4).reshape(1,4)</span><br><span class="line">print(&quot;原数组&quot;,a)</span><br><span class="line">print (&#x27;调用 broadcast_to 函数之后：&#x27;)</span><br><span class="line">print (np.broadcast_to(a,(4,4)))</span><br></pre></td></tr></table></figure><ol start="3"><li>numpy.expand_dims()</li></ol><p>在指定位置插入新的轴，从而扩展数组的维度，语法格式如下:numpy.expand_dims(arr, axis)</p><p>参数说明：arr：输入数组axis：新轴插入的位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">x = np.array(([1,2],[3,4]))</span><br><span class="line">print (&#x27;数组 x：&#x27;)</span><br><span class="line">print (x)</span><br><span class="line"># 在 0 轴处插入新的轴</span><br><span class="line">y = np.expand_dims(x, axis = 0)</span><br><span class="line">print (&#x27;数组 y：&#x27;)</span><br><span class="line">print (y)</span><br><span class="line">print (&#x27;\n&#x27;)</span><br><span class="line">print (&#x27;数组 x 和 y 的形状：&#x27;)</span><br><span class="line">print (x.shape, y.shape)</span><br></pre></td></tr></table></figure><ol start="4"><li>numpy.squeeze()<br>删除数组中维度为 1 的项，例如，一个数组的 shape 是 (5,1)，经此函数后，shape 变为 (5,) 。其函数语法格式如下：</li></ol><p>numpy.squeeze(arr, axis)</p><p>参数说明：arr：输入数的组；axis：取值为整数或整数元组，用于指定需要删除的维度所在轴，指定的维度值必须为 1 ，否则将会报错，若为 None，则删除数组维度中所有为 1 的项。</p><p>下面是带有 axis 参数的实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; x = np.array([[[0], [1], [2]]])</span><br><span class="line">&gt;&gt;&gt; x.shape</span><br><span class="line">(1, 3, 1)</span><br><span class="line">&gt;&gt;&gt; np.squeeze(x).shape</span><br><span class="line">(3,)</span><br><span class="line">&gt;&gt;&gt; np.squeeze(x, axis=(2,)).shape</span><br><span class="line">(1, 3)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.arange(9).reshape(1,3,3)</span><br><span class="line">print (a)</span><br><span class="line">b = np.squeeze(a)</span><br><span class="line">print (b)</span><br><span class="line">print (&#x27;数组 a 和 b 的形状：&#x27;)</span><br><span class="line">print (x.shape, y.shape)</span><br></pre></td></tr></table></figure><h5 id="连接与分割数组操作"><a href="#连接与分割数组操作" class="headerlink" title="连接与分割数组操作"></a>连接与分割数组操作</h5><p>连接与分割数组是数组的两种操作方式</p><img src="/post/ef137aa4/341.png" class title="This is an image"><h6 id="1-连接数组操作-numpy-concatenate"><a href="#1-连接数组操作-numpy-concatenate" class="headerlink" title="1) 连接数组操作  numpy.concatenate()"></a>1) 连接数组操作  numpy.concatenate()</h6><p>沿指定轴连接相同形状的两个或多个数组<br>格式如下：numpy.concatenate((a1, a2, …), axis)</p><p>a1, a2, …：表示一系列相同类型的数组；<br>axis：沿着该参数指定的轴连接数组，默认为 0。</p><p>创建两个 a 、b 数组，并沿指定轴将它们连接起来。注意两个数组的形状要保持一致。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">#创建数组a</span><br><span class="line">a = np.array([[10,20],[30,40]])</span><br><span class="line">print (a)</span><br><span class="line">#创建数组b</span><br><span class="line">b = np.array([[50,60],[70,80]])</span><br><span class="line">print (b)</span><br><span class="line">#沿轴 0 连接两个数组</span><br><span class="line">print (np.concatenate((a,b)))</span><br><span class="line">#沿轴 1 连接两个数组</span><br><span class="line">print (np.concatenate((a,b),axis = 1))</span><br></pre></td></tr></table></figure><p>数组连接操作至少需要两个维度相同的数组，才允许对它们进行垂直或者水平方向上的操作。在垂直方向堆叠数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.array([[1,2],[3,4]])</span><br><span class="line">b = np.array([[5,6],[7,8]])</span><br><span class="line">#垂直堆叠</span><br><span class="line">c = np.vstack((a,b))</span><br><span class="line">print (c)</span><br></pre></td></tr></table></figure><h6 id="2-分割数组操作"><a href="#2-分割数组操作" class="headerlink" title="2) 分割数组操作"></a>2) 分割数组操作</h6><p>numpy.split() 沿指定的轴将数组分割为多个子数组</p><p>语法格式：numpy.split(ary, indices_or_sections, axis)</p><p>ary：被分割的数组<br>indices_or_sections：若是一个整数，代表用该整数平均切分，若是一个数组，则代表沿轴切分的位置（左开右闭）；<br>axis：默认为0，表示横向切分；为1时表示纵向切分。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.arange(6)</span><br><span class="line">#原数组</span><br><span class="line">print (a)</span><br><span class="line">#将数组分为二个形状大小相等的子数组</span><br><span class="line">b = np.split(a,2)</span><br><span class="line">print (b)</span><br><span class="line">#将数组在一维数组中标明要位置分割</span><br><span class="line">b = np.split(a,[3,4])</span><br><span class="line">print (b)</span><br></pre></td></tr></table></figure><p>最后看一下 hsplit() 的使用方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">#arr1数组</span><br><span class="line">arr1 = np.floor(10 * np.random.random((2, 6)))</span><br><span class="line">print(arr1)</span><br><span class="line">#拆分后数组</span><br><span class="line">print(np.hsplit(arr1, 3))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> numpy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析三剑客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numpy（二）</title>
      <link href="/post/a20dd9f6.html"/>
      <url>/post/a20dd9f6.html</url>
      
        <content type="html"><![CDATA[<h4 id="Numpy创建数组"><a href="#Numpy创建数组" class="headerlink" title="Numpy创建数组"></a>Numpy创建数组</h4><p>创建 ndarray 数组的基本方法，除了使用 array() 方法外，NumPy 还提供了其他创建 ndarray 数组的方法。</p><h5 id="numpy-empty"><a href="#numpy-empty" class="headerlink" title="numpy.empty()"></a>numpy.empty()</h5><p>numpy.empty() 创建未初始化的数组，可以指定创建数组的形状（shape）和数据类型（dtype）</p><p>语法格式：</p><h5 id="numpy-empty-shape-dtype-x3D-float-order-x3D-‘C’"><a href="#numpy-empty-shape-dtype-x3D-float-order-x3D-‘C’" class="headerlink" title="numpy.empty(shape, dtype &#x3D; float, order &#x3D; ‘C’)"></a>numpy.empty(shape, dtype &#x3D; float, order &#x3D; ‘C’)</h5><p>它接受以下参数：<br>shape：指定数组的形状；<br>dtype：数组元素的数据类型，默认值是值 float；<br>order：指数组元素在计算机内存中的储存顺序，默认顺序是“C”(行优先顺序)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np </span><br><span class="line">arr = np.empty((3,2), dtype = int) </span><br><span class="line">print(arr) </span><br></pre></td></tr></table></figure><p>切记 empty 并非创建空数组。</p><h5 id="numpy-zeros"><a href="#numpy-zeros" class="headerlink" title="numpy.zeros()"></a>numpy.zeros()</h5><p>该函数用来创建元素均为 0 的数组，同时还可以指定被数组的形状<br>语法格式：<br>numpy. zeros(shape,dtype&#x3D;float,order&#x3D;”C”)</p><p>shape指定数组的形状大小。<br>dtype可选项，数组的数据类型<br>order“C”代表以行顺序存储，“F”则表示以列顺序存储</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">#默认数据类型为浮点数</span><br><span class="line">a=np.zeros(6)</span><br><span class="line">print(a)</span><br><span class="line">b=np.zeros(6,dtype=&quot;complex64&quot; )</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><p>也可以使用自定义的数据类型创建数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c = np.zeros((3,3), dtype = [(&#x27;x&#x27;, &#x27;i4&#x27;), (&#x27;y&#x27;, &#x27;i4&#x27;)]) </span><br><span class="line">print(c)</span><br><span class="line">#输出x,y，并指定的数据类型</span><br></pre></td></tr></table></figure><h5 id="numpy-ones"><a href="#numpy-ones" class="headerlink" title="numpy.ones()"></a>numpy.ones()</h5><p>返回指定形状大小与数据类型的新数组，并且新数组中每项元素均用 1 填充<br>numpy.ones(shape, dtype &#x3D; None, order &#x3D; ‘C’)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np </span><br><span class="line">arr1 = np.ones((3,2), dtype = int) </span><br><span class="line">print(arr1)  </span><br></pre></td></tr></table></figure><h5 id="numpy-asarray"><a href="#numpy-asarray" class="headerlink" title="numpy.asarray()"></a>numpy.asarray()</h5><p>asarray() 与 array() 类似，但是它比 array() 更为简单。asarray() 能够将一个 Python 序列转化为 ndarray 对象</p><p>语法格式：<br>numpy.asarray（sequence，dtype &#x3D; None ，order &#x3D; None ）</p><p>sequence：接受一个 Python 序列，可以是列表或者元组；<br>dtype：可选参数，数组的数据类型；<br>order：数组内存布局样式，可以设置为 C 或者 F，默认是 C。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np </span><br><span class="line">l=[1,2,3,4,5,6,7] </span><br><span class="line">a = np.asarray(l); </span><br><span class="line">print(type(a)) </span><br><span class="line">print(a) </span><br></pre></td></tr></table></figure><p>使用嵌套列表创建多维数组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np </span><br><span class="line">l=[[1,2,3,4,5,6,7],[8,9]] </span><br><span class="line">a = np.asarray(l); </span><br><span class="line">print(type(a)) </span><br><span class="line">print(a)  </span><br></pre></td></tr></table></figure><h5 id="numpy-frombuffer"><a href="#numpy-frombuffer" class="headerlink" title="numpy.frombuffer()"></a>numpy.frombuffer()</h5><p>表示使用指定的缓冲区创建数组</p><p>numpy.frombuffer(buffer, dtype &#x3D; float, count &#x3D; -1, offset &#x3D; 0)</p><p>buffer：将任意对象转换为流的形式读入缓冲区；<br>dtype：返回数组的数据类型，默认是<br>float32；count：要读取的数据数量，默认为 -1 表示读取所有数据；<br>offset：读取数据的起始位置，默认为 0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np </span><br><span class="line">#字节串类型</span><br><span class="line">l = b&#x27;hello world&#x27; </span><br><span class="line">print(type(l)) </span><br><span class="line">a = np.frombuffer(l, dtype = &quot;S1&quot;) </span><br><span class="line">print(a) </span><br><span class="line">print(type(a)) </span><br></pre></td></tr></table></figure><h5 id="numpy-fromiter"><a href="#numpy-fromiter" class="headerlink" title="numpy.fromiter()"></a>numpy.fromiter()</h5><p>该方法可以把迭代对象转换为 ndarray 数组，其返回值是一个一维数组。</p><p>numpy.fromiter(iterable, dtype, count &#x3D; -1)</p><p>iterable可迭代对象。<br>dtype返回数组的数据类型。<br>count读取的数据数量，默认为 -1，读取所有数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import numpy as np</span><br><span class="line"># 使用 range 函数创建列表对象 </span><br><span class="line">list=range(6)</span><br><span class="line">#生成可迭代对象i</span><br><span class="line">i=iter(list)</span><br><span class="line">#使用i迭代器，通过fromiter方法创建ndarray</span><br><span class="line">array=np.fromiter(i, dtype=float)</span><br><span class="line">print(array)</span><br></pre></td></tr></table></figure><h4 id="NumPy创建区间数组"><a href="#NumPy创建区间数组" class="headerlink" title="NumPy创建区间数组"></a>NumPy创建区间数组</h4><p>所谓区间数组，是指数组元素的取值位于某个范围内，并且数组元素之间可能会呈现某种规律，比如等比数列、递增、递减等。</p><ol><li>numpy.arange()</li></ol><p>可以使用 arange() 来创建给定数值范围的数组</p><p>语法格式：numpy.arange(start, stop, step, dtype)</p><p>start起始值，默认是 0。<br>stop终止值，注意生成的数组元素值不包含终止值。</p><p>step步长，默认为 1。<br>dtype可选参数，指定 ndarray 数组的数据类型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">x = np.arange(8) </span><br><span class="line">print (x)</span><br></pre></td></tr></table></figure><p>设置 start 、stop 值以及步长，最终输出 0-10 中的奇数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">x = np.arange(1,10,2) </span><br><span class="line">print (x)</span><br></pre></td></tr></table></figure><ol start="2"><li>numpy.linspace()</li></ol><p>表示在指定的数值区间内，返回均匀间隔的一维等差数组，默认均分 50 份</p><p>语法格式：<br>np.linspace(start, stop, num&#x3D;50, endpoint&#x3D;True, retstep&#x3D;False, dtype&#x3D;None)</p><p>start：代表数值区间的起始值；<br>stop：代表数值区间的终止值；<br>num：表示数值区间内要生成多少个均匀的样本。默认值为 50；<br>endpoint：默认为 True，表示数列包含 stop 终止值，反之不包含；<br>retstep：默认为 True，表示生成的数组中会显示公差项，反之不显示；<br>dtype：代表数组元素值的数据类型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">#生成10个样本</span><br><span class="line">a = np.linspace(1,10,10)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><ol start="3"><li>numpy.logspace</li></ol><p>该函数同样返回一个 ndarray 数组，它用于创建等比数组</p><p>语法格式：</p><p>np.logspace(start, stop, num&#x3D;50, endpoint&#x3D;True, base&#x3D;10.0, dtype&#x3D;None)</p><p>其中 base 代表对数函数的底数，默认为 10。<br>start序列的起始值：base<strong>start。<br>stop序列的终止值：base</strong>stop。<br>num数值范围区间内样本数量，默认为 50。<br>endpoint默认为 True 包含终止值，反之不包含。<br>base对数函数的 log 底数，默认为10。<br>dtype可选参数，指定 ndarray 数组的数据类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.logspace(1.0,2.0, num = 10)</span><br><span class="line">print (a)</span><br></pre></td></tr></table></figure><h4 id="Numpy索引和切片"><a href="#Numpy索引和切片" class="headerlink" title="Numpy索引和切片"></a>Numpy索引和切片</h4><p>在 NumPy 中，如果想要访问，或修改数组中的元素，您可以采用索引或切片的方式，比如使用从 0 开始的索引依次访问数组中的元素，这与 Python 的 list 列表是相同的。</p><p>NumPy 提供了多种类型的索引方式，常用方式有两种：基本切片与高级索引</p><p>基本切片</p><p>NumPy 内置函数 slice() 可以用来构造切片对象，该函数需要传递三个参数值分别是 start（起始索引）、stop（终止索引） 和 step（步长） ，通过它可以实现从原数组的上切割出一个新数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.arange(5,100)</span><br><span class="line">#生成切片对象</span><br><span class="line">s = slice(2,9,3)#从索引2开始到索引9停止，间隔时间为2</span><br><span class="line">print(a[s])</span><br></pre></td></tr></table></figure><p>也可以通过冒号来分割切片参数，最终也能获得相同结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.arange(10)</span><br><span class="line">b = a[2:9:2]</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><h4 id="NumPy高级索引"><a href="#NumPy高级索引" class="headerlink" title="NumPy高级索引"></a>NumPy高级索引</h4><p>在 NumPy 中还可以使用高级索引方式，比如整数数组索引、布尔索引以及花式索引</p><h5 id="整数数组索引"><a href="#整数数组索引" class="headerlink" title="整数数组索引"></a>整数数组索引</h5><p>整数数组索引，它可以选择数组中的任意一个元素，比如，选择第几行第几列的某个元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">#创建二维数组</span><br><span class="line">x = np.array([[1,  2],  [3,  4],  [5,  6]])</span><br><span class="line">#[0,1,2]代表行索引;[0,1,0]代表列索引</span><br><span class="line">y = x[[0,1,2],[0,1,0]] </span><br><span class="line">print (y)</span><br></pre></td></tr></table></figure><p>对上述示例做简单分析：将行、列索引组合会得到 (0,0)、(1,1) 和 (2,0)<br>它们分别对应着输出结果在原数组中的索引位置</p><p>下面再看一组示例：获取了 4*3 数组中的四个角上元素，它们对应的行索引是 [0,0] 和 [3,3]，列索引是 [0,2] 和 [0,2]。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">b = np.array([[ 0, 1, 2],</span><br><span class="line">              [ 3, 4, 5],</span><br><span class="line">              [ 6, 7, 8],</span><br><span class="line">              [ 9,10,11]])</span><br><span class="line">r = np.array([[0,0],[3,3]])</span><br><span class="line">c = np.array([[0,2],[0,2]])</span><br><span class="line">#获取四个角的元素</span><br><span class="line">c = b[r,c]</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure><p>也可以将切片所使用的:或省略号…与整数数组索引结合使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">d = np.array([[ 0,  1,  2],</span><br><span class="line">              [ 3,  4,  5],</span><br><span class="line">              [ 6,  7,  8],</span><br><span class="line">              [ 9, 10, 11]])</span><br><span class="line">#对行列分别进行切片</span><br><span class="line">e = d[1:4,1:3]</span><br><span class="line">print(e)</span><br><span class="line">#行使用基础索引，对列使用高级索引</span><br><span class="line">f = d[1:4,[1,2]]</span><br><span class="line">#显示切片后结果</span><br><span class="line">print (f)</span><br><span class="line">#对行使用省略号</span><br><span class="line">h=d[...,1:]</span><br><span class="line">print(h)</span><br></pre></td></tr></table></figure><h5 id="布尔数组索引"><a href="#布尔数组索引" class="headerlink" title="布尔数组索引"></a>布尔数组索引</h5><p>当输出的结果需要经过布尔运算（如比较运算）时，此时会使用到另一种高级索引方式，即布尔数组索引。</p><p>下面示例返回数组中大于 6 的的所有元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#返回所有大于6的数字组成的数组</span><br><span class="line">import numpy as np</span><br><span class="line">x = np.array([[ 0,  1,  2],[ 3,  4,  5],[ 6,  7,  8],[ 9, 10, 11]])</span><br><span class="line">print (x[x &gt; 6])</span><br></pre></td></tr></table></figure><p>我们可以使用补码运算符来去除 NaN（即非数字元素）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.array([np.nan, 1,2,np.nan,3,4,5])</span><br><span class="line">print(a[~np.isnan(a))</span><br></pre></td></tr></table></figure><p>下面示例，删除数组中整数元素，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.array([1, 2+6j, 5, 3.5+5j])</span><br><span class="line">print( a[np.iscomplex(a)])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> numpy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析三剑客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numpy（一）</title>
      <link href="/post/921b352e.html"/>
      <url>/post/921b352e.html</url>
      
        <content type="html"><![CDATA[<h4 id="NumPy-ndarray对象"><a href="#NumPy-ndarray对象" class="headerlink" title="NumPy ndarray对象"></a>NumPy ndarray对象</h4><p>创建ndarray对象</p><p>通过 NumPy 的内置函数 array() 可以创建 ndarray 对象，其语法格式如下</p><p>numpy.array(object, dtype &#x3D; None, copy &#x3D; True, order &#x3D; None,ndmin &#x3D; 0)</p><p>object表示一个数组序列。<br>dtype可选参数，通过它可以更改数组的数据类型。<br>copy可选参数，表示数组能否被复制，默认是 True。<br>order以哪种内存布局创建数组，有 3 个可选值，分别是 C(行序列)&#x2F;F(列序列)&#x2F;A(默认)。<br>ndim用于指定数组的维度。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import numpy</span><br><span class="line">a=numpy.array([1,2,3])#使用列表构建一维数组</span><br><span class="line">print(a)</span><br><span class="line">print(type(a))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b=numpy.array([[1,2,3],[4,5,6]]) #创建多维数组</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><p>如果要改变数组元素的数据类型，可以使用通过设置 dtype，如下所示：c&#x3D;numpy.array([2,4,6,8],dtype&#x3D;”数据类型名称”)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c=numpy.array([2,4,6,8],dtype=&quot;complex&quot;)</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure><h5 id="ndim查看数组维数"><a href="#ndim查看数组维数" class="headerlink" title="ndim查看数组维数"></a>ndim查看数组维数</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np </span><br><span class="line">arr = np.array([[1, 2, 3, 4], [4, 5, 6, 7], [9, 10, 11, 23]]) </span><br><span class="line">print(arr.ndim) </span><br></pre></td></tr></table></figure><p>也可以使用 ndim 参数创建不同维度的数组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#输出一个二维数组</span><br><span class="line">import numpy as np</span><br><span class="line">a = np.array([1, 2, 3,4,5], ndim = 2)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><h5 id="reshape数组变维"><a href="#reshape数组变维" class="headerlink" title="reshape数组变维"></a>reshape数组变维</h5><p>数组的形状指的是多维数组的行数和列数。Numpy 模块提供 reshape() 函数可以改变多维数组行数和列数，从而达到数组变维的目的。因此数组变维即对数组形状的重塑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np </span><br><span class="line">e = np.array([[1,2],[3,4],[5,6]]) </span><br><span class="line">print(&quot;原数组&quot;,e) </span><br><span class="line">e=e.reshape(2,3) </span><br><span class="line">print(&quot;新数组&quot;,e)  </span><br></pre></td></tr></table></figure><h4 id="NumPy数据类型"><a href="#NumPy数据类型" class="headerlink" title="NumPy数据类型"></a>NumPy数据类型</h4><img src="/post/921b352e/338.png" class title="This is an image"><p>数据类型对象<br>数据类型对象，主要用来描述数组元素的数据类型、大小以及字节顺序。</p><p>语法格式如下：<br>np.dtype(object)</p><p>创建一个 dtype 对象可以使用下列方法：a&#x3D; np.dtype(np.int64)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np </span><br><span class="line">a= np.dtype(np.int64) </span><br><span class="line">print(a)  </span><br></pre></td></tr></table></figure><p>数据类型标识码</p><img src="/post/921b352e/339.png" class title="This is an image"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#创建数据类型score</span><br><span class="line">import numpy as np</span><br><span class="line">dt = np.dtype([(&#x27;score&#x27;,&#x27;i1&#x27;)])</span><br><span class="line">print(dt) </span><br></pre></td></tr></table></figure><p>定义结构化数据</p><p>通常情况下，结构化数据使用字段的形式来描述某个对象的特征。以下示例描述一位老师的姓名、年龄、工资的特征，该结构化数据其包含以下字段：str 字段：nameint 字段：agefloat 字段：salary</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">teacher = np.dtype([(&#x27;name&#x27;,&#x27;S20&#x27;), (&#x27;age&#x27;, &#x27;i1&#x27;), (&#x27;salary&#x27;, &#x27;f4&#x27;)])</span><br><span class="line">#输出结构化数据teacher</span><br><span class="line">print(teacher)</span><br><span class="line">#将其应用于ndarray对象</span><br><span class="line">b = np.array([(&#x27;ycs&#x27;, 32, 6357.50),(&#x27;jxe&#x27;, 28, 6856.80)], dtype = teacher) </span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><h4 id="NumPy数组属性"><a href="#NumPy数组属性" class="headerlink" title="NumPy数组属性"></a>NumPy数组属性</h4><h5 id="ndarray-shape"><a href="#ndarray-shape" class="headerlink" title="ndarray.shape"></a>ndarray.shape</h5><p>shape 属性的返回值一个由数组维度构成的元组，比如 2 行 3 列的二维数组可以表示为(2,3)，该属性可以用来调整数组维度的大小。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.array([[2,4,6],[3,5,7]])</span><br><span class="line">print(a.shape)</span><br></pre></td></tr></table></figure><p>通过 shape 属性修改数组的形状大小： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.array([[1,2,3],[4,5,6]])</span><br><span class="line">a.shape = (3,2)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><h5 id="ndarray-reshape"><a href="#ndarray-reshape" class="headerlink" title="ndarray.reshape()"></a>ndarray.reshape()</h5><p>NumPy 还提供了一个调整数组形状的 reshape() 函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.array([[1,2,3],[4,5,6]])</span><br><span class="line">b = a.reshape(3,2)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><h5 id="ndarray-ndim"><a href="#ndarray-ndim" class="headerlink" title="ndarray.ndim"></a>ndarray.ndim</h5><p>该属性返回的是数组的维数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">#随机生成一个一维数组</span><br><span class="line">c = np.arange(24)</span><br><span class="line">print(c)</span><br><span class="line">print(c.ndim)</span><br><span class="line">#对数组进行变维操作</span><br><span class="line">e = c.reshape(2,4,3)</span><br><span class="line">print(e) </span><br><span class="line">print(e.ndim)</span><br></pre></td></tr></table></figure><h5 id="ndarray-itemsize"><a href="#ndarray-itemsize" class="headerlink" title="ndarray.itemsize"></a>ndarray.itemsize</h5><p>返回数组中每个元素的大小（以字节为单位)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#数据类型为int8，代表1字节</span><br><span class="line">import numpy as np</span><br><span class="line">x = np.array([1,2,3,4,5], dtype = np.int8)</span><br><span class="line">print (x.itemsize)</span><br></pre></td></tr></table></figure><h5 id="ndarray-flags"><a href="#ndarray-flags" class="headerlink" title="ndarray.flags"></a>ndarray.flags</h5><p>返回 ndarray 数组的内存信息，比如 ndarray 数组的存储方式，以及是否是其他数组的副本等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">x = np.array([1,2,3,4,5])</span><br><span class="line">print (x.flags)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> numpy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析三剑客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java</title>
      <link href="/post/7f1ae6d2.html"/>
      <url>/post/7f1ae6d2.html</url>
      
        <content type="html"><![CDATA[<h4 id="Java编程规范（命名规则）"><a href="#Java编程规范（命名规则）" class="headerlink" title="Java编程规范（命名规则）"></a>Java编程规范（命名规则）</h4><p>命名规则包括以下几点</p><p>包 的名称由一个小写字母序列组成。</p><p>类 的名称由大写字母开头，其他字母都由小写的单词组成。</p><p>类的实例 的名称由一个小写字母开头，后面的单词由大写字母开头。</p><p>常量 的名称都大写，并且指出完整含义。</p><p>参数的 名称无其他具体规定。数组的命名使用“类型[] 数组名”的形式。</p><p>另外，编码格式规定如下。</p><p>程序最开始编写导入包和类语句，即 import 语句。import 语句可以有多行，编写完 import 语句后空一行。</p><p>定义 public 类，顶格书写。类的主体左括号“{”不换行书写，右括号“}”顶格书写。</p><p>定义 public 类中的变量，缩进书写。</p><p>定义方法用缩进书写，方法的左括号“{”不换行书写，右括号“}”和方法首行第一个字符对齐。方法体要再次缩进书写，最后一个变量定义和第一个方法定义之间、方法和方法之间最好空一行。</p><p>提示：在单一的语句后有“;”，在一对括号“{}“之外无“;”。</p><p>方法调用名和紧跟在其后的左括号“(”无空格，该左括号和其后的标识符之间无空格。</p><p>多个参数之间的逗号和前一个参数紧靠，与后一个参数空一格。</p><h4 id="Java标识符和关键字"><a href="#Java标识符和关键字" class="headerlink" title="Java标识符和关键字"></a>Java标识符和关键字</h4><h5 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h5><p>Java 中标识符是为方法、变量或其他用户定义项所定义的名称。标识符可以有一个或多个字符。</p><p>标识符的构成规则如下：</p><p>标识符由数字（0<del>9）和字母（A</del>Z 和 a~z）、美元符号（$）、下划线（_）以及 Unicode 字符集中符号大于 0xC0 的所有符号组合构成（各符号之间没有空格）。</p><p>标识符的<strong>第一个</strong>符号为字母、下划线和美元符号，后面可以是任何字母、数字、美元符号或下划线。</p><p>另外，Java 区分大小写</p><p>提示：标识符命名时，切记不能以数字开头，也不能使用任何 Java 关键字作为标识符，而且不能赋予标识符任何标准的方法名。</p><p>标识符分为两类，分别为关键字和用户自定义标识符。</p><p>关键字是有特殊含义的标识符，如 true、false 表示逻辑的真假。</p><p>提示：标识符可以包含关键字，但不能与关键字重名。</p><h5 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h5><p>关键字（或者保留字）是对编译器有特殊意义的固定单词，不能在程序中做其他目的使用。关键字具有专门的意义和用途，和自定义的标识符不同，不能当作一般的标识符来使用</p><h4 id="Java注释：单行、多行和文档注释"><a href="#Java注释：单行、多行和文档注释" class="headerlink" title="Java注释：单行、多行和文档注释"></a>Java注释：单行、多行和文档注释</h4><p>单行注释</p><p>以双斜杠“&#x2F;&#x2F;”标识，只能注释一行内容</p><p>多行注释</p><p>包含在“&#x2F;<em>”和“</em>&#x2F;”之间，能注释很多行的内容。</p><p>注意：多行注释可以嵌套单行注释，但是不能嵌套多行注释和文档注释。</p><p>文档注释</p><p>文档注释以&#x2F;*<em>开头，并以</em>&#x2F;结束，可以通过 Javadoc 生成 API 帮助文档，Java 帮助文档主要用来说明类、成员变量和方法的功能。</p><p>包含在“&#x2F;*<em>”和“</em>&#x2F;”之间，也能注释多行内容，一般用在类、方法和变量上面，用来描述其作用。注释后，鼠标放在类和变量上面会自动显示出我们注释的内容</p><p>文档注释只放在类、接口、成员变量、方法之前，因为 Javadoc 只处理这些地方的文档注释，而忽略其它地方的文档注释。</p><p>API 帮助文档相当于产品说明书，而说明书只需要介绍那些供用户使用的部分，所以 Javadoc 默认只提取 public、protected 修饰的部分。如果要提取 private 修饰的部分，需要使用 -private。</p><p>Javadoc标签</p><p>avadoc 工具可以识别文档注释中的一些特殊标签，这些标签一般以@开头，后跟一个指定的名字，有的也以{@开头，以}结束。</p><p>Javadoc 可以识别的标签如下表所示：</p><img src="/post/7f1ae6d2/365.png" class title="This is an image"><p>对两种标签格式的说明：</p><p>@tag 格式的标签（不被{ }包围的标签）为块标签，只能在主要描述（类注释中对该类的详细说明为主要描述）后面的标签部分（如果块标签放在主要描述的前面，则生成 API 帮助文档时会检测不到主要描述）。<br>{@tag} 格式的标签（由{ }包围的标签）为内联标签，可以放在主要描述中的任何位置或块标签的注释中。</p><p>Javadoc 标签注意事项：</p><p>Javadoc 标签必须从一行的开头开始，否则将被视为普通文本。</p><p>一般具有相同名称的标签放在一起。</p><p>Javadoc 标签区分大小写，代码中对于大小写错误的标签不会发生编译错误，但是在生成 API 帮助文档时会检测不到该注释内容。</p><p>Javadoc命令</p><p>Javadoc 用法格式如下：javadoc [options] [packagenames] [sourcefiles]</p><p>options 表示 Javadoc 命令的选项；<br>packagenames 表示包名；<br>sourcefiles 表示源文件名。</p><p>在 cmd（命令提示符）中输入javadoc -help就可以看到 Javadoc 的用法和选项（前提是安装配置了JDK），下面列举 Javadoc 命令的常用选项：</p><p>下面列举 Javadoc 命令的常用选项：</p><p>-public仅显示 public 类和成员</p><p>-protected显示 protected&#x2F;public 类和成员（默认值）</p><p>-package显示 package&#x2F;protected&#x2F;public 类和成员</p><p>-private显示所有类和成员</p><p>-d <directory>输出文件的目标目录</directory></p><p>-version包含 @version 段</p><p>-author包含 @author 段</p><p>-splitindex将索引分为每个字母对应一个文件</p><p>-windowtitle <text>文档的浏览器窗口标题</text></p><p>文档注释的格式</p><p>在编写文档注释的过程中，有时需要添加 HTML 标签，比如：需要换行时，应该使用<br>，而不是一个回车符；需要分段时，应该使用</p><p>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package test;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* @author 42&lt;br&gt;</span><br><span class="line">*         1232</span><br><span class="line">* @version 14.28.0&lt;br&gt;</span><br><span class="line">*          1.92.04</span><br><span class="line">*/</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(&quot;123123123&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Javadoc 并不是将代码中的文档注释直接复制到帮助文档的 HTML 文件中，而是读取每一行后，删除前面的<em>号及</em>以前的空格再输入到 HTML 文档。</p><p>注释前面的<em>号允许连续使用多个，其效果和使用一个</em>号一样，但多个<em>前不能有其他字符分隔，否则分隔符及后面的</em>号都将作为文档的内容。</p><h4 id="Java常量：Java常量的定义和分类"><a href="#Java常量：Java常量的定义和分类" class="headerlink" title="Java常量：Java常量的定义和分类"></a>Java常量：Java常量的定义和分类</h4><p>在这里要注意常量和常量值是不同的概念，常量值是常量的具体和直观的表现形式，常量是形式化的表现。</p><h5 id="整型常量值"><a href="#整型常量值" class="headerlink" title="整型常量值"></a>整型常量值</h5><p>Java 的整型常量值主要有如下 3 种形式。</p><p>十进制数形式：如 54、-67、0。</p><p>八进制数形式：Java 中的八进制常数的表示以 0 开头，如 0125 表示十进制数 85，-013 表示十进制数 -11。</p><p>十六进制数形式：Java 中的十六进制常数的表示以 0x 或 0X 开头，如 0x100 表示十进制数 256，-0x16 表示十进制数 -22。</p><p>整型（int）常量默认在内存中占 32 位，是具有整数类型的值，当运算过程中所需值超过 32 位长度时，可以把它表示为长整型（long）数值。长整型类型则要在数字后面加 L 或 1， 如 697L，表示一个长整型数，它在内存中占 64 位。</p><h5 id="实型常量值"><a href="#实型常量值" class="headerlink" title="实型常量值"></a>实型常量值</h5><p>Java 的实型常量值主要有如下两种形式。</p><p>十进制数形式：由数字和小数点组成，且必须有小数点，如 12.34、-98.0。科学记数法形式：如 1.75e5 或 32&amp;E3，其中 e 或 E 之前必须有数字，且 e 或 E 之后的数字必须为整数。</p><p>Java 实型常量默认在内存中占 64 位，是具有双精度型（double）的值。如果考虑到需要节省运行时的系统资源，而运算时的数据值取值范围并不大且运算精度要求不太高的情况，可以把它表示为单精度型（float）的数值。</p><p>单精度型数值一般要在该常数后面加 F 或 f，如 69.7f，表示一个 float 型实数，它在内存中占 32 位（取决于系统的版本高低）。</p><h5 id="布尔型常量值"><a href="#布尔型常量值" class="headerlink" title="布尔型常量值"></a>布尔型常量值</h5><p>Java 的布尔型常量只有两个值，即 false（假）和 true（真）。</p><h5 id="字符型和字符串常量值"><a href="#字符型和字符串常量值" class="headerlink" title="字符型和字符串常量值"></a>字符型和字符串常量值</h5><p>Java 的字符型常量值是用单引号引起来的一个字符，如 ‘e’、E’。需要注意的是，<strong>Java 字符串常量值中的单引号和双引号不可混用</strong>。双引号用来表示字符串，像 “11”、”d” 等都是表示单个字符的字符串。</p><p>除了以上所述形式的字符常量值之外，Java 还允许使用一种特殊形式的字符常量值来表示一些难以用一般字符表示的字符，这种特殊形式的字符是以开头的字符序列，称为转义字符。</p><p>Java 中常用的转义字符及其表示的意义</p><p>\ddd<br>1~3 位八进制数所表示的字符</p><p>\uxxxx<br>1~4 位十六进制数所表示的字符</p><p>&#39;<br>单引号字符</p><p>&quot;<br>双引号字符</p><p>\<br>双斜杠字符</p><p>\r<br>回车</p><p>\n<br>换行</p><p>\b<br>退格</p><p>\t<br>横向跳格</p><h5 id="定义常量"><a href="#定义常量" class="headerlink" title="定义常量"></a>定义常量</h5><p>常量不同于常量值，它可以在程序中用符号来代替常量值使用，因此在使用前必须先定义。</p><p><strong>即在声明常量的同时要赋予一个初始值。常量一旦初始化就不可以被修改。</strong></p><p>它的声明格式为：Java 语言使用 final 关键字来定义一个常量</p><p>语法如下所示：final dataType variableName &#x3D; value</p><p>其中，final 是定义常量的关键字，dataType 指明常量的数据类型，variableName 是变量的名称，value 是初始值。</p><p>final 关键字表示最终的，它可以修改很多元素，修饰变量就变成了常量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class HelloWorld &#123;</span><br><span class="line">    // 静态常量</span><br><span class="line">    public static final double PI = 3.14;</span><br><span class="line">    // 声明成员常量</span><br><span class="line">    final int y = 10;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 声明局部常量</span><br><span class="line">        final double x = 3.3;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常量有三种类型：静态常量、成员常量和局部常量。</p><p>代码第 3 行的是声明静态常量，使用在 final 之前 public static 修饰。</p><p>public static 修饰的常量作用域是全局的，不需要创建对象就可以访问它，在类外部访问形式为 HelloWorld. PI。这种常量在编程中使用很多。</p><p>代码第 5 行声明成员常量，作用域类似于成员变量，但不能修改。代码第 9 行声明局部常量，作用域类似于局部变量，但不能修改。</p><p>在定义常量时，需要注意如下内容：</p><p>在定义常量时就需要对该常量进行初始化。final 关键字不仅可以用来修饰基本数据类型的常量，还可以用来修饰对象的引用或者方法。为了与变量区别，常量取名一般都用大写字符。</p><p>当常量被设定后，一般情况下不允许再进行更改，如果更改其值将提示错误</p><h4 id="Java变量的声明和初始化"><a href="#Java变量的声明和初始化" class="headerlink" title="Java变量的声明和初始化"></a>Java变量的声明和初始化</h4><p>Java 语言是强类型（Strongly Typed）语言，强类型包含以下两方面的含义：</p><p>所有的变量必须先声明、后使用。</p><p>指定类型的变量只能接受类型与之匹配的值。</p><p>这意味着每个变量和每个表达式都有一个在编译时就确定的类型。类型限制了一个变量能被赋的值，限制了一个表达式可以产生的值，限制了在这些值上可以进行的操作，并确定了这些操作的含义。</p><h5 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h5><p>在 java 中用户可以通过指定数据类型和标识符来声明变量，其基本语法如下所示：</p><p>DataType identifier;<br>或者DataType identifier&#x3D;value;</p><p>DataType、 identifier 和 value，其具体说明如下：</p><p>DataType：变量类型，如 int、string、 char 和 double 等。<br>identifier：标识符，也叫变量名称。<br>value：声明变量时的值。</p><p>变量标识符的命名规范如下：</p><p>首字符必须是字母、下划线（―）、美元符号（$）或者人民币符号（¥）。标识符由数字（0<del>9）、大写字母（A</del>Z）、小写字母（a~z）、下划线（―）、美元符号（$）、人民币符号（¥）以及所有在十六进制 0xc0 前的 ASCII 码组成。不能把关键字、保留字作为标识符。标识符的长度没有限制。标识符区分大小写。</p><p>如下代码分别声明了 String、boolean 和 int 类型的变量。</p><p>String employee;    &#x2F;&#x2F; String 类型的变量<br>boolean isSave;    &#x2F;&#x2F; boolean 类型的变量<br>int create_at;    &#x2F;&#x2F; int 类型的变量</p><h5 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h5><p>初始化变量是指为变量指定一个明确的初始值。初始化变量有两种方式：一种是声明时直接赋值，一种是先声明、后赋值。</p><p>如下代码分别使用两种方式对变量进行了初始化。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">char usersex=&#x27;女&#x27;;    // 直接赋值</span><br><span class="line"></span><br><span class="line">String username;    // 先声明</span><br><span class="line">username =&quot;琪琪&quot;;    // 后赋值</span><br></pre></td></tr></table></figure><p>另外，多个同类型的变量可以同时定义或者初始化，但是多个变量中间要使用逗号分隔，声明结束时用分号分隔。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String username,address,phone,tel; // 声明多个变量</span><br><span class="line">int num1=12,num2=23,result=35; // 声明并初始化多个变量</span><br></pre></td></tr></table></figure><p>Java 中初始化变量时需要注意以下事项：</p><p>变量是类或者结构中的字段，如果没有显式地初始化，默认状态下创建变量并默认初始值为 0。方法中的变量必须显式地初始化，否则在使用该变量时就会出错。</p><h4 id="Java变量的作用域：静态变量、全局变量和局部变量"><a href="#Java变量的作用域：静态变量、全局变量和局部变量" class="headerlink" title="Java变量的作用域：静态变量、全局变量和局部变量"></a>Java变量的作用域：静态变量、全局变量和局部变量</h4><p>根据作用域的不同，一般将变量分为不同的类型：成员变量和局部变量</p><h5 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h5><p>Java 的成员变量有两种，分别是全局变量和静态变量（类变量）。定义在方法体和语句块之外，不属于任何一个方法，作用域是整个类。</p><img src="/post/7f1ae6d2/366.png" class title="This is an image"><p>假设在一个类中声明了 4 个变量，下面编写一个测试类输出引起变量的值改变的示例代码。</p><p>变量声明代码如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class DataClass &#123;</span><br><span class="line">    String name; // 成员变量、实例变量</span><br><span class="line">    int age; // 成员变量、实例变量</span><br><span class="line"></span><br><span class="line">    static final String website = &quot;C345&quot;; // 成员变量、静态变量(类变量)</span><br><span class="line">    static String URL = &quot;123456789&quot;; // 成员变量、静态变量(类变量)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类代码如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 创建类的对象</span><br><span class="line">        DataClass dc = new DataClass();</span><br><span class="line">        // 对象名.变量名调用实例变量（全局变量）</span><br><span class="line">        System.out.println(dc.name);</span><br><span class="line">        System.out.println(dc.age);</span><br><span class="line"></span><br><span class="line">        // 对象名.变量名调用静态变量（类变量）</span><br><span class="line">        System.out.println(dc.website);</span><br><span class="line">        System.out.println(dc.URL);</span><br><span class="line"></span><br><span class="line">        // 类名.变量名调用静态变量（类变量）</span><br><span class="line">        System.out.println(DataClass.website);</span><br><span class="line">        System.out.println(DataClass.URL);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在本例的第一段代码中定义了 4 个成员变量，由输出结果可以看出，name 和 age 显示系统默认初始化的值，website 和 URL 显示初始化的值。<strong>且用 static final 修饰的变量必须赋予初始值。</strong></p><h5 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h5><p>局部变量是指在方法或者方法代码块中定义的变量，其作用域是其所在的代码块。可分为以下三种：<br>方法参数变量（形参）：在整个方法内有效。方法局部变量（方法内定义）： 从定义这个变量开始到方法结束这一段时间内有效。代码块局部变量（代码块内定义）：从定义这个变量开始到代码块结束这一段时间内有效。</p><p>局部变量在使用前必须被程序员主动初始化值。</p><p>1）方法局部变量</p><p>声明两个局部变量并输出其值，其实现代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Test2 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int a = 7;</span><br><span class="line">        if (5 &gt; 3) &#123;</span><br><span class="line">            int s = 3; // 声明一个 int 类型的局部变量</span><br><span class="line">            System.out.println(&quot;s=&quot; + s);</span><br><span class="line">            System.out.println(&quot;a=&quot; + a);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;a=&quot; + a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述实例中定义了 a 和 s 两个局部变星，其中 int 类型的 a 的作用域是整个 main() 方法，而 int 类型的变量 s 的作用域是 if 语句的代码块内</p><p>如果在 if 方法外调用变量 s，则会报无法解析该变量的错误。</p><p>2）方法参数变量</p><p>作为方法参数声明的变量的作用域是整个方法。</p><p>声明一个方法参数变量，实现代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Test3 &#123;</span><br><span class="line">    public static void testFun(int n) &#123;</span><br><span class="line">        System.out.println(&quot;n=&quot; + n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        testFun(3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述实例中定义了一个 testFun() 方法，该方法中包含一个 int 类型的参数变量 n，其作用域是 testFun() 方法体内。当调用方法时传递进了一个参数 3，因此其输出控制台的 n 值是 3。</p><p>3）代码块局部变量</p><p>代码块局部变量常用于 try catch 代码块中，成为异常处理参数变量。</p><p>异常处理参数变量的作用域是在异常处理块中，该变量是将异常处理参数传递给异常处理块，与方法参数变量类似。</p><p>声明一个异常处理语句，实现代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class Test4 &#123;</span><br><span class="line">    public static void test() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            System.out.println(&quot;Hello!Exception!&quot;);</span><br><span class="line">        &#125; catch (Exception e) &#123; // 异常处理块，参数为 Exception 类型</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述实例中定义了异常处理语句，异常处理块 catch 的参数为 Exception 类型的变量 e，作用域是整个 catch 块。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>帅到没朋友---团队程序设计天梯赛</title>
      <link href="/post/6690b918.html"/>
      <url>/post/6690b918.html</url>
      
        <content type="html"><![CDATA[<p><strong>输入格式：</strong></p><p>输入第一行给出一个正整数N（≤100），是已知朋友圈的个数；随后N行，每行首先给出一个正整数K（≤1000），为朋友圈中的人数，然后列出一个朋友圈内的所有人——为方便起见，每人对应一个ID号，为5位数字（从00000到99999），ID间以空格分隔；之后给出一个正整数M（≤10000），为待查询的人数；随后一行中列出M个待查询的ID，以空格分隔。</p><p><strong>注意</strong>：<br>    没有朋友的人可以是根本没安装“朋友圈”，也可以是只有自己一个人在朋友圈的人。虽然有个别自恋狂会自己把自己反复加进朋友圈，但题目保证所有K超过1的朋友圈里都至少有2个不同的人。</p><p><strong>输出格式：</strong><br>按输入的顺序输出那些帅到没朋友的人。ID间用1个空格分隔，行的首尾不得有多余空格。如果没有人太帅，则输出No one is handsome。</p><p><strong>注意</strong>：同一个人可以被查询多次，但只输出一次。</p><p><strong>输入样例1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">3 11111 22222 55555</span><br><span class="line">2 33333 44444</span><br><span class="line">4 55555 66666 99999 77777</span><br><span class="line">8</span><br><span class="line">55555 44444 10000 88888 22222 11111 23333 88888</span><br></pre></td></tr></table></figure><p><strong>输出样例1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10000 88888 23333</span><br></pre></td></tr></table></figure><p><strong>输入样例2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">3 11111 22222 55555</span><br><span class="line">2 33333 44444</span><br><span class="line">4 55555 66666 99999 77777</span><br><span class="line">4</span><br><span class="line">55555 44444 22222 11111</span><br></pre></td></tr></table></figure><p><strong>输出样例2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No one is handsome</span><br></pre></td></tr></table></figure><p><strong>题解：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a[100000] = &#123;0&#125;; // 因为题给的id是五位数，所以博主这里定义一个10万的数组</span><br><span class="line">    int b[100000] = &#123;0&#125;; // 为了纪录待查找的id出现的次数</span><br><span class="line">    int n,m;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    int count,id,sum = 0;</span><br><span class="line">    for(int i = 0;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;count);</span><br><span class="line">        for(int j = 0;j&lt;count;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%d&quot;,&amp;id);</span><br><span class="line">            if(count&gt;1)//朋友圈中只有一个人的是没有朋友的</span><br><span class="line">                a[id] = 1; //如果有这个id对应位置的值给他改变成1</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;m); // 输入待查找的id个数</span><br><span class="line">    // 判断待查找的id是否在出现过在给出的id中</span><br><span class="line">for(int i = 0; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;id);</span><br><span class="line">if(a[id] == 0)//该id在之前没有进行过输入或他的朋友圈内只有他一人</span><br><span class="line">&#123;</span><br><span class="line">if(b[id]==0&amp;&amp;sum==0)//待查询的id从未被查询过且是第一个准备输出的id</span><br><span class="line">printf(&quot;%05d&quot;,id); // 这里有一个格式输出问题，如果不写的话只能得15分</span><br><span class="line">else if(b[id]==0&amp;&amp;sum&gt;0)//待查询的id从未被查询过且不是第一个准备输出的id</span><br><span class="line">printf(&quot; %05d&quot;,id); // 这里主要是有个输出格式问题</span><br><span class="line">            b[id] = 1;//改变标志变量的值</span><br><span class="line">a[id] = 1;</span><br><span class="line">            sum++;//每有一个符合的，就+1</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 判断是否没有人太帅</span><br><span class="line">if(sum==0)</span><br><span class="line">printf(&quot;No one is handsome\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有不明白的点可以私信博主</p>]]></content>
      
      
      <categories>
          
          <category> c/c++刷题记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A-B---团体程序设计天梯赛</title>
      <link href="/post/cf9951a9.html"/>
      <url>/post/cf9951a9.html</url>
      
        <content type="html"><![CDATA[<p><strong>题：</strong><br>本题要求你计算A−B。不过麻烦的是，A和B都是字符串 —— 即从字符串A中把字符串B所包含的字符全删掉，剩下的字符组成的就是字符串A−B。</p><p><strong>输入格式</strong>：</p><p>输入在2行中先后给出字符串A和B。两字符串的长度都不超过10的4次方，并且保证每个字符串都是由可见的ASCII码和空白字符组成，最后以换行符结束。</p><p><strong>输出格式</strong>：</p><p>在一行中打印出A−B的结果字符串。</p><p><strong>输入样例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I love GPLT!  It&#x27;s a fun game!</span><br><span class="line">aeiou</span><br></pre></td></tr></table></figure><p><strong>输出样例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I lv GPLT!  It&#x27;s  fn gm!</span><br></pre></td></tr></table></figure><p>题解1是博主当时练习的时候写的，只得了15分，欢迎各位小伙伴指正哪里 有问题</p><p>题解2是老师说了一下strchr函数，博主改的，是满分<br><strong>题解1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char A[100000], B[100000];</span><br><span class="line">    int i = 0, j= 0,n; // n的主要作用就是在移动元素的时候记录一下下标</span><br><span class="line">    gets(A);</span><br><span class="line">    gets(B);</span><br><span class="line">    // 这里就是一种遍历的思路（俩个while的使用），当有俩个变量需要比较的时候</span><br><span class="line">    while(B[i] != &#x27;\0&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">        while(A[j] != &#x27;\0&#x27;)</span><br><span class="line">        &#123;</span><br><span class="line">            if(A[j] == B[i])</span><br><span class="line">            &#123;</span><br><span class="line">                n = j;</span><br><span class="line">                while(A[n] != &#x27;\0&#x27;)</span><br><span class="line">                &#123;</span><br><span class="line">                    A[n] = A[n+1];</span><br><span class="line">                    n++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        j = 0;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    puts(A);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>题解2：</strong><br>这里介绍一下strchr函数</p><p>strchr 搜索字符串中字符</p><p>原　　型：char *strchr(const char *s, int c);</p><p>头 文 件：string.h</p><p>返 回 值：指向字符的指针，此字符是s所指向的字符串的前n个字符中第一个遇到的字符c。如果没有找到c，则返回空指针。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">char A[100000],B[100000];</span><br><span class="line">gets(A);</span><br><span class="line">gets(B);</span><br><span class="line">for(int i=0;i&lt;strlen(A);i++)</span><br><span class="line">&#123;</span><br><span class="line">if(strchr(B,A[i])) // 在B字符串中找是否有A[i]字符，如果有就执行continue语句没有就直接输出</span><br><span class="line">continue;</span><br><span class="line">else </span><br><span class="line">printf(&quot;%c&quot;,A[i]);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c/c++刷题记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>N个数求和----团队程序设计天梯赛</title>
      <link href="/post/7f15dfd4.html"/>
      <url>/post/7f15dfd4.html</url>
      
        <content type="html"><![CDATA[<h4 id="L1-009-N个数求和"><a href="#L1-009-N个数求和" class="headerlink" title="L1-009 N个数求和"></a>L1-009 N个数求和</h4><p><strong>题：</strong><br>本题的要求很简单，就是求N个数字的和。麻烦的是，这些数字是以有理数分子&#x2F;分母的形式给出的，你输出的和也必须是有理数的形式。</p><p><strong>输入格式</strong>：<br>输入第一行给出一个正整数N（≤100）。随后一行按格式a1&#x2F;b1 a2&#x2F;b2 …给出N个有理数。题目保证所有分子和分母都在长整型范围内。另外，负数的符号一定出现在分子前面。</p><p><strong>输出格式</strong>：</p><p>输出上述数字和的最简形式 —— 即将结果写成整数部分 分数部分，其中分数部分写成分子&#x2F;分母，要求分子小于分母，且它们没有公因子。如果结果的整数部分为0，则只输出分数部分。</p><p><strong>这里的输出样例就是告诉我们，有三种输出情况，我们都要考虑进去</strong><br>输出样例1：有整数也有分数<br>输出样例2：只有整数<br>输出样例3：只有分数</p><p><strong>输入样例1</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">2/5 4/15 1/30 -2/60 8/3</span><br></pre></td></tr></table></figure><p><strong>输出样例1</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 1/3</span><br></pre></td></tr></table></figure><p><strong>输入样例2</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">4/3 2/3</span><br></pre></td></tr></table></figure><p><strong>输出样例2</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><p><strong>输入样例3</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1/3 -1/6 1/8</span><br></pre></td></tr></table></figure><p><strong>输出样例3</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7/24</span><br></pre></td></tr></table></figure><p>博主这里使用的是c语言写的，如果需要python解答的可以私信博主要<br><strong>题解：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int maxGongYue(long long x,long long y)</span><br><span class="line">&#123;</span><br><span class="line">int temp = (x%y == 0) ? y : maxGongYue(y, x % y); //这里使用三目运算符传出最大公约数</span><br><span class="line">return temp;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">long long a = 0, b = 0,fenzi=0,fenmu=1,maxgy=0;</span><br><span class="line">int n = 0,i=0;</span><br><span class="line">scanf(&quot;%d&quot;, &amp;n);</span><br><span class="line">//进行通分化简运算</span><br><span class="line">do</span><br><span class="line">&#123;</span><br><span class="line">scanf(&quot;%lld/%lld&quot;, &amp;a, &amp;b);</span><br><span class="line">// 这下面三行代码其实就是给俩个分式通分用的</span><br><span class="line">fenzi =fenzi*b;</span><br><span class="line">fenzi = fenzi + a * fenmu;</span><br><span class="line">fenmu =fenmu *b;</span><br><span class="line">maxgy = maxGongYue(fenzi, fenmu);//每一次运算后都进行一次化简，便与运算，控制数据的范围，防止超出数据类型范围</span><br><span class="line">fenzi /= maxgy;</span><br><span class="line">fenmu /= maxgy;</span><br><span class="line">i++;</span><br><span class="line">&#125; while (i &lt; n);</span><br><span class="line">//输出样例2的那种情况</span><br><span class="line">if (fenzi % fenmu == 0)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%lld&quot;, fenzi / fenmu);</span><br><span class="line">&#125;</span><br><span class="line">//输出样例3的那种情况</span><br><span class="line">else if (fenzi &amp;&amp; (fenzi / fenmu == 0))</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%lld/%lld&quot;, fenzi, fenmu);</span><br><span class="line">&#125;</span><br><span class="line">//输出样例1；</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%lld %lld/%lld&quot;, fenzi / fenmu, fenzi%fenmu, fenmu);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>欢迎小伙伴们提供更简单的解题方法</p>]]></content>
      
      
      <categories>
          
          <category> c/c++刷题记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>求整数段和---团体程序设计天梯赛（超详细）</title>
      <link href="/post/973ad644.html"/>
      <url>/post/973ad644.html</url>
      
        <content type="html"><![CDATA[<h4 id="题："><a href="#题：" class="headerlink" title="题："></a>题：</h4><p>给定两个整数A和B，输出从A到B的所有整数以及这些数的和。</p><p><strong>输入格式：</strong><br>输入在一行中给出2个整数A和B，其中−100≤A≤B≤100，其间以空格分隔。</p><p><strong>输出格式：</strong><br>首先顺序输出从A到B的所有整数，每5个数字占一行，每个数字占5个字符宽度，向右对齐。最后在一行中按Sum &#x3D; X的格式输出全部数字的和X。</p><p><strong>输入样例：</strong></p><blockquote><p>-3 8</p></blockquote><p><strong>输出样例：</strong></p><blockquote><p>-3   -2   -1    0    1<br>2    3    4    5    6<br>7    8<br>Sum &#x3D; 30</p></blockquote><h4 id="求解思路"><a href="#求解思路" class="headerlink" title="求解思路"></a>求解思路</h4><p><em><strong>关键步骤在代码中有注释</strong></em></p><ol><li>解决输出每个数字占5个字符宽度，向右对齐</li><li>5个数字占一行的，换行操作</li><li><strong>易被疏漏的一点</strong> 判断输出完A~~B之间的所有数后是否还要换行</li></ol><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int A, B;</span><br><span class="line">    int i, sum =0, num =0;</span><br><span class="line">    scanf(&quot;%d %d&quot;, &amp;A, &amp;B);</span><br><span class="line">    // 按顺序 输出A~~B之间的所有数</span><br><span class="line">    for (i = A; i &lt;= B; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%5d&quot;, i); //每5个数字占一行，每个数字占5个字符宽度，向右对齐， 默认是向右对齐的，如果想要向左对齐就在5d前面加一个负号；</span><br><span class="line">        sum = sum+i;</span><br><span class="line">        num++;</span><br><span class="line">        // 进行换行操作</span><br><span class="line">        if(num % 5 == 0)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;\n&quot;);</span><br><span class="line">            num =0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 判断输出完A~~B之间的所有数后是否还要换行，再输出sum。</span><br><span class="line">    if(num != 0)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;\nSum = %d\n&quot;,sum);</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        printf(&quot;Sum = %d\n&quot;,sum);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c/c++刷题记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>连续因子----团体程序设计天梯赛</title>
      <link href="/post/b69b66fd.html"/>
      <url>/post/b69b66fd.html</url>
      
        <content type="html"><![CDATA[<h3 id="题："><a href="#题：" class="headerlink" title="题："></a>题：</h3><p> 一个正整数 N 的因子中可能存在若干连续的数字。例如 630 可以分解为 3×5×6×7，其中 5、6、7 就是 3 个连续的数字。给定任一正整数 N，要求编写程序求出最长连续因子的个数，并输出最小的连续因子序列。</p><h5 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h5><p>输入在一行中给出一个正整数 N（1&lt;N&lt;231）。</p><h5 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h5><p>首先在第 1 行输出最长连续因子的个数；然后在第 2 行中按 因子1<em>因子2</em>……*因子k 的格式输出最小的连续因子序列，其中因子按递增顺序输出，1 不算在内。</p><h5 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h5><blockquote><p>630</p></blockquote><h5 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h5><blockquote><p>3<br>5*6*7</p></blockquote><h3 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h3><h6 id="代码当中有注释较详细的解析"><a href="#代码当中有注释较详细的解析" class="headerlink" title="代码当中有注释较详细的解析"></a>代码当中有注释较详细的解析</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;math.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int n = 0;</span><br><span class="line">scanf(&quot;%d&quot;, &amp;n);</span><br><span class="line">int i = 0,j=0, a = 0, sum=0,num = 0,temp=0,qidian1=0,qidian2=0;</span><br><span class="line">int x = sqrt(n);// 连续因子当中最大的那一个 一定会小于这个正整数的平方根</span><br><span class="line">//找连续因子</span><br><span class="line">for (i = 2;i &lt;= x;i++)</span><br><span class="line">&#123;</span><br><span class="line">num = 0;// num 是使用来记录 满足条件的连续数的个数 ，每次使用完后要初始化为0 ，</span><br><span class="line">sum = n;</span><br><span class="line">qidian1 = i; //记录最开始连续的是哪一个数</span><br><span class="line">//判断 i 是否满足是连续的</span><br><span class="line">for (j = i;sum%j==0&amp;&amp;sum!=0;j++)</span><br><span class="line">&#123;</span><br><span class="line">sum /= j;</span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line">//筛选最长因子个数</span><br><span class="line">if (num &gt; temp)</span><br><span class="line">&#123;</span><br><span class="line">temp = num;</span><br><span class="line">qidian2 = qidian1; // 记录最长连续因子的 起点</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 判断是否有连续因子</span><br><span class="line">if (temp == 0)</span><br><span class="line">printf(&quot;1\n%d&quot;, n);</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%d\n&quot;, temp);</span><br><span class="line">i = qidian2;</span><br><span class="line">while (i &lt; qidian2 + temp)</span><br><span class="line">&#123;</span><br><span class="line">if (i != qidian2)</span><br><span class="line">printf(&quot;*&quot;);</span><br><span class="line">printf(&quot;%d&quot;, i);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c/c++刷题记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>l1-002打印沙漏------团体程序设计天梯赛</title>
      <link href="/post/c8f1bb7.html"/>
      <url>/post/c8f1bb7.html</url>
      
        <content type="html"><![CDATA[<h1 id="L1-002-打印沙漏"><a href="#L1-002-打印沙漏" class="headerlink" title="L1-002 打印沙漏"></a>L1-002 打印沙漏</h1><p>本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个“*”，要求按下列格式打印.<br><code>*****</code><br><code> ***</code><br> <code> *</code><br><code>***</code><br><code> *****</code><br>所谓“沙漏形状”，是指每行输出奇数个符号；各行符号中心对齐；相邻两行符号数差2；符号数先从大到小顺序递减到1，再从小到大顺序递增；首尾符号数相等。</p><p>给定任意N个符号，不一定能正好组成一个沙漏。要求打印出的沙漏能用掉尽可能多的符号。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入在一行给出1个正整数N（≤1000）和一个符号，中间以空格分隔。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>首先打印出由给定符号组成的最大的沙漏形状，最后在一行中输出剩下没用掉的符号数。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><pre><code>19 *</code></pre><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><p><code>*****</code><br><code> ***</code><br> <code> *</code><br><code>***</code><br><code> *****</code><br><code>2</code></p><p><em><strong>基本原理 都在代码注释里面可以体现</strong></em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="type">char</span> s;</span><br><span class="line">    <span class="type">int</span> left; <span class="comment">//剩下的符号个数</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>; <span class="comment">//每一行要打印符号的个数</span></span><br><span class="line">    <span class="type">int</span> n = <span class="number">1</span>;<span class="comment">//总共能打印的符号个数</span></span><br><span class="line">    <span class="type">int</span> j, k;</span><br><span class="line">    <span class="type">int</span> count;</span><br><span class="line">    <span class="type">int</span> total;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %c&quot;</span>, &amp;num, &amp;s);</span><br><span class="line">    <span class="keyword">while</span> (n &lt;= num &amp;&amp; i &gt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        i = i+<span class="number">2</span>;</span><br><span class="line">        n = n + <span class="number">2</span> * i; </span><br><span class="line">    &#125;</span><br><span class="line">    n = n - <span class="number">2</span> * i;</span><br><span class="line">    i = i - <span class="number">2</span>;</span><br><span class="line">    left = num - n;</span><br><span class="line">    <span class="comment">// 上半部分符号打印，包括1个的哪一行</span></span><br><span class="line">    <span class="keyword">for</span> (j = i; j &gt;= <span class="number">1</span>; j = j - <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">// 判断是否要输出空格，以及输出空格的个数</span></span><br><span class="line">        total = (i - j) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (total) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (total)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                total--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 输出对应行要打印的符号</span></span><br><span class="line">        <span class="keyword">for</span> (count = j; count &gt;= <span class="number">1</span>; count--)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 下半部分符号的打印，从3开始</span></span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">3</span>; k &lt;= i; k = k+<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">// 判断是否要输出空格，以及输出空格的个数</span></span><br><span class="line">        total = (i - k) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (total)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (total)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                total--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (count = k; count &gt;=<span class="number">1</span>; count--)</span><br><span class="line">        &#123;</span><br><span class="line">           </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, left);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c/c++刷题记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c/c++重要基础知识点</title>
      <link href="/post/7ac5b90a.html"/>
      <url>/post/7ac5b90a.html</url>
      
        <content type="html"><![CDATA[<h4 id="C-命名空间（名字空间）详解"><a href="#C-命名空间（名字空间）详解" class="headerlink" title="C++命名空间（名字空间）详解"></a>C++命名空间（名字空间）详解</h4><p>命名冲突问题，C++ 引入了命名空间（Namespace）的概念</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">namespace Li&#123; </span><br><span class="line">    FILE* fp = NULL;</span><br><span class="line">&#125;</span><br><span class="line">namespace Han&#123;  </span><br><span class="line">    FILE* fp = NULL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>namespace 是C++中的关键字，用来定义一个命名空间<br>语法格式为：<br>namespace name{    &#x2F;&#x2F;variables, functions, classes}</p><p>name是命名空间的名字，它里面可以包含变量、函数、类、typedef、#define 等，最后由{ }包围。</p><p>使用变量、函数时要指明它们所在的命名空间。以上面的 fp 变量为例，可以这样来使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Li::fp = fopen(&quot;one.txt&quot;, &quot;r&quot;); </span><br><span class="line">Han::fp = fopen(&quot;two.txt&quot;, &quot;rb+&quot;); </span><br></pre></td></tr></table></figure><p>:: 是一个新符号，称为域解析操作符，在C++中用来指明要使用的命名空间。</p><p>除了直接使用域解析操作符，还可以采用 using 关键字声明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">using Li::fp;</span><br><span class="line">fp = fopen(&quot;one.txt&quot;, &quot;r&quot;);  </span><br><span class="line">Han :: fp = fopen(&quot;two.txt&quot;, &quot;rb+&quot;); </span><br></pre></td></tr></table></figure><p>在代码的开头用using声明了 Li::fp，它的意思是，using 声明以后的程序中如果出现了未指明命名空间的 fp，就使用 Li::fp；但是若要使用小韩定义的 fp，仍然需要 Han::fp。</p><p>using 声明不仅可以针对命名空间中的一个变量，也可以用于声明整个命名空间：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">using namespace Li;</span><br><span class="line">fp = fopen(&quot;one.txt&quot;, &quot;r&quot;);  </span><br><span class="line">Han::fp = fopen(&quot;two.txt&quot;, &quot;rb+&quot;); </span><br></pre></td></tr></table></figure><p>如果命名空间 Li 中还定义了其他的变量，那么同样具有 fp 变量的效果。在 using 声明后，如果有未具体指定命名空间的变量产生了命名冲突，那么默认采用命名空间 Li 中的变量。</p><p>命名空间内部不仅可以声明或定义变量，对于其它能在命名空间以外声明或定义的名称，同样也都能在命名空间内部进行声明或定义，例如类、函数、typedef、#define 等都可以出现在命名空间中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">//将类定义在命名空间中</span><br><span class="line">namespace Diy&#123;</span><br><span class="line">    class Student&#123;</span><br><span class="line">    public:</span><br><span class="line">        char *name;</span><br><span class="line">        int age;</span><br><span class="line">        float score;</span><br><span class="line">    public:</span><br><span class="line">        void say()&#123;</span><br><span class="line">            printf(&quot;%s的年龄是 %d，成绩是 %f\n&quot;, name, age, score);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    Diy::Student stu1;</span><br><span class="line">    stu1.name = &quot;小明&quot;;</span><br><span class="line">    stu1.age = 15;</span><br><span class="line">    stu1.score = 92.5f;</span><br><span class="line">    stu1.say();</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="C-头文件和std命名空间"><a href="#C-头文件和std命名空间" class="headerlink" title="C++头文件和std命名空间"></a>C++头文件和std命名空间</h4><p>和C语言一样，C++ 头文件仍然以.h为后缀，它们所包含的类、函数、宏等都是全局范围的。</p><p>后来 C++ 引入了命名空间的概念，计划重新编写库，将类、函数、宏等都统一纳入一个命名空间，这个命名空间的名字就是std。</p><p>C++ 开发人员想了一个好办法，保留原来的库和头文件，它们在 C++ 中可以继续使用，然后再把原来的库复制一份，在此基础上稍加修改，把类、函数、宏等纳入命名空间 std 下，就成了新版 C++ 标准库。这样共存在了两份功能相似的库，使用了老式 C++ 的程序可以继续使用原来的库，新开发的程序可以使用新版的 C++ 库。</p><p>为了避免头文件重名，<strong>新版 C++ 库也对头文件的命名做了调整，去掉了后缀.h</strong>，所以老式 C++ 的iostream.h变成了iostream，fstream.h变成了fstream。<br>而对于原来C语言的头文件，也采用同样的方法，但在每个名字前还要添加一个c字母，所以C语言的stdio.h变成了cstdio，stdlib.h变成了cstdlib。</p><p>总结的 C++ 头文件的现状：</p><ol><li><p>旧的 C++ 头文件，如 iostream.h、fstream.h 等将会继续被支持，尽管它们不在官方标准中。这些头文件的内容<strong>不在命名空间 std 中</strong>。</p></li><li><p>新的 C++ 头文件，如 iostream、fstream 等包含的基本功能和对应的旧版头文件相似，但头文件的内容在命名空间 std 中。</p></li></ol><p>注意：在标准化的过程中，库中有些部分的细节被修改了，所以旧的头文件和新的头文件不一定完全对应。</p><ol start="3"><li><p>标准C头文件如 stdio.h、stdlib.h 等继续被支持。头文件的内容不在 std 中。</p></li><li><p>具有C库功能的新C++头文件具有如 cstdio、cstdlib 这样的名字。它们提供的内容和相应的旧的C头文件相同，只是内容在 std 中。</p></li></ol><h5 id="使用C-的头文件"><a href="#使用C-的头文件" class="headerlink" title="使用C++的头文件"></a>使用C++的头文件</h5><p>在 main() 函数中声明命名空间 std，它的作用范围就位于 main() 函数内部，如果在其他函数中又用到了 std，就需要重新声明。</p><p>很多教程中都是这样做的，将 std 直接声明在所有函数外部，这样虽然使用方便，但在中大型项目开发中是不被推荐的，这样做增加了命名冲突的风险，我推荐在函数内部声明 std。</p><h5 id="C-输入输出（cin和cout）"><a href="#C-输入输出（cin和cout）" class="headerlink" title="C++输入输出（cin和cout）"></a>C++输入输出（cin和cout）</h5><p>在C++语言中，C语言的这一套输入输出库我们仍然能使用，但是 C++ 又增加了一套新的、更容易使用的输入输出库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int x;</span><br><span class="line">    float y;</span><br><span class="line">    cout&lt;&lt;&quot;Please input an int number:&quot;&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line">    cout&lt;&lt;&quot;The int number is x= &quot;&lt;&lt;x&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;&quot;Please input a float number:&quot;&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;y;</span><br><span class="line">    cout&lt;&lt;&quot;The float number is y= &quot;&lt;&lt;y&lt;&lt;endl;   </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C++ 中的输入与输出可以看做是一连串的数据流，输入即可视为从文件或键盘中输入程序中的一串数据流，而输出则可以视为从程序中输出一连串的数据流到显示屏或文件中。</p><p>在编写 C++ 程序时，如果需要使用输入输出时，则需要包含头文件iostream，它包含了用于输入输出的对象</p><p>cout 和 cin 都是 C++ 的<strong>内置对象，而不是关键字</strong>。C++ 库定义了大量的类（Class），程序员可以使用它们来创建对象，cout 和 cin 就分别是 ostream 和 istream 类的对象，只不过它们是由标准库的开发者提前创建好的，可以直接拿来使用。这种在 C++ 中提前创建好的对象称为内置对象。</p><p>使用 cout 进行输出时需要   &lt;&lt;      运算符</p><p>使用 cin 进行输入时需要    &gt;&gt;  运算符</p><p>这两个运算符可以自行分析所处理的数据类型，因此无需像使用 scanf 和 printf 那样给出格式控制字符串。</p><p>第 6 行代码表示输出”Please input a int number:”这样的一个字符串，以提示用户输入整数，</p><p>endl表示换行，与C语言里的\n作用相同。<br>这段代码中也可以用\n来替代endl，这样就得写作：<br>cout&lt;&lt;”Please input an int number:\n”;</p><p><strong>第 7 行代码表示从标准输入（键盘）中读入一个 int 型的数据并存入到变量 x 中。如果此时用户输入的不是 int 型数据，则会被强制转化为 int 型数据。</strong></p><p>第 8 行代码将输入的整型数据输出。从该语句中我们可以看出 cout 能够连续地输出。</p><p>cin 也是支持对多个变量连续输入的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int x;</span><br><span class="line">    float y;</span><br><span class="line">    cout&lt;&lt;&quot;Please input an int number and a float number:&quot;&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">    cout&lt;&lt;&quot;The int number is x= &quot;&lt;&lt;x&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;&quot;The float number is y= &quot;&lt;&lt;y&lt;&lt;endl;   </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第 7 行代码连续从标准输入中读取一个整型和一个浮点型数字（<strong>默认以空格分隔</strong>），分别存入到 x 和 y 中。输入运算符&gt;&gt;在读入下一个输入项前会忽略前一项后面的空格，所以数字 8 和 7.4 之间要有一个空格，当 cin 读入 8 后忽略空格，接着读取 7.4。</p><h5 id="C-布尔类型（bool）"><a href="#C-布尔类型（bool）" class="headerlink" title="C++布尔类型（bool）"></a>C++布尔类型（bool）</h5><p>在C语言中，关系运算和逻辑运算的结果有两种，真和假：0 表示假，非 0 表示真。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int a, b, flag;</span><br><span class="line">    scanf(&quot;%d %d&quot;, &amp;a, &amp;b);</span><br><span class="line">    flag = a &gt; b; </span><br><span class="line">    printf(&quot;flag = %d\n&quot;, flag);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C语言并没有彻底从语法上支持“真”和“假”，只是用 0 和非 0 来代表。这点在 C++ 中得到了改善<br>C++ 新增了 bool 类型（布尔类型），它一般占用 1 个字节长度。</p><p>bool 类型只有两个取值，true 和 false：true 表示“真”，false 表示“假”。</p><p>bool 是类型名字，也是 C++ 中的关键字，它的用法和 int、char、long 是一样的</p><p>在 C++ 中使用 cout 输出 bool 变量的值时还是用数字 1 和 0 表示，而不是 true 或 false。</p><h4 id="C-new和delete运算符简介"><a href="#C-new和delete运算符简介" class="headerlink" title="C++ new和delete运算符简介"></a>C++ new和delete运算符简介</h4><p>在C语言中，动态分配内存用 malloc() 函数，释放内存用 free() 函数。如下所示：</p><p>int <em>p &#x3D; (int</em>) malloc( sizeof(int) * 10 );  &#x2F;&#x2F;分配10个int型的内存空间<br>free(p);  &#x2F;&#x2F;释放内存</p><p>int *p &#x3D; new int;  &#x2F;&#x2F;分配1个int型的内存空间<br>delete p;  &#x2F;&#x2F;释放内存</p><p>new 操作符会根据后面的数据类型来推断所需空间的大小。</p><p>如果希望分配一组连续的数据，可以使用 new[]：</p><p>int *p &#x3D; new int[10];  &#x2F;&#x2F;分配10个int型的内存空间<br>delete[] p;</p><p>用 new[] 分配的内存需要用 delete[] 释放，它们是一一对应的。</p><h4 id="C-string详解，C-字符串详解"><a href="#C-string详解，C-字符串详解" class="headerlink" title="C++ string详解，C++字符串详解"></a>C++ string详解，C++字符串详解</h4><p>C++ 大大增强了对字符串的支持，除了可以使用C风格的字符串，还可以使用内置的 string 类。string 类处理起字符串来会方便很多，完全可以代替C语言中的字符数组或字符串指针。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    string s1;</span><br><span class="line">    string s2 = &quot;c plus plus&quot;;</span><br><span class="line">    string s3 = s2;</span><br><span class="line">    string s4 (5, &#x27;s&#x27;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变量 s1 只是定义但没有初始化，编译器会将默认值赋给 s1，默认值是””，也即空字符串。</p><p>变量 s2 在定义的同时被初始化为”c plus plus”。与C风格的字符串不同，string 的结尾没有结束标志’\0’。</p><p>变量 s3 在定义的时候直接用 s2 进行初始化，因此 s3 的内容也是”c plus plus”。</p><p>变量 s4 被初始化为由 5 个’s’字符组成的字符串，也就是”sssss”。</p><p>从上面的代码可以看出，string 变量可以直接<strong>通过赋值操作符&#x3D;进行赋值</strong>。<br>string 变量也可以用C风格的字符串进行赋值，例如，s2 是用一个字符串常量进行初始化的，而 s3 则是通过 s2 变量进行初始化的。</p><p>与C风格的字符串不同，当我们需要知道字符串长度时，可以调用 string 类提供的 length() 函数。如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string s = &quot;http://c.biancheng.net&quot;;</span><br><span class="line">int len = s.length();</span><br><span class="line">cout&lt;&lt;len&lt;&lt;endl;</span><br></pre></td></tr></table></figure><p><strong>string 的末尾没有’\0’字符，所以 length() 返回的是字符串的真实长度，而不是长度 +1</strong></p><h6 id="转换为C风格的字符串"><a href="#转换为C风格的字符串" class="headerlink" title="转换为C风格的字符串"></a>转换为C风格的字符串</h6><p>虽然 C++ 提供了 string 类来替代C语言中的字符串，但是在实际编程中，有时候必须要使用C风格的字符串（例如打开文件时的路径）<br>string 类为我们提供了一个转换函数 c_str()，该函数能够将 string 字符串转换为C风格的字符串，并返回该字符串的 const 指针（const char*）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string path = &quot;D:\\demo.txt&quot;;</span><br><span class="line">FILE *fp = fopen(path.c_str(), &quot;rt&quot;);</span><br></pre></td></tr></table></figure><p>为了使用C语言中的 fopen() 函数打开文件，必须将 string 字符串转换为C风格的字符串。</p><h6 id="string-字符串的输入输出"><a href="#string-字符串的输入输出" class="headerlink" title="string 字符串的输入输出"></a>string 字符串的输入输出</h6><p>string 类重载了输入输出运算符，可以像对待普通变量那样对待 string 变量，也就是用&gt;&gt;进行输入，用&lt;&lt;进行输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;s;  //输入字符串</span><br><span class="line">    cout&lt;&lt;s&lt;&lt;endl;  //输出字符串</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="访问字符串中的字符"><a href="#访问字符串中的字符" class="headerlink" title="访问字符串中的字符"></a>访问字符串中的字符</h6><p>string 字符串也可以像C风格的字符串一样按照下标来访问其中的每一个字符。string 字符串的起始下标仍是从 0 开始。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    string s = &quot;1234567890&quot;;</span><br><span class="line">    for(int i=0,len=s.length(); i&lt;len; i++)&#123;</span><br><span class="line">        cout&lt;&lt;s[i]&lt;&lt;&quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    s[5] = &#x27;5&#x27;;</span><br><span class="line">    cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="字符串的拼接"><a href="#字符串的拼接" class="headerlink" title="字符串的拼接"></a>字符串的拼接</h6><p>有了 string 类，可以使用     +  或    +&#x3D;  运算符来直接拼接字符串，非常方便，也不需要使用C语言中的 strcat()、strcpy()、malloc() 等函数来拼接字符串了，不用担心空间不够会溢出了。</p><p>用+来拼接字符串时，运算符的两边可以都是 string 字符串，也可以是一个 string 字符串和一个C风格的字符串，还可以是一个 string 字符串和一个字符数组，或者是一个 string 字符串和一个单独的字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    string s1 = &quot;first &quot;;</span><br><span class="line">    string s2 = &quot;second &quot;;</span><br><span class="line">    char *s3 = &quot;third &quot;;</span><br><span class="line">    char s4[] = &quot;fourth &quot;;</span><br><span class="line">    char ch = &#x27;@&#x27;;</span><br><span class="line"></span><br><span class="line">    string s5 = s1 + s2;</span><br><span class="line">    string s6 = s1 + s3;</span><br><span class="line">    string s7 = s1 + s4;</span><br><span class="line">    string s8 = s1 + ch;</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;s5&lt;&lt;endl&lt;&lt;s6&lt;&lt;endl&lt;&lt;s7&lt;&lt;endl&lt;&lt;s8&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="string-字符串的增删改查"><a href="#string-字符串的增删改查" class="headerlink" title="string 字符串的增删改查"></a>string 字符串的增删改查</h6><p>插入字符串</p><p>insert() 函数可以在 string 字符串中指定的位置插入另一个字符串<br>它的一种原型为：<br>string&amp; insert (size_t pos, const string&amp; str);</p><p>pos 表示要插入的位置，也就是下标；<br>str 表示要插入的字符串，它可以是 string 字符串，也可以是C风格的字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    string s1, s2, s3;</span><br><span class="line">    s1 = s2 = &quot;1234567890&quot;;</span><br><span class="line">    s3 = &quot;aaa&quot;;</span><br><span class="line">    s1.insert(5, s3);</span><br><span class="line">    cout&lt;&lt; s1 &lt;&lt;endl;</span><br><span class="line">    s2.insert(5, &quot;bbb&quot;);</span><br><span class="line">    cout&lt;&lt; s2 &lt;&lt;endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除字符串</p><p>erase() 函数可以删除 string 中的一个子字符串。<br>它的一种原型为：<br>string&amp; erase (size_t pos &#x3D; 0, size_t len &#x3D; npos);</p><p>pos 表示要删除的子字符串的起始下标，len 表示要删除子字符串的长度。<br>如果不指明 len 的话，那么直接删除从 pos 到字符串结束处的所有字符（此时 len &#x3D; str.length - pos）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    string s1, s2, s3;</span><br><span class="line">    s1 = s2 = s3 = &quot;1234567890&quot;;</span><br><span class="line">    s2.erase(5);</span><br><span class="line">    s3.erase(5, 3);</span><br><span class="line">    cout&lt;&lt; s1 &lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt; s2 &lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt; s3 &lt;&lt;endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提取子字符串</p><p>substr() 函数<br>用于从 string 字符串中提取子字符串<br>它的原型为：<br>string substr (size_t pos &#x3D; 0, size_t len &#x3D; npos) const;</p><p>pos 为要提取的子字符串的起始下标，len 为要提取的子字符串的长度。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    string s1 = &quot;first second third&quot;;</span><br><span class="line">    string s2;</span><br><span class="line">    s2 = s1.substr(6, 6);</span><br><span class="line">    cout&lt;&lt; s1 &lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt; s2 &lt;&lt;endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>系统对 substr() 参数的处理和 erase() 类似：如果 pos 越界，会抛出异常；如果 len 越界，会提取从 pos 到字符串结尾处的所有字符。</p><p>字符串查找</p><p>string 类提供了几个与字符串查找有关的函数</p><ol><li>find() 函数</li></ol><p>find() 函数用于在 string 字符串中查找子字符串出现的位置<br>它其中的两种原型为：<br>size_t find (const string&amp; str, size_t pos &#x3D; 0) const;<br>size_t find (const char* s, size_t pos &#x3D; 0) const;</p><p>第一个参数为待查找的子字符串，它可以是 string 字符串，也可以是C风格的字符串。第二个参数为开始查找的位置（下标）；如果不指明，则从第0个字符开始查找。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    string s1 = &quot;first second third&quot;;</span><br><span class="line">    string s2 = &quot;second&quot;;</span><br><span class="line">    int index = s1.find(s2,5);</span><br><span class="line">    if(index &lt; s1.length())</span><br><span class="line">        cout&lt;&lt;&quot;Found at index : &quot;&lt;&lt; index &lt;&lt;endl;</span><br><span class="line">    else</span><br><span class="line">        cout&lt;&lt;&quot;Not found&quot;&lt;&lt;endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>find() 函数最终返回的是子字符串第一次出现在字符串中的起始下标。<br>本例最终是在下标6处找到了 s2 字符串。如果没有查找到子字符串，那么会返回一个无穷大值 4294967295。</p><ol start="2"><li>rfind() 函数</li></ol><p>rfind() 和 find() 很类似，同样是在字符串中查找子字符串，不同的是 find() 函数从第二个参数开始往后查找，而 rfind() 函数则最多查找到第二个参数处，如果到了第二个参数所指定的下标还没有找到子字符串，则返回一个无穷大值4294967295。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    string s1 = &quot;first second third&quot;;</span><br><span class="line">    string s2 = &quot;second&quot;;</span><br><span class="line">    int index = s1.rfind(s2,6);</span><br><span class="line">    if(index &lt; s1.length())</span><br><span class="line">        cout&lt;&lt;&quot;Found at index : &quot;&lt;&lt; index &lt;&lt;endl;</span><br><span class="line">    else</span><br><span class="line">        cout&lt;&lt;&quot;Not found&quot;&lt;&lt;endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>find_first_of() 函数</li></ol><p>find_first_of() 函数用于查找子字符串和字符串共同具有的字符在字符串中首次出现的位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    string s1 = &quot;first second second third&quot;;</span><br><span class="line">    string s2 = &quot;asecond&quot;;</span><br><span class="line">    int index = s1.find_first_of(s2);</span><br><span class="line">    if(index &lt; s1.length())</span><br><span class="line">        cout&lt;&lt;&quot;Found at index : &quot;&lt;&lt; index &lt;&lt;endl;</span><br><span class="line">    else</span><br><span class="line">        cout&lt;&lt;&quot;Not found&quot;&lt;&lt;endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="C-引用"><a href="#C-引用" class="headerlink" title="C++引用"></a>C++引用</h4><p>参数的传递本质上是一次赋值的过程，赋值就是对内存进行拷贝。所谓内存拷贝，是指将一块内存上的数据复制到另一块内存上。对于像 char、bool、int、float 等基本类型的数据，它们占用的内存往往只有几个字节，对它们进行内存拷贝非常快速。而数组、结构体、对象是一系列数据的集合，数据的数量没有限制，可能很少，也可能成千上万，对它们进行频繁的内存拷贝可能会消耗很多时间，拖慢程序的执行效率。</p><p>在 C++ 中，我们有了一种比指针更加便捷的传递聚合类型数据的方式，那就是引用</p><p>引用可以看做是数据的一个别名，通过这个别名和原来的名字都能够找到这份数据。</p><p>引用类似于 Windows 中的快捷方式，一个可执行程序可以有多个快捷方式，通过这些快捷方式和可执行程序本身都能够运行程序</p><p>引用的定义方式类似于指针，只是用&amp;取代了*，语法格式为：type &amp;name &#x3D; data;</p><p>type 是被引用的数据的类型，name 是引用的名称，data 是被引用的数据。<br><strong>引用必须在定义的同时初始化</strong>，并且以后也要从一而终，不能再引用其它数据，这有点类似于常量（const 变量）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int a = 99;</span><br><span class="line">    int &amp;r = a;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; &quot;, &quot; &lt;&lt; r &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &amp;a &lt;&lt; &quot;, &quot; &lt;&lt; &amp;r &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以说变量 r 是变量 a 的另一个名字。从输出结果可以看出，a 和 r 的地址一样，都是0x28ff44；或者说地址为0x28ff44的内存有两个名字，a 和 r，想要访问该内存上的数据时，使用哪个名字都行。</p><p>注意，引用在定义时需要添加&amp;，在使用时不能添加&amp;，使用时添加&amp;表示取地址。了这两种用法，&amp;还可以表示位运算中的与运算。</p><p>由于引用 r 和原始变量 a 都是指向同一地址，所以通过引用也可以修改原始变量中所存储的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int a = 99;</span><br><span class="line">    int &amp;r = a;</span><br><span class="line">    r = 47;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; &quot;, &quot; &lt;&lt; r &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>引用作为函数参数</strong></p><p>在定义或声明函数时，我们可以将函数的形参指定为引用的形式，这样在调用函数时就会将实参和形参绑定在一起，让它们都指代同一份数据。如此一来，如果在函数体中修改了形参的数据，那么实参的数据也会被修改，从而拥有“在函数内部影响函数外部数据”的效果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void swap1(int a, int b);</span><br><span class="line">void swap2(int *p1, int *p2);</span><br><span class="line">void swap3(int &amp;r1, int &amp;r2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int num1, num2;</span><br><span class="line">    cout &lt;&lt; &quot;Input two integers: &quot;;</span><br><span class="line">    cin &gt;&gt; num1 &gt;&gt; num2;</span><br><span class="line">    swap1(num1, num2);</span><br><span class="line">    cout &lt;&lt; num1 &lt;&lt; &quot; &quot; &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; &quot;Input two integers: &quot;;</span><br><span class="line">    cin &gt;&gt; num1 &gt;&gt; num2;</span><br><span class="line">    swap2(&amp;num1, &amp;num2);</span><br><span class="line">    cout &lt;&lt; num1 &lt;&lt; &quot; &quot; &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; &quot;Input two integers: &quot;;</span><br><span class="line">    cin &gt;&gt; num1 &gt;&gt; num2;</span><br><span class="line">    swap3(num1, num2);</span><br><span class="line">    cout &lt;&lt; num1 &lt;&lt; &quot; &quot; &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//直接传递参数内容</span><br><span class="line">void swap1(int a, int b) &#123;</span><br><span class="line">    int temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//传递指针</span><br><span class="line">void swap2(int *p1, int *p2) &#123;</span><br><span class="line">    int temp = *p1;</span><br><span class="line">    *p1 = *p2;</span><br><span class="line">    *p2 = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//按引用传参</span><br><span class="line">void swap3(int &amp;r1, int &amp;r2) &#123;</span><br><span class="line">    int temp = r1;</span><br><span class="line">    r1 = r2;</span><br><span class="line">    r2 = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三种交换变量的值的方法：</p><ol><li><p>swap1() 直接传递参数的内容，不能达到交换两个数的值的目的。对于 swap1() 来说，a、b 是形参，是作用范围仅限于函数内部的局部变量，它们有自己独立的内存，和 num1、num2 指代的数据不一样。调用函数时分别将 num1、num2 的值传递给 a、b，此后 num1、num2 和 a、b 再无任何关系，在 swap1() 内部修改 a、b 的值不会影响函数外部的 num1、num2，更不会改变 num1、num2 的值。</p></li><li><p>swap2() 传递的是指针，能够达到交换两个数的值的目的。调用函数时，分别将 num1、num2 的指针传递给 p1、p2，此后 p1、p2 指向 a、b 所代表的数据，在函数内部可以通过指针间接地修改 a、b 的值。我们在《C语言指针变量作为函数参数》中也对比过第 1)、2) 中方式的区别。</p></li><li><p>swap3() 是按引用传递，能够达到交换两个数的值的目的。调用函数时，分别将 r1、r2 绑定到 num1、num2 所指代的数据，此后 r1 和 num1、r2 和 num2 就都代表同一份数据了，通过 r1 修改数据后会影响 num1，通过 r2 修改数据后也会影响 num2。</p></li></ol><p>从以上代码的编写中可以发现，按引用传参在使用形式上比指针更加直观。在以后的 C++ 编程中，我鼓励读者大量使用引用，它一般可以代替指针（当然指针在C++中也不可或缺），C++ 标准库也是这样做的。</p><p>C++引用作为函数返回值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int &amp;plus10(int &amp;r) &#123;</span><br><span class="line">    r += 10;</span><br><span class="line">    return r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int num1 = 10;</span><br><span class="line">    int num2 = plus10(num1);</span><br><span class="line">    cout &lt;&lt; num1 &lt;&lt; &quot; &quot; &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在将引用作为函数返回值时应该注意一个小问题，就是不能返回局部数据（例如局部变量、局部对象、局部数组等）的引用，因为当函数调用完成后局部数据就会被销毁，有可能在下次使用时数据就不存在了，C++ 编译器检测到该行为时也会给出警告。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int &amp;plus10(int &amp;r) &#123;</span><br><span class="line">    int m = r + 10;</span><br><span class="line">    return m;  //返回局部数据的引用</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int num1 = 10;</span><br><span class="line">    int num2 = plus10(num1);</span><br><span class="line">    cout &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line">    int &amp;num3 = plus10(num1);</span><br><span class="line">    int &amp;num4 = plus10(num3);</span><br><span class="line">    cout &lt;&lt; num3 &lt;&lt; &quot; &quot; &lt;&lt; num4 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>plus10() 返回一个对局部变量 m 的引用，这是导致运行结果非常怪异的根源，因为函数是在栈上运行的，并且运行结束后会放弃对所有局部数据的管理权，后面的函数调用会覆盖前面函数的局部数据。本例中，第二次调用 plus10() 会覆盖第一次调用 plus10() 所产生的局部数据，第三次调用 plus10() 会覆盖第二次调用 plus10() 所产生的局部数据。</p>]]></content>
      
      
      <categories>
          
          <category> c/c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>l1-002-打印沙漏（python版）</title>
      <link href="/post/609e352d.html"/>
      <url>/post/609e352d.html</url>
      
        <content type="html"><![CDATA[<p>博主之前刷题都是使用的c&#x2F;c++去的，但是当我看得到python会就改成使用python刷题了。但是python刷题有些在网上没有很好的答案 ，所以这里博主就准备自己写一个专栏，就专门用来记录使用python刷的题（难度在中等以上），欢迎其他小伙伴一起交流。</p><p><strong>这里因为使用的是python所以大家一定要注意那个时间限制</strong></p><h4 id="这下面是题"><a href="#这下面是题" class="headerlink" title="这下面是题"></a>这下面是题</h4><p>本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个“*”，要求按下列格式打印</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*****</span><br><span class="line"> ***</span><br><span class="line">  *</span><br><span class="line"> ***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><p>所谓“沙漏形状”，是指每行输出奇数个符号；各行符号中心对齐；相邻两行符号数差2；符号数先从大到小顺序递减到1，再从小到大顺序递增；首尾符号数相等。</p><p>给定任意N个符号，不一定能正好组成一个沙漏。要求打印出的沙漏能用掉尽可能多的符号。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入在一行给出1个正整数N（≤1000）和一个符号，中间以空格分隔。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>首先打印出由给定符号组成的最大的沙漏形状，最后在一行中输出剩下没用掉的符号数。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">19 *</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*****</span><br><span class="line"> ***</span><br><span class="line">  *</span><br><span class="line"> ***</span><br><span class="line">*****</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>代码长度限制</p><p>16 KB</p><p>时间限制</p><p>400 ms</p><p>内存限制</p><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>解释一下里面的关键步骤</p><ol><li>这里我用的是等差数列的办法确定层数的，应该还有其他的方法。</li></ol><img src="/post/609e352d/1.png" class title="This is an image"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#确定层数</span><br><span class="line">while True:    </span><br><span class="line">    if a*a*2-1&lt;= n:</span><br><span class="line">        a +=1</span><br><span class="line">    elif a*a*2-1&gt; n:</span><br><span class="line">        a = a-1</span><br><span class="line">        break</span><br></pre></td></tr></table></figure><ol start="2"><li><p>这里使用一个count 记录层数因为在打印正三角的时候会用到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#记录层数</span><br><span class="line">count =a</span><br></pre></td></tr></table></figure></li><li><p>这个j的作用是记录每一行一个输出的空格数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">j = 2*count-1</span><br></pre></td></tr></table></figure></li><li><p>使用了rjust函数 来填充空格，如果不使用的话，也可以使用c&#x2F;c++的那种方法，就是不使用的。</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(f.rjust(j))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">str1 = input().split()</span><br><span class="line">n = int(str1[0])</span><br><span class="line">s = str1[1]</span><br><span class="line">a = 1</span><br><span class="line">#确定层数</span><br><span class="line">while True:    </span><br><span class="line">    if a*a*2-1&lt;= n:</span><br><span class="line">        a +=1</span><br><span class="line">    elif a*a*2-1&gt; n:</span><br><span class="line">        a = a-1</span><br><span class="line">        break</span><br><span class="line">#记录层数</span><br><span class="line">count =a</span><br><span class="line">#为输出空格数做准备</span><br><span class="line">j = 2*count-1</span><br><span class="line"># 如果只给的个数 小于2</span><br><span class="line">if n &lt;=1:</span><br><span class="line">    print(s*n)</span><br><span class="line">    print(n-a)</span><br><span class="line"># </span><br><span class="line">else:</span><br><span class="line">    # 打印倒三角</span><br><span class="line">    while True:</span><br><span class="line">        f=s*(2*a-1)</span><br><span class="line">        print(f.rjust(j))</span><br><span class="line">        a=a-1</span><br><span class="line">        if a==0:</span><br><span class="line">            break</span><br><span class="line">        j=j-1</span><br><span class="line">    c =2</span><br><span class="line">    #打印正三角</span><br><span class="line">    while True:</span><br><span class="line">        if count&lt;2:</span><br><span class="line">            break</span><br><span class="line">        else:</span><br><span class="line">            j=j+1</span><br><span class="line">            g=s*(2*c-1)</span><br><span class="line">            print(g.rjust(j))</span><br><span class="line">            c=c+1</span><br><span class="line">            if c&gt;count:</span><br><span class="line">                break</span><br><span class="line">    print(n - (count*count*2-1))</span><br></pre></td></tr></table></figure><p>这里再给一个[lucky lures]<a href="https://blog.csdn.net/weixin_43862765?type=blog)%E7%BB%99%E7%9A%84%E7%AD%94%E6%A1%88%E3%80%82">https://blog.csdn.net/weixin_43862765?type=blog)给的答案。</a></p><p>他的答案里面给的注解非常详细，有不理解的小伙伴们可以滴滴博主</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> # 获取到数字和字符</span><br><span class="line">lst = input().split()</span><br><span class="line">num,char = lst</span><br><span class="line"></span><br><span class="line"># 获取打印最大行数</span><br><span class="line">num = int(num)</span><br><span class="line">total = 1</span><br><span class="line">if num == 1:</span><br><span class="line">print(char)</span><br><span class="line"># 没用到的数字个数</span><br><span class="line">print(num - total)</span><br><span class="line">else:</span><br><span class="line">i = 1</span><br><span class="line">while total &lt;= num:</span><br><span class="line">i += 2</span><br><span class="line">total += 2*i</span><br><span class="line"> # 最终行数和没用到的字符数</span><br><span class="line">total -= 2*i</span><br><span class="line">i -= 2</span><br><span class="line"># 打印上三角形部分</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">行数 字符数 左半部分空格数</span><br><span class="line">1 5 0</span><br><span class="line">2 3 1</span><br><span class="line">3 1 2</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"># 表空格数 0 1 2，也能用作行数</span><br><span class="line">j = i // 2</span><br><span class="line">for k in range(j+1):</span><br><span class="line">print(&quot; &quot;*k,end=&quot;&quot;)</span><br><span class="line">print(char *(i - 2 *k))</span><br><span class="line"># 打印下三角形部分</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">行数 字符数 左半部分空格数</span><br><span class="line">4 3 1</span><br><span class="line">5 5 0</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">for j in range(1,i+1,2):</span><br><span class="line">if j == 1:</span><br><span class="line">continue</span><br><span class="line">print(&quot; &quot;*((i - j) // 2),end=&quot;&quot;)</span><br><span class="line">print(char*j)</span><br><span class="line">print(num - total)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python刷题集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人爱好</title>
      <link href="/post/bb328bf0.html"/>
      <url>/post/bb328bf0.html</url>
      
        <content type="html"><![CDATA[<h3 id="文"><a href="#文" class="headerlink" title="文"></a>文</h3><h4 id="凤求凰"><a href="#凤求凰" class="headerlink" title="凤求凰"></a>凤求凰</h4><p><strong>有一美人兮，见之不忘。</strong></p><p><strong>一日不见兮，思之如狂。</strong></p><p>凤飞翱翔兮，四海求凰。</p><p>无奈佳人兮，不在东墙。</p><p>将琴代语兮，聊写衷肠。</p><p>何时见许兮，慰我彷徨。</p><p>愿言配德兮，携手相将。</p><p>不得於飞兮，使我沦亡。 </p><p>凤兮凤兮归故乡，遨游四海求其凰。</p><p>时未遇兮无所将，何悟今兮升斯堂！</p><p>有艳淑女在闺房，室迩人遐毒我肠。</p><p>何缘交颈为鸳鸯，胡颉颃兮共翱翔！</p><p>凰兮凰兮从我栖，得托孳尾永为妃。</p><p>交情通意心和谐，中夜相从知者谁？</p><p>双翼俱起翻高飞，无感我思使余悲。</p><p><strong>译文</strong></p><p><strong>其一</strong></p><p>有位俊秀漂亮的女子啊，我见了她的容貌就难以忘怀。</p><p>我如果一天见不到她啊，心中牵念得像是要发狂一般。</p><p>我就像高飞盘旋的凤鸟，在天下各处苦苦寻觅着凰鸟。</p><p>可惜那个娴静的美人啊，没有居住在我那东墙的附近。</p><p>我以琴声替代心中情语，姑且描写我内心衷切的情意。</p><p>什么时候可以允诺婚事，慰藉我往返徘徊的相思之情？</p><p>望我的德行能与你相配，与你携手同在而成百年好合。</p><p>无法比翼偕飞的结果啊，令我沦陷於这情愁而欲丧亡。</p><p><strong>其二</strong></p><p>凤鸟啊凤鸟啊回到了家乡，行踪无定游览天下寻求心中凰鸟。</p><p>未遇凰鸟之时啊不知所往，怎能悟解今日登门后心中之所感！</p><p>有美丽娴静的女子在居室，居处虽近人却远而残虐我的心肠。</p><p>如何能做恩爱的交颈鸳鸯，使我这凤鸟与你这凰鸟一同翔游！</p><p>凰鸟啊凰鸟啊愿你我相依，共同哺育生子并永远做我的配偶。</p><p>情投意合而两心和睦谐顺，半夜与我互相追随又有谁能知晓？</p><p>展开双翼一起远走而高飞，徒然为你感念相思而使我心悲伤。</p><p>这个太惊艳了，高中的时候第一次读到这个吧作品，就喜欢上了。</p><p>还有就是，引起了我对司马相如的兴趣。</p><p>当时看完司马相如的故事，第一句，就是 kao 这个货tmd的太牛逼了</p><h4 id="美人赋"><a href="#美人赋" class="headerlink" title="美人赋"></a>美人赋</h4><p>司马相如，美丽闲都，游于梁王，梁王悦之。邹阳谮之于王曰：“相如美则美矣，然服色容冶，妖丽不忠，将欲媚辞取悦，游王后宫，王不察之乎？”王问相如曰：“子好色乎？”相如曰：“臣不好色也。”王曰：“子不好色，何若孔墨乎？”<strong>相如曰：“古之避色，孔墨之徒，闻齐馈女而遐逝，望朝歌而回车。譬犹防火水中，避溺山隅。此乃未见其可欲，何以明不好色乎？</strong>若臣者，少长西土，鳏处独居，室宇辽廓，莫与为娱。<strong>臣之东邻，有一女子，云发丰艳，蛾眉皓齿，颜盛色茂，景曜光起</strong>（我东边的邻居，有一个姑娘，如云卷浓发似的，体态丰满，细长的眉毛，洁白的牙齿。漂亮的容貌，真是光艳动人）。恒翘翘而西顾，欲留臣而共止。登垣而望臣，三年于兹矣，臣弃而不许。窃慕大王之高义，命驾东来，途出郑、卫，道由桑中，朝发溱、洧，暮宿上宫。上宫闲馆，寂寞云虚，门阁昼掩，暧若神居。臣排其户而造其室，芳香芬烈，黼帐高张。<strong>有女独处，婉然在床。奇葩逸丽，淑质艳光</strong>。睹臣迁延，微笑而言曰：‘上客何国之公子？所从来无乃远乎？’遂设旨酒，进鸣琴。臣遂抚琴，为幽兰白雪之曲。女乃歌曰：‘独处室兮廓无依，思佳人兮情伤悲。有美人兮来何迟？日既暮兮华色衰。敢托身兮长自思。’<strong>玉钗挂臣冠，罗袖拂臣衣</strong>。时日西夕，玄阴晦冥，流风惨冽，素雪飘零，闲房寂谧，不闻人声。于是寝具既陈，服玩珍奇，金鉔薰香，黼帐低垂。裀褥重陈，角枕横施。女乃驰其上服，表其亵衣。皓体呈露，弱骨丰肌。时来亲臣，柔滑如脂。臣乃脉定于内，心正于怀，信誓旦旦，秉志不回。翻然高举，与彼长辞。”</p><p>这小子 娶了卓文君后，当上官了，好一阵风光，到处沾花惹草，还在这里说自己不好女色。</p><p>部分注解（这里的基本上是博主不知道的一些）</p><ol><li>闲都：文雅美好。</li><li>谮：说坏话</li><li>服色容冶：服饰华丽</li><li>游：出入</li><li>恒：经常</li><li>排：推开</li><li>造：进入</li><li>闻齐馈（kuì）女而遐逝：《<a href="https://baike.baidu.com/item/%E8%AE%BA%E8%AF%AD/372830?fromModule=lemma_inlink">论语</a>·微子》：“齐人归（馈）女乐，季桓子受之，三日不朝，孔子行。”《史记·孔子世家》谓孔子由大司寇摄行相事，齐国怕鲁国因此强大，送美女良马给鲁君，季桓子出面受礼，鲁君由此怠于政事，孔子离职去鲁至卫。</li><li>望朝（zhāo）歌而回车：朝歌，商朝都城。商纣王在朝歌淫乐导致身死国亡。《淮南子·说山训》：“墨子非乐，不入朝歌之邑。”今《<a href="https://baike.baidu.com/item/%E5%A2%A8%E5%AD%90/245?fromModule=lemma_inlink">墨子</a>》无此内容。</li><li>鳏（guān）：无妻。辽廓：宽广的样子。</li><li>翘翘：仰首。</li><li>郑、卫：西周至春秋的两个诸侯国。</li><li>溱（zhēn）、洧（wěi）：二水名。在郑国（今河南境内）。</li><li>上宫：《诗经·<a href="https://baike.baidu.com/item/%E9%84%98%E9%A3%8E%C2%B7%E6%A1%91%E4%B8%AD/19671472?fromModule=lemma_inlink">鄘风·桑中</a>》：“期我乎桑中，要我乎上宫。”取以代指淫乐之地。</li><li>云虚：云雾空中。言其寂静。</li><li>暧（ài）：幽暗不明。</li><li>黼（fǔ）：帐幔。</li><li>迁延：拖延，迟疑。</li><li>廓：空。</li><li>玄阴：冬气。</li><li>谧：静。</li><li>金鉔（zā）：金属香炉，以机环扣合，成球形，能旋转滚动而其体恒平。</li><li>亵（xiè）衣：内衣。</li><li>脉定：血脉稳定，平静不激动。</li><li>秉：持，守。</li></ol><p>这是百度上对这首赋的一个背景介绍</p><p>《美人赋》是西汉辞赋家<a href="https://baike.baidu.com/item/%E5%8F%B8%E9%A9%AC%E7%9B%B8%E5%A6%82/1112941?fromModule=lemma_inlink">司马相如</a>创作的一篇赋。此赋开头假设自己（第一人称）受诽谤，引出下文自己不好色，而且用古代圣贤作衬托，重点写赴梁途中的艳遇，再次突出自己不好色，从而表现作者坚守高洁品格的思想。全赋语言清丽华妙，调动多种感官来完成对美女的铺写，在艺术手法上颇有独到之处。</p><h5 id="典故"><a href="#典故" class="headerlink" title="典故"></a>典故</h5><h5 id="琴挑文君"><a href="#琴挑文君" class="headerlink" title="琴挑文君"></a>琴挑文君</h5><h5 id="犬子由来"><a href="#犬子由来" class="headerlink" title="犬子由来"></a>犬子由来</h5><p>据太史公《<a href="https://baike.baidu.com/item/%E5%8F%B2%E8%AE%B0?fromModule=lemma_inlink">史记</a>》的记载，司马相如“少时好读书，学击剑，故其亲名之曰“犬子”。也就是说“犬子”其实是他的乳名，或者名字。就像“二毛”、“小胖”之类，难登大雅之堂。他长大后，也觉得名字不好听，加上又仰慕蔺相如的为人，自己便更名为相如。 [11] </p><p>最开始，“犬子”之称，其实并无小名之意，只是司马相如的父母为了小儿好养活，便特意选一个低贱的字词为之命名，以远离鬼魅，但因为司马相如长大后自己改了名字，“犬子”才成了小名。</p><h4 id="白头吟"><a href="#白头吟" class="headerlink" title="白头吟"></a>白头吟</h4><p>皑如山上雪，皎若云间月。</p><p>闻君有两意，故来相决绝。</p><p>今日斗酒会，明旦沟水头。</p><p>躞蹀御沟上，沟水东西流。</p><p>凄凄复凄凄，嫁娶不须啼。</p><p><strong>愿得一心人，白头不相离。</strong></p><p>竹竿何嫋嫋，鱼尾何簁簁！</p><p><strong>男儿重意气，何用钱刀为</strong></p><p><strong>译文</strong></p><p>洁白犹如山上雪，纯洁就像云间月。</p><p>听说你已生二心，所以来与你决绝。</p><p>今日相会饮斗酒，明日沟边两分别。</p><p>小步徘徊御沟上，沟水东西在流淌。</p><p>孤寂凄凉又悲伤，我嫁你娶莫哭嚷。</p><p>只愿诚得一心人，白头到老不相忘。</p><p>竹竿柔弱有多长，鱼尾摇动多欢畅！</p><p>男儿本应重情义，为何恃富将我忘？</p><h4 id="诀别书"><a href="#诀别书" class="headerlink" title="诀别书"></a>诀别书</h4><p>“春华竞芳，五色凌素，<strong>琴尚在御，而新声代故</strong>！</p><p><strong>锦水有鸳，汉宫有木，</strong>彼物而新，嗟世之人兮，瞀于淫而不悟！</p><p><strong>朱弦断，明镜缺，朝露晞，芳时歇，白头吟，伤离别，努力加餐勿念妾，锦水汤汤，与君长诀</strong>！”</p><p>这个译文，有点意思，哈哈</p><p><strong>译文</strong></p><p>春天百花盛开,争奇斗艳,绚烂的色彩掩盖了素洁的颜色.</p><p>琴声依旧在奏响,但已经不是原来的人在弹奏了.</p><p>锦江中有相伴游泳的鸳鸯，汉宫中有<a href="https://baike.baidu.com/item/%E4%BA%A4%E6%8F%B4?fromModule=lemma_inlink">交援</a>伸展的枝条。</p><p>他们都不曾离弃伴侣。</p><p>慨叹世上的人，却迷惑于美色，喜新厌旧。</p><p>朱弦断，知音绝。</p><p>明镜缺，夫妻分。</p><p>朝露晞，缘分尽。</p><p>芳时歇，人分离。</p><p>白头吟，伤离别。</p><p>希望您吃的好好的不要挂念我。</p><p>对着浩浩荡荡的锦水发誓，从今以后和你永远诀别。</p><p>最后几句简直绝了</p><h4 id="兰亭集序"><a href="#兰亭集序" class="headerlink" title="兰亭集序"></a>兰亭集序</h4><p>永和九年，岁在癸丑，暮春之初，会于会稽山阴之兰亭，修禊事也。群贤毕至，少长咸集。此地有崇山峻岭，茂林修竹，又有清流激湍，映带左右。引以为流觞曲水，列坐其次。虽无丝竹管弦之盛，一觞一咏，亦足以畅叙幽情。</p><p>是日也，天朗气清，惠风和畅。仰观宇宙之大，俯察品类之盛，所以游目骋怀，足以极视听之娱，信可乐也。</p><p>夫人之相与，俯仰一世。或取诸怀抱，悟言一室之内；或因寄所托，放浪形骸之外。虽趣舍万殊，静躁不同，当其欣于所遇，暂得于己， 快（怏）然自足，（曾 [1] ）不知老之将至。及其所之既倦，情随事迁，感慨系之矣。向之所欣，俯仰之间，已为陈迹，犹不能不以之兴怀。况修短随化，终期于尽。古人云：“死生亦大矣！”岂不痛哉！</p><p>每览昔人兴感之由，若合一契，未尝不临文嗟悼，不能喻之于怀。固知一死生为虚诞，齐彭殇为妄作。后之视今，亦犹今之视昔，悲夫！故列叙时人，录其所述。虽世殊事异，所以兴怀，其致一也。后之览者，亦将有感于斯文。</p><p>注释</p><ol><li>永和：东晋皇帝<a href="https://baike.baidu.com/item/%E5%8F%B8%E9%A9%AC%E8%81%83?fromModule=lemma_inlink">司马聃</a>（晋穆帝）的年号，从公元345—356年共12年。永和九年上巳节，王羲之与谢安，孙绰等41人。举行禊礼，饮酒赋诗，事后将作品结为一集，由王羲之写了这篇序总述其事。</li><li>暮春：阴历三月。暮，晚。</li><li>会：集会。</li><li>会稽（kuài jī）：郡名，今浙江绍兴。</li><li>山阴：今绍兴越城区。</li><li>修禊（xì）事也：（为了做）禊礼这件事。古代习俗，于阴历三月上旬的巳日（魏以后定为三月三日），人们群聚于水滨嬉戏洗濯，以祓除不祥和求福。实际上这是古人的一种游春活动。</li><li>群贤：诸多贤士能人。指谢安等三十二位社会的名流。贤：形容词做名词。</li><li>毕至：全到。毕，全、都。</li><li>少长：如王羲之的儿子王凝之、王徽之是少；谢安、王羲之等是长。</li><li>咸：都。</li><li>崇山峻岭：高峻的山岭。</li><li>修竹：高高的竹子。修，高高的样子。</li><li>激湍：流势很急的水。</li><li>映带左右：辉映点缀在亭子的周围。映带，映衬、围绕。</li><li>流觞（shāng）曲（qū）水：用漆制的酒杯盛酒，放入弯曲的水道中任其飘流，杯停在某人面前，某人就引杯饮酒。这是古人一种劝酒取乐的方式。流，使动用法。曲水，引水环曲为渠，以流酒杯。</li><li>列坐其次：列坐在曲水之旁。列坐，排列而坐。次，旁边，水边。</li><li>丝竹管弦之盛：演奏音乐的盛况。盛，盛大。</li><li>一觞一咏：喝着酒作着诗。</li><li>幽情：幽深内藏的感情。</li><li>是日也：这一天。</li><li>惠风：和风。</li><li>和畅，缓和。</li><li>品类之盛：万物的繁多。品类，指自然界的万物。</li><li>所以：用来。</li><li>骋：使······奔驰。</li><li>极：穷尽。</li><li>信：实在。</li><li>夫人之相与，俯仰一世：人与人相交往，很快便度过一生。夫，句首发语词，不译。相与，相处、相交往。俯仰，表示时间的短暂。</li><li>取诸：取之于，从······中取得。</li><li>悟言：面对面的交谈。悟，通“晤”，指心领神会的妙悟之言。</li><li>因寄所托，放浪形骸之外：就着自己所爱好的事物，寄托自己的情怀，不受约束，放纵无羁的生活。因，依、随着。寄，寄托。所托，所爱好的事物。放浪，放纵、无拘束。形骸，身体、形体。</li><li>趣（qu）舍万殊：各有各的爱好。趣舍，即取舍，爱好。趣，通“取”。万殊，千差万别。</li><li>静躁：安静与躁动。</li><li>暂：短暂，一时。</li><li>快（怏）然自足：感到高兴和满足。然，······的样子。</li><li>不知老之将至：（竟）不知道衰老将要到来。语出《论语·述而》：“其为人也，发愤忘食，乐以忘忧，不知老之将至云尔。”一本有“曾”在句前。</li><li>所之既倦：（对于）所喜爱或得到的事物已经厌倦。之，往、到达。</li><li>情随事迁：感情随着事物的变化而变化。迁，变化。</li><li>感慨系之：感慨随着产生。系，附着。</li><li>向：过去、以前。</li><li>陈迹：旧迹。</li><li>以之兴怀：因它而引起心中的感触。以，因。之，指“向之所欣……以为陈迹”。兴，发生、引起。</li><li>修短随化：寿命长短听凭造化。化，自然。</li><li>期：至，及。</li><li>死生亦大矣：死生是一件大事啊。语出《庄子·德充符》。</li><li>契：符契，古代的一种信物。在符契上刻上字，剖而为二，各执一半，作为凭证。</li><li>临文嗟（jiē）悼：读古人文章时叹息哀伤。临，面对。</li><li>喻：明白。</li><li>固知一死生为虚诞，齐彭殇为妄作：本来知道把死和生等同起来的说法是不真实的，把长寿和短命等同起来的说法是妄造的。固，本来、当然。一，把……看作一样；齐，把……看作相等，都用作动词。虚诞，虚妄荒诞的话。殇，未成年死去的人。妄作，妄造、胡说。一生死，齐彭殇，都是庄子的看法。出自《齐物论》。</li><li>列叙时人：一个一个记下当时与会的人。</li><li>录其所述：录下他们作的诗。</li><li>其致一也：人们的思想情趣是一样的。</li><li>后之览者：后世的读者。</li><li>斯文：这次集会的诗文。</li></ol><h3 id="心–哲–行"><a href="#心–哲–行" class="headerlink" title="心–哲–行"></a>心–哲–行</h3><h4 id="鲨鱼效应"><a href="#鲨鱼效应" class="headerlink" title="鲨鱼效应"></a>鲨鱼效应</h4><p>在海洋中的鱼类，依靠鳔才能在大海中自由沉浮。</p><p>但是天生就没有鳔的鲨鱼，为了不使自己下沉，只能不停地游动。</p><p>长此以往，鲨鱼的身体肌肉越来越强壮，体格也愈发强大，成为“海洋霸王”。</p><p>每个人都有自己的短板，也有自己的所长。</p><p>然而，短板的存在，并不代表我们人生的上限。</p><p>真正厉害的人，懂得发掘自己的长板，将劣势转换为优势。</p><p>当你拥有了“<strong>长板思维</strong>”，方能不断强大自己，寻找到属于自己的高光。</p><p><strong>决定一个人上限的，不是短板</strong></p><h4 id="禁果效应"><a href="#禁果效应" class="headerlink" title="禁果效应"></a>禁果效应</h4><p>越是禁止的东西，人们越要得到手。</p><p>越希望掩盖某个信息不让别人知道，却越勾起别人的好奇心和探求欲，</p><p>反而促使别人试图利用一切渠道来获取被掩盖的信息。这种由于单方面的禁止和掩饰而造成的逆反现象</p><h4 id="毛驴效应"><a href="#毛驴效应" class="headerlink" title="毛驴效应"></a>毛驴效应</h4><p><a href="https://baike.baidu.com/item/%E5%B8%83%E9%87%8C%E4%B8%B9?fromModule=lemma_inlink">布里丹</a>养了一头小毛驴，他每天要向附近的农民买一堆草料来喂。</p><p>这天，送草的农民出于对哲学家的景仰，额外多送了一堆草料放在旁边。这下子，毛驴站在两堆数量、质量和与它的距离完全相等的干草之间，可为难坏了。它虽然享有充分的选择自由，但由于两堆干草价值相等，客观上无法分辨优劣，于是它左看看，右瞅瞅，始终无法分清究竟选择哪一堆好。</p><p>于是，这头可怜的毛驴就这样站在原地，一会儿考虑数量，一会儿考虑质量，一会儿分析颜色，一会儿分析新鲜度，犹犹豫豫，来来回回，在无所适从中活活地饿死了。</p><h4 id="南风效应"><a href="#南风效应" class="headerlink" title="南风效应"></a>南风效应</h4><p>法国作家<a href="https://baike.baidu.com/item/%E6%8B%89%E5%B0%81%E4%B8%B9/1497385?fromModule=lemma_inlink">拉封丹</a>曾写过一则寓言，讲的是北风和南风比威力，看谁能把行人身上的大衣脱掉。</p><p>北风首先来一个冷风凛凛、寒冷刺骨，结果行人为了抵御北风的侵袭，便把大衣裹得紧紧的。</p><p>南风则徐徐吹动，顿时风和日丽，行人因为觉得很暖和，所以开始解开纽扣，继而脱掉大衣。结果很明显，南风获得了胜利。</p><h4 id="白熊效应"><a href="#白熊效应" class="headerlink" title="白熊效应"></a>白熊效应</h4><p>美国哈佛大学社会心理学家的一个实验，他要求参与者尝试不要想象一只白色的熊，结果人们的思维出现强烈反弹，大家很快在脑海中浮现出一只白熊的形象。</p><h4 id="野马效应"><a href="#野马效应" class="headerlink" title="野马效应"></a>野马效应</h4><p>在非洲草原上有一种动物——吸血蝙蝠，它们靠吸食动物的血液生存。这种蝙蝠常常会叮在野马的腿上吸血，而每当这时，野马就会陷入暴怒、狂奔，会像疯了一样摇头甩尾。但是不管野马怎样挣扎都无法摆脱吸血蝙蝠，因为这种蝙蝠动作迅速，它们可以快速的在野马身体的各个部位间移动，直到它们吸饱了血才从容离开，而不少野马就被它们活活折磨死。</p><p>动物学家对野马的死因进行研究，他们发现蝙蝠吸走的血量远不足以导致野马死亡，野马的真正死因是它们的暴怒和狂奔。野马被蝙蝠叮咬后陷入剧烈的情绪反应，身体内各项腺素分泌陷入异常，而剧烈的狂奔又导致力竭，最终死于非命。</p><h4 id="甜柠檬效应"><a href="#甜柠檬效应" class="headerlink" title="甜柠檬效应"></a>甜柠檬效应</h4><p>在挫折心理学中，人们把个体在追求预期目标而失败时，为了冲淡自己内心的不安，就百般提高现己实现的目标价值，从而达到了心理平衡、心安理得的现象，称之为甜柠檬效应。这一术语来源于伊索寓言的故事：有只狐狸原想找些可口的食物，但遍觅不着，只找到一只酸柠檬，这实在是一件不得已而为之的事，但它却说：“这柠檬是甜的，正是我想吃的。”这种只能得到柠檬就说柠檬是甜的自我安慰现象，有人也称甜柠檬心理或甜柠檬作用，其实质是一样的，都是为了变恶性刺激为良性刺激，以达自我心理平衡，免去自我苦恼与痛苦。</p><h4 id="大象思维"><a href="#大象思维" class="headerlink" title="大象思维"></a>大象思维</h4><p>在泰国的驯象场上，有一个奇怪的现象：</p><p>千斤重的大象，被一条细细的铁链子拴得老老实实。</p><p>为什么大象不挣脱呢？</p><p>原来驯象人在大象幼年的时候，就开始用铁链拴着幼象，当时的幼象拼命挣扎也无法挣脱铁链。</p><p>久而久之，大象习惯了被铁链拴着的状态，即使长大后力量早已翻了几倍，也不再尝试挣脱，甘心受铁链的限制</p><h4 id="花盆效应"><a href="#花盆效应" class="headerlink" title="花盆效应"></a>花盆效应</h4><p>花盆效应又称局部生境效应。<a href="https://baike.baidu.com/item/%E8%8A%B1%E7%9B%86/4774938?fromModule=lemma_inlink">花盆</a>是一个半人工、半自然的小生境。首先，它在空间上有很大的局限性；其次，由于人为地创造出非常适宜的的环境条件，在一段时间内，作物和花卉可以长得很好，但一离开人的精心照料，经不起温度的变化，更经不起风吹雨打。在教育生态中，花盆效应表现得尤为明显；在学校教育中，由于封闭或半封闭的教育体制的影响，使学生整天被关在教室里，与沸腾的现实生活脱节，加之教学内容、教学方法陈旧落后，从书本到书本，进行封锁式小循环。</p><h4 id="麦穗效应"><a href="#麦穗效应" class="headerlink" title="麦穗效应"></a>麦穗效应</h4><p>有一天，古希腊著名哲学家苏格拉底的三个弟子向他请教：“如何才能找到称心如意的伴侣?</p><p>”苏格拉底没有直接回答，而是把弟子们带到一块麦地边，让他们在一块麦地中每人选一个最大的麦穗，条件是要从麦地的一边走到另一边，只能往前走不能往回走。大弟子刚走几步便摘了自认为是最大的麦穗(其实并不是最大的麦穗)；二弟子一开始就左顾右盼下不了手，总想也许后面有更大的麦穗，一直到终点时才发现，前面的几个大麦穗已经错过了；三弟子与二位师兄不同，先在三分之一路程时注意验证，在最后三分之一路程时摘下了经过反复比较的最大麦穗。</p><p>由此可见，大弟子的盲目轻率和二弟子的犹豫不绝，都不能摘到最大的麦穗；只有像三弟子那样在调查研究的基础上，并根据客观规律制订周密的行动方案，才能摘到最大麦穗。</p><h4 id="鸟笼效应"><a href="#鸟笼效应" class="headerlink" title="鸟笼效应"></a>鸟笼效应</h4><p>1907年，詹姆斯从<a href="https://baike.baidu.com/item/%E5%93%88%E4%BD%9B%E5%A4%A7%E5%AD%A6?fromModule=lemma_inlink">哈佛大学</a>退休，同时退休的还有他的好友物理学家卡尔森。一天，两人打赌。詹姆斯说：“我一定会让你不久就养上一只鸟的。”卡尔森不以为然：“我不信！因为我从来就没有想过要养一只鸟。”没过几天，恰逢卡尔森生日，詹姆斯送上了礼物——一只精致的鸟笼。卡尔森笑了：“我只当它是一件漂亮的工艺品。你就别费劲了。”从此以后，只要客人来访，看见书桌旁那只空荡荡的鸟笼，他们几乎都会无一例外地问：“<a href="https://baike.baidu.com/item/%E6%95%99%E6%8E%88/18291?fromModule=lemma_inlink">教授</a>，你养的鸟什么时候死了？”卡尔森只好一次次地向客人解释：“我从来就没有养过鸟。”然而，这种回答每每换来的却是客人困惑而有些不信任的目光。无奈之下，卡尔森教授只好买了一只鸟，詹姆斯的“鸟笼效应”奏效了。实际上，在我们的身边，包括我们自己，很多时候先在自己的心里挂上一只笼子，然后再不由自主地朝其中填满一些什么东西。</p><p>鸟笼效应”是一个很有意思的规律，人们会在偶然获得一件物品后，会继续添加更多与之相关而的东西。鸟笼效应：假如一个人买了一只空鸟笼放在家里，那么一段时间后，他一般会为了用这只笼子再买一只鸟回来养而不会把笼子丢掉，也就是这个人反而被笼子给异化掉了，成为笼子的俘虏</p><h4 id="沸腾效应"><a href="#沸腾效应" class="headerlink" title="沸腾效应"></a>沸腾效应</h4><p>烧水烧到 99 度时，还不能算开水，其价值有限；若再添一把火，在 99 度的水温基础上再烧使它再升高 1 度，它就会使水沸腾，并产生大量水蒸气可用来开动机器，从而获得巨大的经济效益。这里的 1 度就是关键的因素，这 1 度就能使水发生质的变化，从液体变化为气体。</p><h4 id="穿针效应"><a href="#穿针效应" class="headerlink" title="穿针效应"></a>穿针效应</h4><p>在给小小的缝衣针穿线的时候，你越是全神贯注地努力，线越不容易穿入。在科学界，这种现象也被称为“目的颤抖”，意思是说由于做事过度用力和意念过于集中，反而将平素可以轻松完成的事情搞糟了。　</p><p>　当对某件事情过于重视时，心理就会紧张，而一紧张，往往就会出现心跳加速、精力分散、动作失调等不良反应。很多人在人生的关口失手，心理紧张与焦虑是重要原因之一。</p><h4 id="榴莲效应"><a href="#榴莲效应" class="headerlink" title="榴莲效应"></a>榴莲效应</h4><p>每一个成年人，都如同一个榴莲。</p><p>喜欢的人自然喜欢，不喜欢的人，任凭使出浑身解数，仍难以下咽。</p><p>与人来往，我们更是深陷“榴莲定律”之中。与有些人的关系，总是很容易进入非常微妙的状态。</p><h3 id="话–诗–词–句"><a href="#话–诗–词–句" class="headerlink" title="话–诗–词–句"></a>话–诗–词–句</h3><h5 id="落入归山海，烟火向星辰，所愿皆成真。"><a href="#落入归山海，烟火向星辰，所愿皆成真。" class="headerlink" title="落入归山海，烟火向星辰，所愿皆成真。"></a>落入归山海，烟火向星辰，所愿皆成真。</h5><h5 id="眼中有山河万里，何惧几分秋凉。"><a href="#眼中有山河万里，何惧几分秋凉。" class="headerlink" title="眼中有山河万里，何惧几分秋凉。"></a>眼中有山河万里，何惧几分秋凉。</h5><h4 id="牡丹亭（节选部分）"><a href="#牡丹亭（节选部分）" class="headerlink" title="牡丹亭（节选部分）"></a>牡丹亭（节选部分）</h4><p>惊觉相思不露，原来只因已入骨</p><p>恨不知所起，一往情深</p><p>恨不知所踪，一笑而泯</p><p>人世间有百媚千红</p><p>唯独你，我情有所钟</p><h6 id="站在山巅与日月星辰对话，潜在海底和江河湖底晤谈，和每一颗树握手，和每一株草私语，方知宇宙浩瀚，自然可畏-，生命可敬。"><a href="#站在山巅与日月星辰对话，潜在海底和江河湖底晤谈，和每一颗树握手，和每一株草私语，方知宇宙浩瀚，自然可畏-，生命可敬。" class="headerlink" title="站在山巅与日月星辰对话，潜在海底和江河湖底晤谈，和每一颗树握手，和每一株草私语，方知宇宙浩瀚，自然可畏 ，生命可敬。"></a>站在山巅与日月星辰对话，潜在海底和江河湖底晤谈，和每一颗树握手，和每一株草私语，方知宇宙浩瀚，自然可畏 ，生命可敬。</h6><h5 id="流水不争先，争的是滔滔不绝"><a href="#流水不争先，争的是滔滔不绝" class="headerlink" title="流水不争先，争的是滔滔不绝"></a>流水不争先，争的是滔滔不绝</h5><p>历史书太小，装不下一个波澜壮阔的一生。</p><p>历史书太大，装下了华夏上下五千年</p><p>你随手翻过的一页，用笔划过的内容</p><p>很可能就是他们的一生</p><h4 id="蝴蝶—-破茧后的美丽"><a href="#蝴蝶—-破茧后的美丽" class="headerlink" title="蝴蝶—-破茧后的美丽"></a>蝴蝶—-破茧后的美丽</h4><p>​我感到背后隐隐的痛，转过头去，惊奇的看到一双金色的翅膀。</p><p>​原来我正在一步步接近爱亲近美好，才会认识美好。</p><p>​当我冷眼旁观时，生命是一只蓝色的蛹，当我热情相拥时，生命是一只金色的蝴蝶，破茧而出的过程，也是感情变化的过程，亲近世界过程，用爱的眼睛看世界，我也如此美丽。</p><p>一种现象，就是，即使套上垃圾袋，也没有人觉得垃圾桶很干净。 人呢？</p><h4 id="垓下歌"><a href="#垓下歌" class="headerlink" title="垓下歌"></a>垓下歌</h4><p>力拔山兮气盖世，时不利兮骓不逝。</p><p>骓不逝兮可奈何，虞兮虞兮奈若何！</p><h4 id="题菊花"><a href="#题菊花" class="headerlink" title="题菊花"></a>题菊花</h4><p>飒飒西风满院栽，蕊寒香冷蝶难来。</p><p>他年我若为青帝，报与桃花一处开</p><h4 id="不第后赋菊"><a href="#不第后赋菊" class="headerlink" title="不第后赋菊"></a>不第后赋菊</h4><p>待到秋来九月八，我花开后百花杀。</p><p>冲天香阵透长安，满城尽带黄金甲</p><h4 id="定风波"><a href="#定风波" class="headerlink" title="定风波"></a>定风波</h4><p>王定国歌儿曰柔奴，姓宇文氏，眉目娟丽，善应对，家世住京师。定国南迁归，余问柔：“广南风土， 应是不好？”柔对曰：“此心安处，便是吾乡。”因为缀词云。</p><p>常羡人间琢玉郎，天应乞与点酥娘。尽道清歌传皓齿，风起，雪飞炎海变清凉。(天应乞与 一作：天教分付； 尽道 一作：自作)<br>万里归来颜愈少。微笑，笑时犹带岭梅香。试问岭南应不好，却道：此心安处是吾乡。</p><h5 id="横空出世，莽昆仑，阅尽人间春色。"><a href="#横空出世，莽昆仑，阅尽人间春色。" class="headerlink" title="横空出世，莽昆仑，阅尽人间春色。"></a>横空出世，莽昆仑，阅尽人间春色。</h5><p>​—–毛泽东</p><h5 id="他日若逐凌云志，敢笑黄巢不丈夫。"><a href="#他日若逐凌云志，敢笑黄巢不丈夫。" class="headerlink" title="他日若逐凌云志，敢笑黄巢不丈夫。"></a>他日若逐凌云志，敢笑黄巢不丈夫。</h5><p>​—–  施耐安</p><h5 id="凡日月所照，江河所至，皆为汉土。"><a href="#凡日月所照，江河所至，皆为汉土。" class="headerlink" title="凡日月所照，江河所至，皆为汉土。"></a>凡日月所照，江河所至，皆为汉土。</h5><p>​——– 刘洵</p><h5 id="正是江南好景，落花时节又逢君。"><a href="#正是江南好景，落花时节又逢君。" class="headerlink" title="正是江南好景，落花时节又逢君。"></a>正是江南好景，落花时节又逢君。</h5><p>​——- 杜甫</p><h5 id="醉后不知天在水，满船清梦压星河。"><a href="#醉后不知天在水，满船清梦压星河。" class="headerlink" title="醉后不知天在水，满船清梦压星河。"></a>醉后不知天在水，满船清梦压星河。</h5><p>​—— 唐</p><h5 id="云想衣裳花想容，-春风拂槛露华浓。"><a href="#云想衣裳花想容，-春风拂槛露华浓。" class="headerlink" title="云想衣裳花想容， 春风拂槛露华浓。"></a>云想衣裳花想容， 春风拂槛露华浓。</h5><p>​——- 李白</p><h5 id="你走，我不送你；你来，无论多大风雨我都要去接你。"><a href="#你走，我不送你；你来，无论多大风雨我都要去接你。" class="headerlink" title="你走，我不送你；你来，无论多大风雨我都要去接你。"></a>你走，我不送你；你来，无论多大风雨我都要去接你。</h5><p>​—— 梁秋实</p><h5 id="唤起一天明月，照我满怀冰雪，浩荡百川流。"><a href="#唤起一天明月，照我满怀冰雪，浩荡百川流。" class="headerlink" title="唤起一天明月，照我满怀冰雪，浩荡百川流。"></a>唤起一天明月，照我满怀冰雪，浩荡百川流。</h5><p>​—– 辛弃疾</p><h5 id="春宵一刻值千金，花有清香月有阴。"><a href="#春宵一刻值千金，花有清香月有阴。" class="headerlink" title="春宵一刻值千金，花有清香月有阴。"></a>春宵一刻值千金，花有清香月有阴。</h5><p>​</p><h5 id="近水楼台先得月，向阳花木易为春。"><a href="#近水楼台先得月，向阳花木易为春。" class="headerlink" title="近水楼台先得月，向阳花木易为春。"></a>近水楼台先得月，向阳花木易为春。</h5><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><p>朴树真的  这个笑容 太治愈了</p><iframe src="//player.bilibili.com/player.html?aid=35306111&bvid=BV1Fb411A7Kj&cid=61878827&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p>一个有趣的姑娘，哈哈 歌声也非常有趣</p><iframe src="//player.bilibili.com/player.html?aid=812485653&bvid=BV1534y157eb&cid=746826440&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p>关于郑州这个也非常好听</p><iframe src="//player.bilibili.com/player.html?aid=426085561&bvid=BV143411K7ph&cid=587984469&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p>郭郭的这首 情非得已 666</p><iframe src="//player.bilibili.com/player.html?aid=333753207&bvid=BV1Vw411o7DK&cid=359661944&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
      
      
      <categories>
          
          <category> 爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人爱好 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iuv_5g组网问题表</title>
      <link href="/post/cb9ba91b.html"/>
      <url>/post/cb9ba91b.html</url>
      
        <content type="html"><![CDATA[<p>这篇文章博主会持续更新，主要都是一些博主和小伙伴们在组网过程中遇到的相关问题</p><h4 id="软件更新带来的相关问题"><a href="#软件更新带来的相关问题" class="headerlink" title="软件更新带来的相关问题"></a>软件更新带来的相关问题</h4><h5 id="无线核心网设备连线问题"><a href="#无线核心网设备连线问题" class="headerlink" title="无线核心网设备连线问题"></a>无线核心网设备连线问题</h5><p>1、 BBU与ITBBU之间连线问题</p><p>2、 BBU中用于连接SPN的两个接口连线问题</p><h5 id="核心网问题"><a href="#核心网问题" class="headerlink" title="核心网问题"></a>核心网问题</h5><p>1、 核心网信令链路故障</p><p>2、开户信息错误</p><p>3、无线公共参数错误</p><p>4、 N2链路故障</p><h5 id="无线网络问题"><a href="#无线网络问题" class="headerlink" title="无线网络问题"></a>无线网络问题</h5><p>1、 S1-C链路故障</p><p>2、5G网络不可用</p><p>2、 DU小区不可用</p><p>3、X2&#x2F;F1&#x2F;E1链路故障无5G信号</p><p>4、SCG分流通道缺失</p><h5 id="承载网问题"><a href="#承载网问题" class="headerlink" title="承载网问题"></a>承载网问题</h5><p>1、 直连地址PING不通的原因软件问题</p><h5 id="无线核心网设备连线问题-1"><a href="#无线核心网设备连线问题-1" class="headerlink" title="无线核心网设备连线问题"></a>无线核心网设备连线问题</h5><p>1、BBU与ITBBU之间连线问题</p><p>（1）因为软件升级后去掉了一种连接方式，目前BBU与ITBBU的通信主要通过SPN,现在连线方式主要是BBU接SPN,ITBBU接SPN。</p><p>（2）ITBBU中主要是CUCP与CUUP对接，CUCP需配置去BBU的控制面路由、CUUP需配置去BBU用户面的路由</p><p>2、BBU中用于连接SPN的两个接口连线问题<br>（1）BBU与SPN可以同时使用光纤和网线同时接线，但建议选择其中一种，如选择光纤接口，注意速率一定要连接GE的带宽，如果是其他速率业务会做不通</p><h5 id="核心网问题-1"><a href="#核心网问题-1" class="headerlink" title="核心网问题"></a>核心网问题</h5><p>1、核心网信令链路故障<br>（1）MME的接口地址、设备连线、SGW的接口地址、设备连线、PGW的接口地址、设备连线、HSS的接口地址、设备连线</p><p>（2）MME与BBU的偶联配置、双向路由</p><p>（3）MME与HSS的对接配置、双向路由</p><p>（4）MME与SGW的S11对接配置、双向路由</p><p>（5）接口IP配置， 与MME&#x2F;HSS对接配置</p><p>2、开户信息错误<br>（1）检查HSS中的APN参数是否与DU管理中的QOS保持一致</p><p>（2）检查终端是否与HSS中签约信息的IMSI保持一致</p><p>（3）检查APN是否与profile、用户签约标识一一对应</p><p>3、无线公共参数错误<br>（1）MME中MCC和MNC、SGW中PLMN相关MCC和MNC、PGW中相关MCC和MNC无线网问题是否与无线部分MCC和MNC对应，涉及到MCC和MNC的参数都需要检查Hhtp通信故障：</p><p>（1）检查八个网元的虚拟接口IP地址、VLAN</p><p>（2）检查第一项所说的http的IP地址是否对应</p><p>（3）检查所有的路由配置，双向需检查</p><p>4、N2链路故障<br>（1）检查AMF与CUCP对接配置、路由, SCTP等地方</p><p>（2）核心网服务器没有与交换机相连</p><h5 id="无线网络问题-1"><a href="#无线网络问题-1" class="headerlink" title="无线网络问题"></a>无线网络问题</h5><p>1、S1-C链路故障<br>（1）实验模式下检查MME与eNodeB的偶联配置、MME侧静态路由配置</p><p>（2）工程模式下检查MME与BBU的路由配置是否可以PING通</p><p>（3）排除以上两种后继续出现S1-C故障，是因为一个核心网下可以建立多个基站，其他站点没有配置的原因</p><p>2、5G网络不可用<br>(1)检查BBU中“NR邻接小区配置”参数，每一个小区需要和DU小区对应；</p><p>(2) 检查邻接关系配置中的参数是否与DU小区标识一致。</p><p>(3) 检查DU管理中的DU标识是否与前两项一致。</p><p>(4) DU小区中物理小区ID与BBU中的TDD小区PCI一致</p><p>2、DU小区不可用<br>（1）检查DU小区配置所有参数需检查，频段、中心载频、带宽等</p><p>（2）检查BWPUL和BWPDL的参数是否与第一项对应</p><p>（3）检查PRACH、SRS信道中标识是否与第一项中参数对应、SLOT序号是否与帧结构类型对应</p><p>（4）检查小区业务参数配置中的帧结构、时间、符号等参数</p><p>（5）检查一下扇区载波</p><p>3、X2&#x2F;F1&#x2F;E1链路故障无5G信号</p><p>（1）检查BBU与CUCP之间的SCTP对接配置及路由配置、CUUP去BBU的路由配置、网关</p><p>（2）检查CUCP与DU之间的对接配置、及IP地址VLAN、网关等</p><p>（3）检查CUUP与CUCP之间的对接配置及IP地址VLAN、网关等</p><p>4、SCG分流通道缺失</p><p>（1）检查SGW与CUUP之间的对接配置、路由配置</p><p>（2）检查CUUP与SGW之间的路由配置</p><p>承载网问题</p><p>1、直连地址PING不通的原因</p><p>（1）检查设备连线端口速率、两端端口速率是否保持一致，如有ODF架检查一下ODF架的端口</p><p>（2）检查直连IP地址是否处于同一个网段，子网掩码有没有配置正确</p><h4 id="其他常见问题"><a href="#其他常见问题" class="headerlink" title="其他常见问题"></a>其他常见问题</h4><ol><li><p>找不到用户归属HSS<br>检查号码分析和diameter连接</p></li><li><p>数据传输中断检查<br>BBU-SGW，或者SGW -PGW的对接以及路由</p></li><li><p>cu部署错误检查<br>ITBBU的CUDU合设与分离问题</p></li><li><p>无线公共参数错误l<br>检查MCC，MNC，PLMN是否一致，检查基站标识，enodeB标识是否一致（同一个PLMN的基站标识不能一致），检查AAU频段是否与小区频段相符合，TDD小区配置</p></li><li><p>小区容量受限<br>小区接纳控制未配置或配置错误</p></li><li><p>s6a链路故障<br>检查MME跟HSS的设备配置，IP，对接路由</p></li><li><p>找不到相关的SGW<br>查找EPC地址解析:地址、协议、名称</p></li><li><p>找不到相关的PGW<br>查找APN地址解析:地址、协议、名称</p></li><li><p>S5S8控制面路由不可达<br>查找SGW与PGW的对接配置、路由:且的地址、下一跳</p></li><li><p>S11接口链路故障<br>查找SGW与MME的S11控制对接、路由</p></li><li><p>S1-ME核心网信令链路故障<br>查找ME与基站偶联配置:本端和对端端口、地址两端一定要对应、路由; MME物理接口地址、掩码;</p></li><li><p>vS1-C控制面链路不可达<br>实验模式下:查看BBU中SCTP与核心网MME的偶联对接参数<br>工程模式下:验证承载网通不通、对接参数路由问题</p></li><li><p>开户信息错误<br>查找HSS中用户签约数据中所有参数是否与终端对应、所有网元中MCC和MNC是否都保持一-致</p></li><li><p>找不到用户APN<br>查找所有出现APN名称的地方例如HSS中的APN名称是否和终端APN名称对应，地址池中的对应_</p></li><li><p>射频资源故障<br>频率范围要包含进去小区的频率范围。使能开关必须打开，承载链路和SPN连线相关，用光纤选择光亘</p></li><li><p>物理参数配置<br>5G-DU-物理信息-NPRACH-根序列索引，所有小区都要配置成不一样的数值,即使是另一个城市的也不</p></li><li><p>5G网络不可用<br>IDNR邻接关系中要和DU管理对应上，另外首先保证所有小区参数都是正确的，例如TAC是查和核心网保护</p></li><li><p>DU小区不可用<br>5G小区频率与4G BBU-NR邻接关系实际频点对应; 4G小区频率与AAU射频对应，只要出现频率的地方都:<br>小区参数配置等—对应的地方均可检查， 直接检查DU小区配置BWPUL, BWPDL, PRACH,SRS,小区业务参数配置等与DU小区相关配置。</p></li><li><p>E1、F1链路故障<br>看SCTP对接配置，端口、IP地址。CUUP到BBU的用户面路由没有配置。</p></li><li><p>无5G信号<br>5G小区频段接口连线cu du SCTP对接; CPS与ITBBU的连线， BBU中得IP配置</p></li><li><p>搜索不到小区信号<br>基站标识所有地方需对应</p></li><li><p>SCC分流通道缺失<br>检查SGW与CUUP的双向路由;分流模式选择SCC split模式;</p></li><li><p>网络模式错误<br>|检查BBU基本网元配置与ITBBU中网元配置是否一一对应:例如网络模式，时钟同步模式等</p></li><li><p>无线公共参数错误</p><p>检查Du管理，Cu管理，NR网元管理， 5G物理参数 mcc, mnc,plmn等公共参数，还有可能问题出在核心网哪里的公共参数问题。</p></li><li><p>http通信故障</p><p>检查http配置，虚拟路由配置，sw问题</p></li><li><p>N2链路故障</p><p>除了上面已经说过的问题还有，一个就是去检查一下 ITBBU 与spn设备之间的问题（博主这个问题检查了3个小时的数据配置，竟然忘了设备之间的连线了）</p></li><li><p>小区频率资源错误</p><p>这个 主要检查一下与频率相关的配置数据</p></li><li><p>分配用户地址失效</p><p>主要检查一下PGW,地址池配置等地方。</p></li><li><p>SBI接口故障</p><p>检查一下http配置</p></li><li><p>搜索不到小区</p><p>4G&#x2F;5G物理参数配置</p></li><li><p>小区有告警</p><p>检查NR网元，接纳控制配置，du小区</p></li><li><p>数据通道错误</p><p>检查承载网中的 spn</p></li><li><p>找不到HSS归属</p><p>检查一下MME中与HSS有关的配置 和 HSS中的相关配置</p></li><li><p>4G小区配置错误</p><p>检查 邻接关系表配置，NR邻接小区配置，TDD小区配置</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 组网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iuv_5g </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫简单案例</title>
      <link href="/post/748fa00c.html"/>
      <url>/post/748fa00c.html</url>
      
        <content type="html"><![CDATA[<p>说明一下 这个文章博主会持续更新的。</p><p>主要是分享一些博主自己写的一些爬虫和网上其他博主分享的爬虫，。</p><p>有错误的地方 欢迎加联系方式一起交流。</p><h4 id="更新一"><a href="#更新一" class="headerlink" title="更新一"></a>更新一</h4><h5 id="爬虫实现在‘必应’上搜索和页面的保持"><a href="#爬虫实现在‘必应’上搜索和页面的保持" class="headerlink" title="爬虫实现在‘必应’上搜索和页面的保持"></a>爬虫实现在‘必应’上搜索和页面的保持</h5><p>这个小案例 主要使用的是urllib库的相关比较基础的的知识，适合初学者玩</p><p>代码可以直接运行</p><figure class="highlight plaintext"><figcaption><span>urllib import request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">from urllib import parse</span><br><span class="line"></span><br><span class="line">def get_url(word):</span><br><span class="line">  url = &#x27;https://cn.bing.com/search?&#123;&#125;&#x27;</span><br><span class="line">  #此处使用urlencode()进行编码</span><br><span class="line">  params = parse.urlencode(&#123;&#x27;q&#x27; : &#x27;菜鸟&#x27;&#125;)</span><br><span class="line">  url = url.format(params)</span><br><span class="line">  return url</span><br><span class="line">#发请求,保存本地文件</span><br><span class="line">def request_url(url,filename):</span><br><span class="line">  headers = &#123;&#x27;User-Agent&#x27;:&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:6.0) Gecko/20100101 Firefox/6.0&#x27;&#125;</span><br><span class="line">  req = request.Request(url=url,headers=headers)</span><br><span class="line">  res = request.urlopen(req)</span><br><span class="line">  html = res.read().decode(&#x27;utf-8&#x27;)</span><br><span class="line">  #这里要注意这个编码格式 不然有可能回出现一堆乱码</span><br><span class="line">  with open(filename,&#x27;w&#x27;,encoding=&#x27;utf-8&#x27;) as f:</span><br><span class="line">    f.write(html)</span><br><span class="line"></span><br><span class="line">word = input(&#x27;请输入搜索内容:&#x27;)</span><br><span class="line">url = get_url(word)</span><br><span class="line">filename = word + &#x27;.html&#x27;</span><br><span class="line">request_url(url,filename)</span><br></pre></td></tr></table></figure><h5 id="爬取百度贴吧"><a href="#爬取百度贴吧" class="headerlink" title="爬取百度贴吧"></a>爬取百度贴吧</h5><p>这是爬的一个静态的网站</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">from urllib import request,parse</span><br><span class="line">import time</span><br><span class="line">import random</span><br><span class="line">from ua_info import ua_list #使用自定义的ua池</span><br><span class="line"></span><br><span class="line">class TiebaSpider(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.url=&#x27;http://tieba.baidu.com/f?&#123;&#125;&#x27;</span><br><span class="line"></span><br><span class="line">    def get_html(self,url):</span><br><span class="line">        req=request.Request(url=url,headers=&#123;&#x27;User-Agent&#x27;:random.choice(ua_list)&#125;)</span><br><span class="line">        res=request.urlopen(req)</span><br><span class="line">        html=res.read().decode(&quot;gbk&quot;,&quot;ignore&quot;)</span><br><span class="line">        return html</span><br><span class="line"></span><br><span class="line">    def save_html(self,filename,html):</span><br><span class="line">        with open(filename,&#x27;w&#x27;) as f:</span><br><span class="line">            f.write(html)</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        name=input(&#x27;请输入贴吧名：&#x27;)</span><br><span class="line">        begin=int(input(&#x27;输入起始页：&#x27;))</span><br><span class="line">        stop=int(input(&#x27;输入终止页：&#x27;))</span><br><span class="line">        for page in range(begin,stop+1):</span><br><span class="line">            pn=(page-1)*50</span><br><span class="line">            params=&#123;</span><br><span class="line">                &#x27;kw&#x27;:name,</span><br><span class="line">                &#x27;pn&#x27;:str(pn)</span><br><span class="line">            &#125;</span><br><span class="line">            #拼接URL地址   </span><br><span class="line">            params=parse.urlencode(params)</span><br><span class="line">            url=self.url.format(params)</span><br><span class="line"></span><br><span class="line">            html=self.get_html(url)</span><br><span class="line"></span><br><span class="line">            filename=&#x27;&#123;&#125;-&#123;&#125;页.html&#x27;.format(name,page)</span><br><span class="line">            self.save_html(filename,html)</span><br><span class="line">            #提示</span><br><span class="line">            print(&#x27;第%d页抓取成功&#x27;%page)</span><br><span class="line">            #每爬取一个页面随机休眠1-2秒钟的时间，为不被抓了</span><br><span class="line">            time.sleep(random.randint(1,2))</span><br><span class="line">#统计程序运行的时间</span><br><span class="line">start=time.time()</span><br><span class="line">spider=TiebaSpider() </span><br><span class="line">spider.run() </span><br><span class="line">end=time.time()</span><br><span class="line">print(&#x27;执行时间:%.2f&#x27;%(end-start))  #爬虫执行时间</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h4 id="更新二"><a href="#更新二" class="headerlink" title="更新二"></a>更新二</h4><h5 id="爬取-豆瓣电影排行榜"><a href="#爬取-豆瓣电影排行榜" class="headerlink" title="爬取 豆瓣电影排行榜"></a>爬取 豆瓣电影排行榜</h5><p>这是静态网站，爬起来比较简单</p><p>主要使用了正则表达式和csv文件操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line">from urllib import request</span><br><span class="line">import random</span><br><span class="line">from ua_info import ua_list</span><br><span class="line">import csv</span><br><span class="line">url = &#x27;https://movie.douban.com/chart&#x27;</span><br><span class="line">p = re.compile(&#x27;&lt;tr.*?title=&quot;(.*?)&quot;.*?&lt;p class=&quot;pl&quot;&gt;(.*?)&lt;/p&gt;.*?/tr&gt;&#x27;,re.S)</span><br><span class="line">headers = &#123;&#x27;User-Agent&#x27;:random.choice(ua_list)&#125;</span><br><span class="line">r = request.Request(url = url, headers=headers)</span><br><span class="line">res = request.urlopen(r)</span><br><span class="line">response = res.read().decode(&#x27;utf-8&#x27;)</span><br><span class="line"># print(response)</span><br><span class="line"># print(p.findall(response)) </span><br><span class="line">w =p.findall(response)</span><br><span class="line">with open( &#x27;doupan.csv&#x27;,&#x27;w&#x27;,newline=&#x27;&#x27;,encoding=&quot;utf-8&quot;) as f:</span><br><span class="line">    spamwriter = csv.writer(f, delimiter=&#x27; &#x27;,quotechar=&#x27;|&#x27;)</span><br><span class="line">    spamwriter.writerow([&#x27;电影&#x27;,&#x27;上映时间和演员&#x27;])</span><br><span class="line">    spamwriter.writerows(w)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="爬取-一页豆瓣电影排行top250电影名"><a href="#爬取-一页豆瓣电影排行top250电影名" class="headerlink" title="爬取 一页豆瓣电影排行top250电影名"></a>爬取 一页豆瓣电影排行top250电影名</h5><p>也是一个静态网站 属于基础操作系列</p><p>如果想爬取整个top250 也比较简单</p><p>先观察一下上面每一页的url的特征 ，再做出一定的更改就好了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from lxml import etree</span><br><span class="line"></span><br><span class="line">class Spider_douban:</span><br><span class="line">  def __init__(self):</span><br><span class="line">    self.url=&#x27;https://movie.douban.com/top250&#x27;</span><br><span class="line">    self.headers=&#123;&#x27;User-Agent&#x27;:&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:6.0) Gecko/20100101 Firefox/6.0&#x27;&#125;</span><br><span class="line">  </span><br><span class="line">  def requ(self):</span><br><span class="line">    html = requests.get(url = self.url, headers=self.headers).text</span><br><span class="line">    p = etree.HTML(html)</span><br><span class="line">    pa = &#x27;//a/img/@alt&#x27;</span><br><span class="line">    pb = str(p.xpath(pa))</span><br><span class="line">    with open(&#x27;xiaoyang.txt&#x27;,&#x27;w&#x27;,encoding=&#x27;utf-8&#x27;) as f:</span><br><span class="line">      f.write(pb)</span><br><span class="line">  def run(self):</span><br><span class="line">    self.requ()</span><br><span class="line">    </span><br><span class="line">a = Spider_douban()</span><br><span class="line">a.run()</span><br></pre></td></tr></table></figure><h5 id="爬取百度图片"><a href="#爬取百度图片" class="headerlink" title="爬取百度图片"></a>爬取百度图片</h5><p>注意 博主这里用的是 以前翻页式的百度图片网站 。</p><p>这里使用的是requests库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">from urllib import parse</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">class BaiduImageSpider(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.url = &#x27;https://image.baidu.com/search/flip?tn=baiduimage&amp;word=&#123;&#125;&#x27;</span><br><span class="line">        self.headers = &#123;&#x27;User-Agent&#x27;:&#x27;Mozilla/4.0&#x27;&#125;</span><br><span class="line"></span><br><span class="line">    # 获取图片</span><br><span class="line">    def get_image(self,url,word):</span><br><span class="line">        #使用 requests模块得到响应对象</span><br><span class="line">        res= requests.get(url,headers=self.headers)</span><br><span class="line">        # 更改编码格式</span><br><span class="line">        res.encoding=&quot;utf-8&quot;</span><br><span class="line">        # 得到html网页</span><br><span class="line">        html=res.text</span><br><span class="line">        print(html)</span><br><span class="line">        #正则解析</span><br><span class="line">        pattern = re.compile(&#x27;&quot;hoverURL&quot;:&quot;(.*?)&quot;&#x27;,re.S)</span><br><span class="line">        img_link_list = pattern.findall(html)</span><br><span class="line">        #存储图片的url链接 </span><br><span class="line">        print(img_link_list)</span><br><span class="line"></span><br><span class="line">        # 创建目录，用于保存图片</span><br><span class="line">        directory = &#x27;D:/File/All/python/spider/image/&#123;&#125;/&#x27;.format(word)</span><br><span class="line">        # 如果目录不存在则创建，此方法常用</span><br><span class="line">        if not os.path.exists(directory):</span><br><span class="line">            os.makedirs(directory)</span><br><span class="line">        </span><br><span class="line">        #添加计数 D:\File\All\python\spider\爬虫.html</span><br><span class="line">        i = 1</span><br><span class="line">        for img_link in img_link_list:</span><br><span class="line">            filename = &#x27;&#123;&#125;&#123;&#125;_&#123;&#125;.jpg&#x27;.format(directory, word, i)</span><br><span class="line">            self.save_image(img_link,filename)</span><br><span class="line">            i += 1</span><br><span class="line">    #下载图片</span><br><span class="line">    def save_image(self,img_link,filename):</span><br><span class="line">        html = requests.get(url=img_link,headers=self.headers).content</span><br><span class="line">        with open(filename,&#x27;wb&#x27;) as f:</span><br><span class="line">            f.write(html)</span><br><span class="line">        print(filename,&#x27;下载成功&#x27;)</span><br><span class="line"></span><br><span class="line">    # 入口函数 </span><br><span class="line">    def run(self):</span><br><span class="line">        word = input(&quot;您想要谁的照片：&quot;)</span><br><span class="line">        word_parse = parse.quote(word)</span><br><span class="line">        url = self.url.format(word_parse)</span><br><span class="line">        self.get_image(url,word)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">spider = BaiduImageSpider()</span><br><span class="line">spider.run()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 案例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sys模块的简单使用</title>
      <link href="/post/9b841354.html"/>
      <url>/post/9b841354.html</url>
      
        <content type="html"><![CDATA[<p>sys模块使用的相对较少，这里博主的学习笔记也比较简单</p><h4 id="sys模块"><a href="#sys模块" class="headerlink" title="sys模块"></a>sys模块</h4><p>sys模块是与python解释器交互的一个接口</p><p>该模块提供对解释器使用或维护的一些变量的访问和获取</p><p>它提供了许多函数和变量来处理 Python 运行时环境的不同部分</p><p>常见用法介绍</p><h5 id="sys-argv"><a href="#sys-argv" class="headerlink" title="sys.argv"></a>sys.argv</h5><p>实现从程序的外部向程序传递参数</p><p>返回的是一个列表，第一个元素是程序文件名，后面的元素都是程序外部传入的参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">print(sys.argv)</span><br><span class="line">uu=sys.argv</span><br><span class="line">if uu==&quot;Jack&quot;:</span><br><span class="line">    print(f&quot;i am &#123;uu&#125;&quot;)</span><br><span class="line">else:</span><br><span class="line">    for i in range(1,len(sys.argv)):</span><br><span class="line">        print(f&quot;i am &#123;sys.argv&#125;&quot;)</span><br></pre></td></tr></table></figure><h5 id="sys-exit-n-退出程序"><a href="#sys-exit-n-退出程序" class="headerlink" title="sys.exit(n) 退出程序"></a>sys.exit(n) 退出程序</h5><p>退出程序, 正常退出时 sys.exit(0), 其他为异常退出一般情况下运行到主程序尾部, 解释器就正常退出了, 但如果想要中途退出, 就可以调用 sys.exit 函数</p><h5 id="sys-version-获取Python解释程序的版本信息"><a href="#sys-version-获取Python解释程序的版本信息" class="headerlink" title="sys.version 获取Python解释程序的版本信息"></a>sys.version 获取Python解释程序的版本信息</h5><h5 id="sys-platform-返回操作系统平台名称"><a href="#sys-platform-返回操作系统平台名称" class="headerlink" title="sys.platform 返回操作系统平台名称"></a>sys.platform 返回操作系统平台名称</h5><h5 id="sys-stdin-readline-与input"><a href="#sys-stdin-readline-与input" class="headerlink" title="sys.stdin.readline()与input"></a>sys.stdin.readline()与input</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"># sys.stdin.readline() 相当于input，区别在于input不会读入&#x27;\n&#x27;</span><br><span class="line">aa = sys.stdin.readline()# 输入数据多一个&#x27;\n&#x27;</span><br><span class="line">bb = input(&#x27;请输入：&#x27;)</span><br><span class="line"> </span><br><span class="line">print(len(aa))</span><br><span class="line">print(len(bb))</span><br></pre></td></tr></table></figure><p>可以看出：</p><p>sys.stdin.readline()方式与input方式的区别是：len(aa)元素中多了一个‘\n’换行符。即sys.stdin.readline()方式会读入换行符。</p><p>还有一个区别在于，input()里面可以直接传入文本，然后打印出来。</p><h5 id="sys-stdout与print"><a href="#sys-stdout与print" class="headerlink" title="sys.stdout与print"></a>sys.stdout与print</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sys.stdout.write(&#x27;hello&#x27; + &#x27;\n&#x27;)</span><br><span class="line">print(&#x27;hello&#x27;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line"># sys.stdin.readline() 相当于input，区别在于input不会读入&#x27;\n&#x27;</span><br><span class="line">aa = sys.stdin.readline()</span><br><span class="line">bb = input(&#x27;请输入：&#x27;)</span><br><span class="line"></span><br><span class="line">sys.stdout.write(str(len(aa)) + &#x27;\n&#x27;)  # 默认无法实现print方式的sep参数功能，所以需要手动在后面添加一个换行符</span><br><span class="line">print(len(bb))</span><br></pre></td></tr></table></figure><h5 id="sys模块中所有的函数"><a href="#sys模块中所有的函数" class="headerlink" title="sys模块中所有的函数"></a>sys模块中所有的函数</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># Python中sys模块：该模块提供对解释器使用或维护的一些变量的访问，以及与解释器强烈交互的函数</span><br><span class="line"></span><br><span class="line"># sys.argv #命令行参数List，第一个元素是程序本身路径</span><br><span class="line"># sys.modules.keys() #返回所有已经导入的模块列表</span><br><span class="line"># sys.exc_info() #获取当前正在处理的异常类,exc_type、exc_value、exc_traceback当前处理的异常详细信息</span><br><span class="line"># sys.exit(n) #程序，正常退出时exit(0)</span><br><span class="line"># sys.hexversion #获取Python解释程序的版本值，16进制格式如：0x020403F0</span><br><span class="line"># sys.version #获取Python解释程序的版本信息</span><br><span class="line"># sys.maxint #最大的Int值</span><br><span class="line"># sys.maxunicode #最大的Unicode值</span><br><span class="line"># sys.modules #返回系统导入的模块字段，key是模块名，value是模块</span><br><span class="line"># sys.path #返回模块的搜索路径，初始化时使用PYTHONPATH环境变量的值</span><br><span class="line"># sys.platform #返回操作系统平台名称</span><br><span class="line"># sys.stdout #标准输出</span><br><span class="line"># sys.stdin #标准输入</span><br><span class="line"># sys.stderr #错误输出</span><br><span class="line"># sys.exc_clear() #用来清除当前线程所出现的当前的或最近的错误信息</span><br><span class="line"># sys.exec_prefix #返回平台独立的python文件安装的位置</span><br><span class="line"># sys.byteorder #本地字节规则的指示器，big-endian平台的值是&#x27;big&#x27;,little-endian平台的值是&#x27;little&#x27;</span><br><span class="line"># sys.copyright #记录python版权相关的东西</span><br><span class="line"># sys.api_version #解释器的C的API版本</span><br><span class="line"># sys.version_info #获取Python解释器的版本信息</span><br><span class="line"># sys.getwindowsversion #获取Windows的版本</span><br><span class="line"># sys.getdefaultencoding #返回当前你所用的默认的字符编码格式</span><br><span class="line"># sys.getfilesystemencoding #返回将Unicode文件名转换成系统文件名的编码的名字</span><br><span class="line"># sys.setdefaultencoding(name) #用来设置当前默认的字符编码</span><br><span class="line"># sys.builtin_module_names #Python解释器导入的模块列表</span><br><span class="line"># sys.executable #Python解释程序路径</span><br><span class="line"># sys.stdin.readline #从标准输入读一行，sys.stdout.write(&quot;a&quot;) 屏幕输出a</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sys </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见爬虫知识</title>
      <link href="/post/fa1e8add.html"/>
      <url>/post/fa1e8add.html</url>
      
        <content type="html"><![CDATA[<h4 id="简单的python爬虫程序"><a href="#简单的python爬虫程序" class="headerlink" title="简单的python爬虫程序"></a>简单的python爬虫程序</h4><p>使用 Python 内置的 urllib 库获取网页的 html 信息</p><p>获取网页html信息</p><ol><li>获取响应对象向百度（<a href="http://www.baidu.com/%EF%BC%89%E5%8F%91%E8%B5%B7%E8%AF%B7%E6%B1%82%EF%BC%8C%E8%8E%B7%E5%8F%96%E7%99%BE%E5%BA%A6%E9%A6%96%E9%A1%B5%E7%9A%84">http://www.baidu.com/）发起请求，获取百度首页的</a> HTML 信息</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line"># urlopen()向URL发请求,返回响应对象</span><br><span class="line">response=urllib.request.urlopen(&#x27;http://www.baidu.com/&#x27;)</span><br><span class="line">print(response)</span><br></pre></td></tr></table></figure><p>其中 urlopen() 表示打开一个网页地址。</p><p><strong>注意：请求的 url 必须带有 http 或者 https 传输协议。</strong></p><ol start="2"><li>输出HTML信息</li></ol><p>在上述代码的基础上继续编写如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#提取响应内容</span><br><span class="line">html = response.read().decode(&#x27;utf-8&#x27;)</span><br><span class="line">print(html)</span><br></pre></td></tr></table></figure><p>通过调用 response 响应对象的 read() 方法提取 HTML 信息，该**方法返回的结果是字节串类型(bytes)**，因此需要使用 decode() 转换为字符串。</p><h4 id="urllib常用方法"><a href="#urllib常用方法" class="headerlink" title="urllib常用方法"></a>urllib常用方法</h4><p>爬虫库 urllib中的常用方法</p><ol><li>urlopen()表示向网站发起请求并获取响应对象</li></ol><p>urllib.request.urlopen(url,timeout)<br>参数说明：<br>url：表示要爬取数据的 url 地址<br>timeout：设置等待超时时间，指定时间内未得到响应则抛出超时异常</p><ol start="2"><li>Request()该方法用于创建请求对象、包装请求头，比如重构 User-Agent（即用户代理，指用户使用的浏览器）使程序更像人类的请求，而非机器。<br>urllib.request.Request(url,headers)</li></ol><p>参数说明：<br>url：请求的URL地址。<br>headers：重构请求头。</p><ol start="3"><li>html响应对象方法</li></ol><p>bytes &#x3D; response.read() # 返回结果为 bytes 数据类型</p><p>string &#x3D; response.read().decode() # decode()将字节串转换为 string 类型</p><p>url &#x3D; response.geturl() # 返回响应对象的URL地址</p><p>code &#x3D; response.getcode() # 返回请求时的HTTP响应码</p><ol start="4"><li>编码解码操作</li></ol><p>#字符串转换为字节码<br>string.encode(“utf-8”)<br>#字节码转换为字符串<br>bytes.decode(“utf-8”) </p><h4 id="User-Agent（用户代理）"><a href="#User-Agent（用户代理）" class="headerlink" title="User-Agent（用户代理）"></a>User-Agent（用户代理）</h4><p>User-Agent 即用户代理，简称“UA”，它是一个特殊字符串头<br>网站服务器通过识别 “UA”来确定用户所使用的操作系统版本、CPU 类型、浏览器版本等信息。而网站服务器则通过判断 UA 来给客户端发送不同的页面。</p><p>网站通过识别请求头中 User-Agent 信息来判断是否是爬虫访问网站。如果是，网站首先对该 IP 进行预警，对其进行重点监控，当发现该 IP 超过规定时间内的访问次数， 将在一段时间内禁止其再次访问网站</p><h5 id="爬虫程序UA信息"><a href="#爬虫程序UA信息" class="headerlink" title="爬虫程序UA信息"></a>爬虫程序UA信息</h5><p>通过向 HTTP 测试网站（<a href="http://httpbin.org/%EF%BC%89%E5%8F%91%E9%80%81">http://httpbin.org/）发送</a> GET 请求来查看请求头信息，从而获取爬虫程序的 UA</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line">#向网站发送get请求</span><br><span class="line">response=urllib.request.urlopen(&#x27;http://httpbin.org/get&#x27;)</span><br><span class="line">html = response.read().decode()</span><br><span class="line">print(html)</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：httpbin.org 这个网站能测试 HTTP 请求和响应的各种信息，比如 cookie、IP、headers 和登录验证等，且支持 GET、POST 等多种方法，对 Web 开发和测试很有帮助。</p><h5 id="重构爬虫UA信息"><a href="#重构爬虫UA信息" class="headerlink" title="重构爬虫UA信息"></a>重构爬虫UA信息</h5><p>ua信息可以百度得到 一大片然后再复制过来</p><p>下面使用urllib.request.Request()方法重构 User-Agent 信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from urllib import request</span><br><span class="line">url = &#x27;http://httpbin.org/get&#x27; #向测试网站发送请求</span><br><span class="line">#重构请求头，伪装成 Mac火狐浏览器访问，可以使用上表中任意浏览器的UA信息</span><br><span class="line">headers = &#123;</span><br><span class="line">&#x27;User-Agent&#x27;:&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:65.0) Gecko/20100101 Firefox/65.0&#x27;&#125;</span><br><span class="line"></span><br><span class="line">#创建请求对象，包装ua信息</span><br><span class="line">req = request.Request(url=url,headers=headers)</span><br><span class="line">#发送请求，获取响应对象</span><br><span class="line">res = request.urlopen(req)</span><br><span class="line">html = res.read().decode(&#x27;utf-8&#x27;)</span><br><span class="line">print(html)</span><br></pre></td></tr></table></figure><p>上述代码重构了 User-Agent 字符串信息，这样就解决了网站通过识别 User-Agent 来封杀爬虫程序的问题。</p><p>重构 UA 也可以通过其他模块实现，比如 requests 模块。</p><h5 id="构建User-Agnet代理池"><a href="#构建User-Agnet代理池" class="headerlink" title="构建User-Agnet代理池"></a>构建User-Agnet代理池</h5><p>在编写爬虫程序时，一般都会构建一个 User-Agent （用户代理）池，就是把多个浏览器的 UA 信息放进列表中，然后再从中随机选择。构建用户代理池，能够避免总是使用一个 UA 来访问网站，因为短时间内总使用一个 UA 高频率访问的网站，可能会引起网站的警觉，从而封杀掉 IP。</p><p>自定义UA代理池</p><p>构建代理池的方法也非常简单，当前文件的工作目录中定义一个 py 文件，并将以下 UA 信息以列表的形式粘贴到该文件中再在需要的地方引用这个文件就好</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ua_list = [</span><br><span class="line">    &#x27;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Maxthon 2.0&#x27;,</span><br><span class="line">    &#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_0) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11&#x27;,</span><br><span class="line">    &#x27;User-Agent:Opera/9.80 (Windows NT 6.1; U; en) Presto/2.8.131 Version/11.11&#x27;,</span><br><span class="line">    &#x27;Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1&#x27;,</span><br><span class="line">    &#x27;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)&#x27;,</span><br><span class="line">    &#x27;Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50&#x27;,</span><br><span class="line">    &#x27;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0&#x27;,</span><br><span class="line">    &#x27; Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1&#x27;,</span><br><span class="line">    &#x27;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1&#x27;,</span><br><span class="line">    &#x27; Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0.1) Gecko/20100101 Firefox/4.0.1&#x27;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>python中有专门的第三方的模块来随机获取浏览器 UA 信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from fake_useragent import UserAgent</span><br><span class="line">#实例化一个对象</span><br><span class="line">ua=UserAgent()</span><br><span class="line">#随机获取一个ie浏览器ua</span><br><span class="line">print(ua.ie)</span><br><span class="line">#随机获取一个火狐浏览器ua</span><br><span class="line">print(ua.firefox)</span><br></pre></td></tr></table></figure><h4 id="Python实现编码与解码"><a href="#Python实现编码与解码" class="headerlink" title="Python实现编码与解码"></a>Python实现编码与解码</h4><p>Python 的标准库urllib.parse模块中提供了用来编码和解码的方法，分别是 urlencode() 与 unquote() 方法。</p><p>urlencode()<br>该方法实现了对 url 地址的编码操作</p><p>unquote()<br>该方法将编码后的 url 地址进行还原，被称为解码</p><ol><li>编码urlencode()<br>打开百度首页，在搜索框中输入“爬虫”，然后点击“百度一下”。当搜索结果显示后，此时地址栏的 URL 信息，如下所示：<a href="https://www.baidu.com/s?wd=%E7%88%AC%E8%99%AB&amp;rsv_spt=1&amp;rsv_iqid=0xa3ca348c0001a2ab&amp;issp=1&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=2&amp;ie=utf8&amp;tn=baiduhome_pg&amp;rsv_enter=1&amp;rsv_dl=ib&amp;rsv_sug3=8&amp;rsv_sug1=7&amp;rsv_sug7=101">https://www.baidu.com/s?wd=爬虫&amp;rsv_spt=1&amp;rsv_iqid=0xa3ca348c0001a2ab&amp;issp=1&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=2&amp;ie=utf8&amp;tn=baiduhome_pg&amp;rsv_enter=1&amp;rsv_dl=ib&amp;rsv_sug3=8&amp;rsv_sug1=7&amp;rsv_sug7=101</a></li></ol><p>可以看出 URL 中有很多的查询字符串，而第一个查询字符串就是“wd&#x3D;爬虫”，其中 wd 表示查询字符串的键，而“爬虫”则代表您输入的值。在网页地址栏中删除多余的查询字符串，最后显示的 URL 如下所示：<a href="https://www.baidu.com/s?wd=%E7%88%AC%E8%99%AB">https://www.baidu.com/s?wd=爬虫</a></p><p>使用搜索修改后的 URL 进行搜索，依然会得到相同页面。因此可知“wd”参数是百度搜索的关键查询参数。</p><p>下面编写爬虫程序对 “wd&#x3D;爬虫”进行编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from urllib import parse</span><br><span class="line">#构建查询字符串字典</span><br><span class="line">query_string = &#123;&#x27;wd&#x27; : &#x27;爬虫&#x27;&#125;</span><br><span class="line">result = parse.urlencode(query_string)</span><br><span class="line">#使用format函数格式化字符串，拼接url地址</span><br><span class="line">url = &#x27;http://www.baidu.com/s?&#123;&#125;&#x27;.format(result)</span><br><span class="line">print(url)</span><br></pre></td></tr></table></figure><p>编码后的 URL 地址依然可以通过地网页址栏实现搜索功能。</p><p>除了使用 urlencode() 方法之外，也可以使用 quote(string) 方法实现编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from urllib import parse</span><br><span class="line">#注意url的书写格式，和 urlencode存在不同</span><br><span class="line">url = &#x27;http://www.baidu.com/s?wd=&#123;&#125;&#x27;</span><br><span class="line">word = input(&#x27;请输入要搜索的内容:&#x27;)</span><br><span class="line">#quote()只能对字符串进行编码</span><br><span class="line">query_string = parse.quote(word)</span><br><span class="line">print(url.format(query_string))</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：quote() 只能对字符串编码，而 urlencode() 可以直接对查询字符串字典进行编码。</p><p>因此在定义 URL 时，需要注意两者之间的差异。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#urllib.parse</span><br><span class="line">urllib.parse.urlencode(&#123;&#x27;key&#x27;:&#x27;value&#x27;&#125;) #字典</span><br><span class="line">urllib.parse.quote(string) #字符串</span><br></pre></td></tr></table></figure><ol start="2"><li>解码unquote(string)解码是对编码后的 URL 进行还原的一种操作</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from urllib import parse</span><br><span class="line">string = &#x27;%E7%88%AC%E8%99%AB&#x27;</span><br><span class="line">result = parse.unquote(string)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><ol start="3"><li>URL地址拼接方式</li></ol><p>介绍三种拼接 URL 地址的方法。除了使用 format() 函数外，还可以使用字符串相加，以及字符串占位符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 1、字符串相加</span><br><span class="line">  baseurl = &#x27;http://www.baidu.com/s?&#x27;</span><br><span class="line">  params=&#x27;wd=%E7%88%AC%E8%99%AB&#x27;</span><br><span class="line">  url = baseurl + params</span><br><span class="line"></span><br><span class="line"># 2、字符串格式化（占位符）</span><br><span class="line">  params=&#x27;wd=%E7%88%AC%E8%99%AB&#x27;</span><br><span class="line">  url = &#x27;http://www.baidu.com/s?%s&#x27;% params</span><br><span class="line"></span><br><span class="line"># 3、format()方法</span><br><span class="line">  url = &#x27;http://www.baidu.com/s?&#123;&#125;&#x27;</span><br><span class="line">  params=&#x27;wd=%E7%88%AC%E8%99%AB&#x27;</span><br><span class="line">  url = url.format(params)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Python-re模块用法"><a href="#Python-re模块用法" class="headerlink" title="Python re模块用法"></a>Python re模块用法</h4><p>在 Python 爬虫过程中，实现网页元素解析的方法有很多，正则解析只是其中之一，常见的还有 BeautifulSoup 和 lxml，它们都支持网页 HTML 元素的解析操作。</p><p>re模块常用方法</p><p> re.compile()<br>该方法用来生成正则表达式对象</p><p>regex&#x3D;re.compile(pattern,flags&#x3D;0)<br>pattern：正则表达式对象<br>flags：代表功能标志位，扩展正则表达式的匹配。</p><p>re.findall()<br>根据正则表达式匹配目标字符串内容。</p><p>re.findall(pattern,string,flags&#x3D;0)<br>该函数的返回值是匹配到的内容列表，如果正则表达式有子组，则只能获取到子组对应的内容<br>pattern：正则表达式对象<br>string：目标字符串<br>flags：代表功能标志位，扩展正则表达式的匹配。</p><p>regex.findall()<br>该函数根据正则表达式对象匹配目标字符串内容。regex.findall(string,pos,endpos)<br>string 目标字符串。<br>pos 截取目标字符串的开始匹配位置。<br>endpos 截取目标字符串的结束匹配位置。</p><p>re.split()<br>该函数使用正则表达式匹配内容，切割目标字符串。返回值是切割后的内容列表。<br>re.split(pattern,string,flags &#x3D; 0)<br>pattern：正则表达式。<br>string：目标字符串。<br>flags：功能标志位,扩展正则表达式的匹配。</p><p>re.sub<br>该函数使用一个字符串替换正则表达式匹配到的内容。返回值是替换后的字符串。<br>re.sub(pattern,replace,string,max,flags &#x3D; 0)<br>pattern：正则表达式。<br>replace：替换的字符串。<br>string：目标字符串。<br>max：最多替换几处，默认替换全部，<br>flags：功能标志位,扩展正则表达式的匹配。</p><p>re.search()<br>匹配目标字符串<strong>第一个</strong>符合的内容，返回值为匹配的对象。re.search(pattern,string,flags&#x3D;0)<br>pattern：正则表达式<br>string：目标字符串<br>flags功能标志位</p><p>功能标志位的作用是扩展正则表达的匹配功能。常用的 flag </p><img src="/post/fa1e8add/81.png" class title="This is an image"><p>注意：可以同时使用福多个功能标志位，比如 flags&#x3D;re.I|re.S。</p><p>使用贪婪和非贪婪两种模式来匹配 HTML 元素，分别，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line">html=&quot;&quot;&quot;</span><br><span class="line">&lt;div&gt;&lt;p&gt;www.biancheng.net&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">&lt;div&gt;&lt;p&gt;编程帮&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">#贪婪匹配，re.S可以匹配换行符</span><br><span class="line">pattern=re.compile(&#x27;&lt;div&gt;&lt;p&gt;.*&lt;/p&gt;&lt;/div&gt;&#x27;,re.S)</span><br><span class="line">re_list=pattern.findall(html)</span><br><span class="line">print(re_list)</span><br><span class="line"></span><br><span class="line">#非贪婪模式匹配，re.S可以匹配换行符</span><br><span class="line">pattern=re.compile(&#x27;&lt;div&gt;&lt;p&gt;.*?&lt;/p&gt;&lt;/div&gt;&#x27;,re.S)</span><br><span class="line">re_list=pattern.findall(html)</span><br><span class="line">print(re_list)</span><br></pre></td></tr></table></figure><h5 id="正则表达式分组"><a href="#正则表达式分组" class="headerlink" title="正则表达式分组"></a>正则表达式分组</h5><p>通过正则表达式分组可以从匹配的信息中提取出想要的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#正则表达式分组</span><br><span class="line">website=&quot;编程帮 www.biancheng.net&quot;</span><br><span class="line"></span><br><span class="line">#注意此时正则表达式的 &quot;.&quot; 需要转义因此使用 \.</span><br><span class="line">pattern_1=re.compile(&#x27;\w+\s+\w+\.\w+\.\w+&#x27;)</span><br><span class="line">print(pattern_1.findall(website))</span><br><span class="line"></span><br><span class="line">#提取匹配信息的第一项</span><br><span class="line">pattern_2=re.compile(&#x27;(\w+)\s+\w+\.\w+\.\w+&#x27;)</span><br><span class="line">print(pattern_2.findall(website))</span><br><span class="line"></span><br><span class="line">#有两个及以上的()则以元组形式显示</span><br><span class="line">pattern_3=re.compile(&#x27;(\w+)\s+(\w+\.\w+\.\w+)&#x27;)</span><br><span class="line">print(pattern_3.findall(website))</span><br></pre></td></tr></table></figure><p>正则表达式分组是提取信息的常用方式。当需要哪个特定信息的时候，就可以通过分组(也就是加括号)的方式获得。</p><h5 id="网页信息提取"><a href="#网页信息提取" class="headerlink" title="网页信息提取"></a>网页信息提取</h5><p>从下面的 HTML 代码中使用 re 模块提取出两部影片的名称和主演信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">html=&quot;&quot;&quot;</span><br><span class="line">&lt;div class=&quot;movie-item-info&quot;&gt;</span><br><span class="line">&lt;p class=&quot;name&quot;&gt;</span><br><span class="line">&lt;a title=&quot;你好，李焕英&quot;&gt;你好，李焕英&lt;/a&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;p class=&quot;star&quot;&gt;</span><br><span class="line">主演：贾玲,张小斐,沈腾</span><br><span class="line">&lt;/p&gt;    </span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;movie-item-info&quot;&gt;</span><br><span class="line">&lt;p class=&quot;name&quot;&gt;</span><br><span class="line">&lt;a title=&quot;刺杀，小说家&quot;&gt;刺杀，小说家&lt;/a&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;p class=&quot;star&quot;&gt;</span><br><span class="line">主演：雷佳音,杨幂,董子健,于和伟</span><br><span class="line">&lt;/p&gt;    </span><br><span class="line">&lt;/div&gt; </span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"># 寻找HTML规律，书写正则表达式，使用正则表达式分组提取信息</span><br><span class="line">pattern=re.compile(r&#x27;&lt;div.*?&lt;a title=&quot;(.*?)&quot;.*?star&quot;&gt;(.*?)&lt;/p.*?div&gt;&#x27;,re.S)</span><br><span class="line">r_list=pattern.findall(html)</span><br><span class="line">print(r_list)</span><br><span class="line"># 整理数据格式并输出</span><br><span class="line">if  r_list:</span><br><span class="line">    for r_info in  r_list:</span><br><span class="line">        print(&quot;影片名称：&quot;,r_info[0])</span><br><span class="line">        print(&quot;影片主演：&quot;,r_info[1].strip())</span><br><span class="line">        print(20*&quot;*&quot;)</span><br></pre></td></tr></table></figure><p>这里给一些博主自己使用正则表达式的经验：<br>&lt;div.<em>?&lt;a title&#x3D;”(.*?)”.*?star”&gt;(.</em>?)&lt;&#x2F;p.*?div&gt;<br>比如说上面这个正则表达式<br>他就只能匹配下面这种类型里面的信息</p><div class="movie-item-info"><p class="name"><a title="你好，李焕英">你好，李焕英</a></p><p class="star">主演：贾玲,张小斐,沈腾</p>    </div><div class="movie-item-info"><p class="name"><a title="刺杀，小说家">刺杀，小说家</a></p><p class="star">主演：雷佳音,杨幂,董子健,于和伟</p>    </div><p>你如果需要匹配的对象(注意仔细看博主删减的那部分)是这样的（如下）<br>他就只能匹配到，第一部影片的信息第二部影片的信息好像匹配不到<br>而遇到这种情况 就使用xlme来匹配更好</p><div class="movie-item-info"><p class="name"><a title="你好，李焕英">你好，李焕英</a></p><p class="star">主演：贾玲,张小斐,沈腾</p>    </div><p class="name"><a title="刺杀，小说家">刺杀，小说家</a></p><p class="star">主演：雷佳音,杨幂,董子健,于和伟</p>    <h4 id="Python-csv模块（读写文件）"><a href="#Python-csv模块（读写文件）" class="headerlink" title="Python csv模块（读写文件）"></a>Python csv模块（读写文件）</h4><p>CSV 文件又称为逗号分隔值文件，是一种通用的、相对简单的文件格式，用以存储表格数据，包括数字或者字符。CSV 是电子表格和数据库中最常见的输入、输出文件格式</p><p>通过爬虫将数据抓取的下来，然后把数据保存在文件，或者数据库中，这个过程称为数据的持久化存储</p><h5 id="CSV文件写入"><a href="#CSV文件写入" class="headerlink" title="CSV文件写入"></a>CSV文件写入</h5><ol><li>csv.writer()<br>csv 模块中的 writer 类可用于读写序列化的数据<br>其语法格式如下：writer(csvfile, dialect&#x3D;’excel’, **fmtparams)</li></ol><p>csvfile：必须是支持迭代(Iterator)的对象，可以是文件(file)对象或者列表(list)对象。<br>dialect：编码风格，默认为 excel 的风格，也就是使用逗号,分隔。<br>fmtparam：格式化参数，用来覆盖之前</p><p>dialect 对象指定的编码风格。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import csv</span><br><span class="line"># 操作文件对象时，需要添加newline参数逐行写入，否则会出现空行现象</span><br><span class="line">with open(&#x27;eggs.csv&#x27;, &#x27;w&#x27;, newline=&#x27;&#x27;) as csvfile:</span><br><span class="line">    # delimiter 指定分隔符，默认为逗号，这里指定为空格</span><br><span class="line">    # quotechar 表示引用符</span><br><span class="line">    # writerow 单行写入，列表格式传入数据</span><br><span class="line">    spamwriter = csv.writer(csvfile, delimiter=&#x27; &#x27;,quotechar=&#x27;|&#x27;)</span><br><span class="line">    spamwriter.writerow([&#x27;www.biancheng.net&#x27;] * 5 + [&#x27;how are you&#x27;])</span><br><span class="line">    spamwriter.writerow([&#x27;hello world&#x27;, &#x27;web site&#x27;, &#x27;www.biancheng.net&#x27;])</span><br></pre></td></tr></table></figure><p>其中，quotechar 是引用符，当一段话中出现分隔符的时候，用引用符将这句话括起来，以能排除歧义。</p><p>如果想同时写入多行数据，需要使用 writerrows() 方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import csv</span><br><span class="line">with open(&#x27;aggs.csv&#x27;, &#x27;w&#x27;, newline=&#x27;&#x27;) as f:</span><br><span class="line">    writer = csv.writer(f)</span><br><span class="line">    # 注意传入数据的格式为列表元组格式</span><br><span class="line">    writer.writerows([(&#x27;hello&#x27;,&#x27;world&#x27;), (&#x27;I&#x27;,&#x27;love&#x27;,&#x27;you&#x27;)])</span><br></pre></td></tr></table></figure><ol start="2"><li>csv.DictWriter()当然也可使用 DictWriter 类以字典的形式读写数据</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import csv</span><br><span class="line">with open(&#x27;names.csv&#x27;, &#x27;w&#x27;, newline=&#x27;&#x27;) as csvfile:</span><br><span class="line">    #构建字段名称，也就是key</span><br><span class="line">    fieldnames = [&#x27;first_name&#x27;, &#x27;last_name&#x27;]</span><br><span class="line">    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)</span><br><span class="line">    # 写入字段名，当做表头</span><br><span class="line">    writer.writeheader()</span><br><span class="line">    # 多行写入</span><br><span class="line">    writer.writerows([&#123;&#x27;first_name&#x27;: &#x27;Baked&#x27;, &#x27;last_name&#x27;: &#x27;Beans&#x27;&#125;,&#123;&#x27;first_name&#x27;: &#x27;Lovely&#x27;, &#x27;last_name&#x27;: &#x27;Spam&#x27;&#125;])</span><br><span class="line">    # 单行写入</span><br><span class="line">    writer.writerow(&#123;&#x27;first_name&#x27;: &#x27;Wonderful&#x27;, &#x27;last_name&#x27;: &#x27;Spam&#x27;&#125;)</span><br></pre></td></tr></table></figure><h6 id="CSV文件读取"><a href="#CSV文件读取" class="headerlink" title="CSV文件读取"></a>CSV文件读取</h6><ol><li>csv,reader()<br>csv 模块中的 reader 类和  DictReader 类用于读取文件中的数据</li></ol><p>reader() ：<br>csv.reader(csvfile, dialect&#x3D;’excel’, **fmtparams)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import csv</span><br><span class="line">with open(&#x27;eggs.csv&#x27;, &#x27;r&#x27;, newline=&#x27;&#x27;) as csvfile:</span><br><span class="line">    spamreader = csv.reader(csvfile, delimiter=&#x27; &#x27;, quotechar=&#x27;|&#x27;)</span><br><span class="line">    for row in spamreader:</span><br><span class="line">        print(&#x27;, &#x27;.join(row))</span><br></pre></td></tr></table></figure><ol><li>csv.DictReader() ：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import csv</span><br><span class="line">with open(&#x27;names.csv&#x27;, newline=&#x27;&#x27;) as csvfile:</span><br><span class="line">    reader = csv.DictReader(csvfile)</span><br><span class="line">    for row in reader:</span><br><span class="line">        print(row[&#x27;first_name&#x27;], row[&#x27;last_name&#x27;])</span><br></pre></td></tr></table></figure><h4 id="Python-Requests库的使用"><a href="#Python-Requests库的使用" class="headerlink" title="Python Requests库的使用"></a>Python Requests库的使用</h4><p>Python 提供了多个用来编写爬虫程序的库，除了 urllib 库之外，还有一个很重的 Requests 库</p><p>Requests 库是在 urllib 的基础上开发而来，它使用 Python 语言编写，并且采用了 Apache2 Licensed（一种开源协议）的 HTTP 库。</p><p>与 urllib 相比，Requests 更加方便、快捷，因此在编写爬虫程序时 Requests 库使用较多。</p><h5 id="常用请求方法"><a href="#常用请求方法" class="headerlink" title="常用请求方法"></a>常用请求方法</h5><ol><li>requests.get()该方法用于 GET 请求，表示向网站发起请求，获取页面响应对象。</li></ol><p>res &#x3D; requests.get(url,headers&#x3D;headers,params,timeout)<br>参数说明如下：url：要抓取的 url 地址。<br>headers：用于包装请求头信息。<br>params：请求时携带的查询字符串参数。<br>timeout：超时时间，超过时间会抛出异常。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">url = &#x27;http://baidu.com&#x27;</span><br><span class="line">response = requests.get(url)</span><br><span class="line">print(response)</span><br></pre></td></tr></table></figure><p>获取带查询字符串参数的响应对象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">data = &#123;</span><br><span class="line">    &#x27;name&#x27;: &#x27;编程帮&#x27;,</span><br><span class="line">    &#x27;url&#x27;: &quot;www.biancheng.net&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(&#x27;http://httpbin.org/get&#x27;, params=data)</span><br><span class="line">#直接拼接参数也可以</span><br><span class="line">#response = requests.get(http://httpbin.org/get?name=gemey&amp;age=22)</span><br><span class="line">#调用响应对象text属性，获取文本信息</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><ol start="2"><li>requests.post()</li></ol><p>该方法用于 POST 请求，先由用户向目标 url 提交数据，然后服务器返回一个 HttpResponse 响应对象，语法如下：<br>response&#x3D;requests.post(url,data&#x3D;{请求体的字典})</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">#百度翻译</span><br><span class="line">url = &#x27;https://fanyi.baidu.com&#x27;</span><br><span class="line">#post请求体携带的参数，可通过开发者调试工具查看</span><br><span class="line">#查看步骤：NetWork选项-&gt;Headers选项-&gt;Form Data</span><br><span class="line">data = &#123;&#x27;from&#x27;: &#x27;zh&#x27;,</span><br><span class="line">        &#x27;to&#x27;: &#x27;en&#x27;,</span><br><span class="line">        &#x27;query&#x27;: &#x27;编程帮www.biancheng.net你好&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">response = requests.post(url, data=data)</span><br><span class="line">print(response)</span><br></pre></td></tr></table></figure><h5 id="常见对象属性"><a href="#常见对象属性" class="headerlink" title="常见对象属性"></a>常见对象属性</h5><p>当我们使用 Requests 模块向一个 URL 发起请求后会返回一个 HttpResponse 响应对象，该对象具有以下常用属性：</p><p>常用属性说明</p><p>encoding查看或者指定响应字符编码</p><p>status_code返回HTTP响应码</p><p>url查看请求的 url 地址</p><p>headers查看请求头信息</p><p>cookies查看cookies 信息</p><p>text以字符串形式输出</p><p><strong>content以字节流形式输出，若要保存下载图片需使用该属性。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">response = requests.get(&#x27;http://www.baidu.com&#x27;)</span><br><span class="line">print(response.encoding)</span><br><span class="line">response.encoding=&quot;utf-8&quot;    #更改为utf-8编码</span><br><span class="line">print(response.status_code)  # 打印状态码</span><br><span class="line">print(response.url)          # 打印请求url</span><br><span class="line">print(response.headers)      # 打印头信息</span><br><span class="line">print(response.cookies)      # 打印cookie信息</span><br><span class="line">print(response.text)  #以字符串形式打印网页源码</span><br><span class="line">print(response.content) #以字节流形式打印</span><br></pre></td></tr></table></figure><h5 id="Requests库常用方法及参数介绍"><a href="#Requests库常用方法及参数介绍" class="headerlink" title="Requests库常用方法及参数介绍"></a>Requests库常用方法及参数介绍</h5><p>Requests 库中定义了七个常用的请求方法，这些方法各自有着不同的作用，在这些请求方法中 requests.get() 与 requests.post() 方法最为常用。<br>请求方法如下所示：</p><p>requests.request()<br>构造一个请求对象，该方法是实现以下各个方法的基础。</p><p>requests.get()<br>获取HTML网页的主要方法，对应于 HTTP 的 GET 方法。</p><p>requests.head()<br>获取HTML网页头信息的方法，对应于 HTTP 的 HEAD 方法。</p><p>requests.post()<br>获取 HTML 网页提交 POST请求方法，对应于 HTTP 的 POST。</p><p>requests.put()<br>获取HTML网页提交PUT请求方法，对应于 HTTP 的 PUT。</p><p>requests.patch()<br>获取HTML网页提交局部修改请求，对应于 HTTP 的 PATCH。</p><p>requests.delete()<br>获取HTML页面提交删除请求，对应于 HTTP 的 DELETE。</p><p>上述方法都提供了相同的参数，其中某些参数已经使用过，比如headers和params，前者用来构造请求头，后者用来构建查询字符串。这些参数对于编写爬虫程序有着至关重要的作用</p><p>SSL认证-verify参数</p><p>SSL 证书是数字证书的一种，类似于驾驶证、护照和营业执照。因为配置在服务器上，也称为 SSL 服务器证书。SSL 证书遵守 SSL 协议，由受信任的数字证书颁发机构 CA（电子认证服务）颁发。 SSL 具有服务器身份验证和数据传输加密功能。</p><p>verify参数的作用是检查 SSL 证书认证，参数的默认值为 True，如果设置为 False 则表示不检查 SSL证书，此参数适用于没有经过 CA 机构认证的 HTTPS 类型的网站。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">response = requests.get(</span><br><span class="line">  url=url,</span><br><span class="line">  params=params,</span><br><span class="line">  headers=headers,</span><br><span class="line">  verify=False</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>代理IP-proxies参数</p><p>一些网站为了限制爬虫从而设置了很多反爬策略，其中一项就是针对 IP 地址设置的。<br>比如，访问网站超过规定次数导致流量异常，或者某个时间段内频繁地更换浏览器访问，存在上述行为的 IP 极有可能被网站封杀掉。</p><p>代理 IP 就是解决上述问题的，它突破了 IP 地址的访问限制，隐藏了本地网络的真实 IP，而使用第三方 IP 代替自己去访问网站。</p><ol><li><p>代理IP池通过构建代理 IP 池可以让你编写的爬虫程序更加稳定，从 IP 池中随机选择一个 IP 去访问网站，而不使用固定的真实 IP。总之将爬虫程序伪装的越像人，它就越不容易被网站封杀。当然代理 IP 也不是完全不能被察觉，通过端口探测技等术识仍然可以辨别。</p></li><li><p>proxies参数Requests 提供了一个代理 IP 参数 proxies，该参数的语法结构如下：</p></li></ol><p>proxies &#x3D; {<br>      ‘协议类型(http&#x2F;https)’:’协议类型:&#x2F;&#x2F;IP地址:端口号’<br>    }</p><p>下面构建了两个协议版本的代理 IP，示例如下：</p><p>proxies &#x3D; {<br>   ‘http’:’<a href="http://IP:端口号&#39;">http://IP:端口号&#39;</a>,<br>   ‘https’:’<a href="https://IP:端口号&#39;">https://IP:端口号&#39;</a><br>}</p><ol start="3"><li>代理IP使用</li><li>下面通过简单演示如何使用proxies参数，示例如下：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">url = &#x27;http://httpbin.org/get&#x27;</span><br><span class="line">headers = &#123;</span><br><span class="line">    &#x27;User-Agent&#x27;:&#x27;Mozilla/5.0&#x27;</span><br><span class="line">&#125;</span><br><span class="line"># 网上找的免费代理ip</span><br><span class="line">proxies = &#123;</span><br><span class="line">    &#x27;http&#x27;:&#x27;http://191.231.62.142:8000&#x27;,</span><br><span class="line">    &#x27;https&#x27;:&#x27;https://191.231.62.142:8000&#x27;</span><br><span class="line">&#125;</span><br><span class="line">html = requests.get(url,proxies=proxies,headers=headers,timeout=5).text</span><br><span class="line">print(html)</span><br></pre></td></tr></table></figure><p>由于上述示例使用的是免费代理 IP，因此其质量、稳定性较差，可能会随时失效。如果想构建一个稳定的代理 IP 池，就需要花费成本。</p><ol start="4"><li>付费代理IP网上有许多提供代理 IP 服务的网 站，比如快代理、代理精灵、齐云代理等。这些网站也提供了相关文档说明，以及 API 接口，爬虫程序通过访问 API 接口，就可以构建自己的代理 IP 池。付费代理 IP 按照资源类型可划分为：开发代理、私密代理、隧道代理、独享代理，其中最常使用的是开放代理与私密代理。</li><li>开放代理：开放代理是从公网收集的代理服务器，具有 IP 数量大，使用成本低的特点，全年超过 80% 的时间都能有 3000 个以上的代理 IP 可供提取使用。<br>私密代理：私密代理是基于云主机构建的高品质代理服务器，为您提供高速、可信赖的网络代理服务。私密代理每天可用 IP 数量超过 20 万个，可用率在 95 %以上，1 次可提取 IP 数量超过 700 个，可以为爬虫业务提供强大的助力。付费代理的收费标准根据 IP 使用的时间长短，以及 IP 的质量高低，从几元到几百元不等。89 免费代理（<a href="http://www.89ip.cn/%EF%BC%89%E6%98%AF%E4%B8%80%E4%B8%AA%E4%B8%93%E9%97%A8%E6%8F%90%E4%BE%9B%E5%85%8D%E8%B4%B9%E4%BB%A3%E7%90%86">http://www.89ip.cn/）是一个专门提供免费代理</a> IP 的网站，不过想找到一个质量较高的免费代理好比大海捞针。</li></ol><p>用户认证-auth参数<br>Requests 提供了一个auth参数，该参数的支持用户认证功能，也就是适合那些需要验证用户名、密码的网站。auth 的参数形式是一个元组</p><p>格式:<br>auth &#x3D; (‘username’,’password’)</p><h4 id="Xpath"><a href="#Xpath" class="headerlink" title="Xpath"></a>Xpath</h4><p>在编写爬虫程序的过程中提取信息是非常重要的环节，但是有时使用正则表达式无法匹配到想要的信息，或者书写起来非常麻烦，此时就需要用另外一种数据解析方法， Xpath 表达式。</p><p>Xpath表达式</p><p>XPath（全称：XML Path Language）即 XML 路径语言，它是一门在 XML 文档中查找信息的语言，最初被用来搜寻 XML 文档，同时它也适用于搜索 HTML 文档。因此，在爬虫过程中可以使用 XPath 来提取相应的数据。</p><p>可以将 Xpath 理解为在XML&#x2F;HTML文档中检索、匹配元素节点的工具。</p><p>Xpath 使用路径表达式来选取XML&#x2F;HTML文档中的节点或者节点集。</p><p>Xpath 的功能十分强大，它除了提供了简洁的路径表达式外，还提供了100 多个内建函数，包括了处理字符串、数值、日期以及时间的函数。</p><p>因此 Xpath 路径表达式几乎可以匹配所有的元素节点。</p><p>Python 第三方解析库 lxml 对 Xpath 路径表达式提供了良好的支持，能够解析 XML 与 HTML 文档</p><p>Xpath节点</p><p>XPath 提供了多种类型的节点，常用的节点有：元素、属性、文本、注释以及文档节点。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;website&gt;</span><br><span class="line"></span><br><span class="line">&lt;site&gt;</span><br><span class="line">  &lt;title lang=&quot;zh-CN&quot;&gt;website name&lt;/title&gt;</span><br><span class="line">  &lt;name&gt;编程帮&lt;/name&gt;</span><br><span class="line">  &lt;year&gt;2010&lt;/year&gt;</span><br><span class="line">  &lt;address&gt;www.biancheng.net&lt;/address&gt;</span><br><span class="line">&lt;/site&gt;</span><br><span class="line"></span><br><span class="line">&lt;/website&gt;</span><br></pre></td></tr></table></figure><p>上面的 XML 文档中的节点例子：</p><p><website></website> （文档节点）<br><name></name> （元素节点）<br>lang&#x3D;”zh-CN” （属性节点） </p><p>节点关系XML 文档的节点关系和 HTML 文档相似，同样有父、子、同代、先辈、后代节点。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;website&gt;</span><br><span class="line"></span><br><span class="line">&lt;site&gt;</span><br><span class="line">  &lt;title lang=&quot;zh-CN&quot;&gt;website name&lt;/title&gt;</span><br><span class="line">  &lt;name&gt;编程帮&lt;/name&gt;</span><br><span class="line">  &lt;year&gt;2010&lt;/year&gt;</span><br><span class="line">  &lt;address&gt;www.biancheng.net&lt;/address&gt;</span><br><span class="line">&lt;/site&gt;</span><br><span class="line"></span><br><span class="line">&lt;/website&gt;</span><br></pre></td></tr></table></figure><p>上述示例分析后，会得到如下结果：title name year address 都是 site 的子节点<br>site 是 title name year address 父节点<br>title name year address 属于同代节点<br>title 元素的先辈节点是 site website<br>website 的后代节点是 site title name year address</p><h5 id="Xpath基本语法"><a href="#Xpath基本语法" class="headerlink" title="Xpath基本语法"></a>Xpath基本语法</h5><ol><li>基本语法使用<br>Xpath 使用路径表达式在文档中选取节点，下表列出了常用的表达式规则：</li></ol><p>表达式描述<br>node_name<br>选取此节点的所有子节点。</p><p>&#x2F;<br>绝对路径匹配，从根节点选取。</p><p>&#x2F;&#x2F;<br>相对路径匹配，从所有节点中查找当前选择的节点，包括子节点和后代节点，其第一个 &#x2F; 表示根节点。</p><p>.<br>取当前节点。</p><p>..<br>选取当前节点的父节点。</p><p>@<br>选取属性值，通过属性值选取数据。<br>常用元素属性有 @id 、@name、@type、@class、@tittle、@href。</p><p>下面讲解 Xpath 表达式的基本应用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul class=&quot;BookList&quot;&gt;</span><br><span class="line">  &lt;li class=&quot;book1&quot; id=&quot;book_01&quot; href=&quot;http://www.biancheng.net/&quot;&gt;</span><br><span class="line">        &lt;p class=&quot;name&quot;&gt;c语言小白变怪兽&lt;/p&gt;</span><br><span class="line">        &lt;p class=&quot;model&quot;&gt;纸质书&lt;/p&gt;</span><br><span class="line">        &lt;p class=&quot;price&quot;&gt;80元&lt;/p&gt;</span><br><span class="line">        &lt;p class=&quot;color&quot;&gt;红蓝色封装&lt;/p&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  </span><br><span class="line">    &lt;li class=&quot;book2&quot; id=&quot;book_02&quot; href=&quot;http://www.biancheng.net/&quot;&gt;</span><br><span class="line">        &lt;p class=&quot;name&quot;&gt;Python入门到精通&lt;/p&gt;</span><br><span class="line">        &lt;p class=&quot;model&quot;&gt;电子书&lt;/p&gt;</span><br><span class="line">        &lt;p class=&quot;price&quot;&gt;45元&lt;/p&gt;</span><br><span class="line">        &lt;p class=&quot;color&quot;&gt;蓝绿色封装&lt;/p&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>路径表达式以及相应的匹配内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">xpath表达式：//li</span><br><span class="line"></span><br><span class="line">匹配内容：</span><br><span class="line">c语言小白变怪兽</span><br><span class="line">纸质书</span><br><span class="line">80元</span><br><span class="line">红蓝色封装</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">Python入门到精通</span><br><span class="line">电子书</span><br><span class="line">45元</span><br><span class="line">蓝绿色封装</span><br><span class="line"></span><br><span class="line">xpath表达式：//li/p[@class=&quot;name&quot;]</span><br><span class="line">匹配内容：</span><br><span class="line">c语言小白变怪兽</span><br><span class="line">Python入门到精通</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xpath表达式：//li/p[@class=&quot;model&quot;]</span><br><span class="line">匹配内容：</span><br><span class="line">纸质书</span><br><span class="line">电子书</span><br><span class="line"></span><br><span class="line">xpath表达式：//ul/li/@href</span><br><span class="line">匹配内容：</span><br><span class="line">http://www.biancheng.net/</span><br><span class="line">http://www.biancheng.net/</span><br><span class="line"></span><br><span class="line">xpath表达式：//ul/li</span><br><span class="line">匹配内容：</span><br><span class="line">c语言小白变怪兽</span><br><span class="line">纸质书</span><br><span class="line">80元</span><br><span class="line">红蓝色封装</span><br><span class="line">  </span><br><span class="line">Python入门到精通</span><br><span class="line">电子书</span><br><span class="line">45元</span><br><span class="line">蓝绿色封装</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：当需要查找某个特定的节点或者选取节点中包含的指定值时需要使用[]<strong>方括号</strong>。如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xpath表达式：//ul/li[@class=&quot;book2&quot;]/p[@class=&quot;price&quot;]</span><br><span class="line">匹配结果：45元</span><br></pre></td></tr></table></figure><ol start="2"><li>xpath通配符Xpath 表达式的<strong>通配符</strong>可以用来选取未知的节点元素，基本语法如下：<ul><li>匹配任意元素节点</li></ul></li></ol><p>@*<br>匹配任意属性节点</p><p>node()<br>匹配任意类型的节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">xpath表达式：//li/*</span><br><span class="line"></span><br><span class="line">匹配内容：</span><br><span class="line">c语言小白变怪兽</span><br><span class="line">纸质书</span><br><span class="line">80元</span><br><span class="line">红蓝色封装</span><br><span class="line">Python入门到精通</span><br><span class="line">电子书</span><br><span class="line">45元</span><br><span class="line">蓝绿色封装</span><br></pre></td></tr></table></figure><ol start="3"><li>多路径匹配多个 Xpath 路径表达式可以同时使用，其语法如下：<br>xpath表达式1 | xpath表达式2 | xpath表达式3</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">表达式：//ul/li[@class=&quot;book2&quot;]/p[@class=&quot;price&quot;]|//ul/li/@href</span><br><span class="line"></span><br><span class="line">匹配内容：</span><br><span class="line">45元</span><br><span class="line">http://www.biancheng.net/</span><br><span class="line">http://www.biancheng.net/</span><br></pre></td></tr></table></figure><p>Xpath内建函数Xpath 提供 100 多个内建函数，这些函数给我们提供了很多便利，比如实现文本匹配、模糊匹配、以及位置匹配等，下面介绍几个常用的内建函数。</p><h4 id="Python-lxml库的使用"><a href="#Python-lxml库的使用" class="headerlink" title="Python lxml库的使用"></a>Python lxml库的使用</h4><p>lxml 是 Python 的第三方解析库，完全使用 Python 语言编写，它对 Xpath 表达式提供了良好的支持，因此能够了高效地解析 HTML&#x2F;XML 文档。</p><p>lxml使用流程</p><p>lxml 库提供了一个 etree 模块，该模块专门用来解析 HTML&#x2F;XML 文档</p><p>lxml 库的使用流程：</p><ol><li><p>导入模块<br>from lxml import etree</p></li><li><p>创建解析对象调用 etree 模块的 HTML() 方法来创建 HTML 解析对象。parse_html &#x3D; etree.HTML(html)</p></li></ol><p>HTML() 方法能够将 HTML 标签字符串解析为 HTML 文件，该方法可以自动修正 HTML 文本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from lxml import etree</span><br><span class="line">html_str = &#x27;&#x27;&#x27;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">         &lt;li class=&quot;item1&quot;&gt;&lt;a href=&quot;link1.html&quot;&gt;Python&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item2&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;Java&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;site1&quot;&gt;&lt;a href=&quot;c.biancheng.net&quot;&gt;C语言中文网&lt;/a&gt;</span><br><span class="line">         &lt;li class=&quot;site2&quot;&gt;&lt;a href=&quot;www.baidu.com&quot;&gt;百度&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;site3&quot;&gt;&lt;a href=&quot;www.jd.com&quot;&gt;京东&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">     &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">html = etree.HTML(html_str)</span><br><span class="line"></span><br><span class="line"># tostring()将标签元素转换为字符串输出，注意：result为字节类型</span><br><span class="line">result = etree.tostring(html)</span><br><span class="line"></span><br><span class="line">print(result.decode(&#x27;utf-8&#x27;))</span><br></pre></td></tr></table></figure><p>上述 HTML 字符串存在缺少标签的情况，比如“C语言中文网”缺少一个  闭合标签，当使用了 HTML() 方法后，会将其自动转换为符合规范的 HTML 文档格式</p><ol start="3"><li>调用xpath表达式最后使用第二步创建的解析对象调用 xpath() 方法，完成数据的提取，如下所示：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r_list = parse_html.xpath(&#x27;xpath表达式&#x27;)</span><br></pre></td></tr></table></figure><p>lxml库</p><p>数据提取下面通过一段 HTML 代码实例演示如何使用 lxml 库提取想要的数据。HTML 代码如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;wrapper&quot;&gt;</span><br><span class="line">    &lt;a href=&quot;www.biancheng.net/product/&quot; id=&quot;site&quot;&gt;website product&lt;/a&gt;</span><br><span class="line">    &lt;ul id=&quot;sitename&quot;&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;http://www.biancheng.net/&quot; title=&quot;编程帮&quot;&gt;编程&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;http://world.sina.com/&quot; title=&quot;新浪娱乐&quot;&gt;微博&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;http://www.baidu.com&quot; title=&quot;百度&quot;&gt;百度贴吧&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;http://www.taobao.com&quot; title=&quot;淘宝&quot;&gt;天猫淘宝&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;http://www.jd.com/&quot; title=&quot;京东&quot;&gt;京东购物&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;http://c.bianchneg.net/&quot; title=&quot;C语言中文网&quot;&gt;编程&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;http://www.360.com&quot; title=&quot;360科技&quot;&gt;安全卫士&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;http://www.bytesjump.com/&quot; title=字节&quot;&gt;视频娱乐&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;http://bzhan.com/&quot; title=&quot;b站&quot;&gt;年轻娱乐&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;http://hao123.com/&quot; title=&quot;浏览器&quot;&gt;搜索引擎&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ol><li>提取所有a标签内的文本信息</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from lxml import etree</span><br><span class="line"># 创建解析对象</span><br><span class="line">parse_html=etree.HTML(html)</span><br><span class="line"># 书写xpath表达式,提取文本最终使用text()</span><br><span class="line">xpath_bds=&#x27;//a/text()&#x27;</span><br><span class="line"># 提取文本数据，以列表形式输出</span><br><span class="line">r_list=parse_html.xpath(xpath_bds)</span><br><span class="line"># 打印数据列表</span><br><span class="line">print(r_list)</span><br></pre></td></tr></table></figure><ol start="2"><li>获取所有href的属性值</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from lxml import etree</span><br><span class="line"># 创建解析对象</span><br><span class="line">parse_html=etree.HTML(html)</span><br><span class="line"># 书写xpath表达式,提取文本最终使用text()</span><br><span class="line">xpath_bds=&#x27;//a/@href&#x27;</span><br><span class="line"># 提取文本数据，以列表形式输出</span><br><span class="line">r_list=parse_html.xpath(xpath_bds)</span><br><span class="line"># 打印数据列表</span><br><span class="line">print(r_list)</span><br></pre></td></tr></table></figure><ol start="3"><li>不匹配href&#x3D;” <a href="http://www.biancheng.net/priduct&quot;">www.biancheng.net/priduct&quot;</a></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from lxml import etree</span><br><span class="line"># 创建解析对象</span><br><span class="line">parse_html=etree.HTML(html)</span><br><span class="line"># 书写xpath表达式,提取文本最终使用text()</span><br><span class="line">xpath_bds=&#x27;//a/@href&#x27;</span><br><span class="line"># 提取文本数据，以列表形式输出</span><br><span class="line">xpath_bds=&#x27;//ul[@id=&quot;sitename&quot;]/li/a/@href&#x27;</span><br><span class="line"># 打印数据列表</span><br><span class="line">print(r_list)</span><br></pre></td></tr></table></figure><h4 id="Python-json模块常用方法"><a href="#Python-json模块常用方法" class="headerlink" title="Python json模块常用方法"></a>Python json模块常用方法</h4><p>JSON（JavaScript Object Notation）是一种轻量级的数据交换格式，遵循欧洲计算机协会制定的 JavaScript 规范（简称 ECMAScript）。</p><p>它常被作为网络、程序之间传递信息的标准语言，比如客户端与服务器之间信息交互就是以 JSON 格式传递的。</p><p>简单地说，JSON 可以将 JavaScript 对象表示的一组数据转换为字符串格式，以便于在网络、程序间传输这个字符串。</p><p>并且在需要的时候，您还可以将它转换为编程语言所支持的数据格式。本节主要介绍如何实现 JSON 数据与 Python 数据类型间的相互转换。</p><p>Python 语言内置了专门处理 JOSN 数据的模块 —— jons 模块，通过该模块就可以完成 JSON 与 Python 两种数据格式的相互转换。</p><p>json.dump()</p><p>它可以将 Python 对象（字典、列表等）转换为 json 字符串，并将转换后的数据写入到 json 格式的文件中 ，因此该方法必须操作<strong>文件</strong>流对象。</p><p>比如当使用爬虫程序完成数据抓取后，有时需要将数据保存为 json 格式，此时就用到了 json.dump() 方法，语法格式如下：</p><p>json.dump(object,f,inden&#x3D;0，ensure_ascii&#x3D;False)</p><p>object：Python 数据对象，比如字典，列表等</p><p>f：文件流对象，即文件句柄。</p><p>indent：格式化存储数据，使 JSON 字符串更易阅读。</p><p>ensure_ascii：是否使用 ascii 编码，当数据中出现中文的时候，需要将其设置为 False。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">ditc_info=&#123;&quot;name&quot; : &quot;c语言中文网&quot;,&quot;PV&quot; : &quot;50万&quot;,&quot;UV&quot; : &quot;20万&quot;,&quot;create_time&quot; : &quot;2010年&quot;&#125;</span><br><span class="line">with open(&quot;web.josn&quot;,&quot;a&quot;) as f:</span><br><span class="line">    json.dump(ditc_info,f,ensure_ascii=False)</span><br></pre></td></tr></table></figure><p>也可以将 Python 列表转换成 JSON 字符串，并保存至 json 文件中，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">item_list = []</span><br><span class="line">item = &#123;&#x27;website&#x27;: &#x27;C语言中文网&#x27;, &#x27;url&#x27;: &quot;c.biancheng.net&quot;&#125;</span><br><span class="line">for k,v in item.items():</span><br><span class="line">    item_list.append(v)</span><br><span class="line"></span><br><span class="line">with open(&#x27;info_web.json&#x27;, &#x27;a&#x27;) as f:</span><br><span class="line">    json.dump(item_list, f, ensure_ascii=False)</span><br></pre></td></tr></table></figure><p>json.load()</p><p>该方法用于操作文件流对象，不过它与 dump() 恰好相反，它表示从  json 文件中读取 JSON 字符串，并将读取内容转换为 Python 对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">site = &#123;&#x27;name&#x27;:&#x27;c语言中文网&#x27;,&quot;url&quot;:&quot;c.biancheng.net&quot;&#125;</span><br><span class="line">filename = &#x27;website.json&#x27;</span><br><span class="line">with open (filename,&#x27;w&#x27;) as f:</span><br><span class="line">    json.dump(site,f,ensure_ascii=False)</span><br><span class="line">with open (filename,&#x27;r&#x27;) as f:</span><br><span class="line">    print(json.load(f))</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>json.loads()</p><p>该方法可以将 json 格式的字符串转换成 Python 对象（比如列表、字典、元组、整型以及浮点型），其中最常用的是转换为字典类型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># coding:utf8</span><br><span class="line">import json</span><br><span class="line">#JOSN字符串</span><br><span class="line">website_info=&#x27;&#123;&quot;name&quot; : &quot;c语言中文网&quot;,&quot;PV&quot; : &quot;50万&quot;,&quot;UV&quot; : &quot;20万&quot;,&quot;create_time&quot; : &quot;2010年&quot;&#125;&#x27;</span><br><span class="line">py_dict=json.loads(website_info)</span><br><span class="line">print(&quot;python字典数据格式：%s；数据类型：%s&quot;% (py_dict,type(py_dict)))</span><br></pre></td></tr></table></figure><p>注意：上述示例中 JSON 字符串看上去和 Python 字典非常相似，但是其本质不同，JOSN 是字符串类型，而 Python 字典是 dict 类型。</p><p>json.dumps()<br>该方法可以将 Python 对象转换成 JSON 字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line">#python字典</span><br><span class="line">item = &#123;&#x27;website&#x27;: &#x27;C语言中文网&#x27;, &#x27;rank&#x27;: 1&#125;</span><br><span class="line"># json.dumps之后</span><br><span class="line">item = json.dumps(item,ensure_ascii=False)</span><br><span class="line">print(&#x27;转换之后的数据类型为：&#x27;,type(item))</span><br><span class="line">print(item)</span><br></pre></td></tr></table></figure><p>方法作用json.dumps()将 Python 对象转换成 JSON 字符串。json.loads()将 JSON 字符串转换成 Python 对象。json.dump()将 Python 中的对象转化成 JSON 字符串储存到文件中。json.load()将文件中的 JSON 字符串转化成 Python 对象提取出来。</p><p>综上所述 json.load() 与 json.dump() 操作的是文件流对象，实现了 json 文件的读写操作，而 json.loads() 与 json.dumps() 操作的是 Python 对象或者 JOSN 字符串。</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-random库</title>
      <link href="/post/86d4ae82.html"/>
      <url>/post/86d4ae82.html</url>
      
        <content type="html"><![CDATA[<p>random库</p><p>random模块实现了各种分布的伪随机数生成器，为什么称为伪随机数：即使人类使用算法等方式，以一个基准（也被叫做种子，最常用的就是时间戳）来构造一系列数字，这些数字的特控符合人们所理解的随机数。但因为是通过算法得到的，所以一旦算法和种子都确定，那么产生的随机数序列也是确定的，所以叫伪随机数</p><p>常用函数</p><p>random.seed(a)</p><p>设置初始化随机种子，可输出相同随机数序列；a取整数或浮点数，不设置时默认以系统时间为种子。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">print(&quot;没有设置种子时&quot;)</span><br><span class="line">for i in range(5):</span><br><span class="line">    ret = random.randint(1, 10)</span><br><span class="line">    print(ret, end=&quot; &quot;)</span><br><span class="line">print()</span><br><span class="line">print(&quot;设置种子时&quot;)</span><br><span class="line">random.seed(1)</span><br><span class="line">for i in range(5):</span><br><span class="line">    ret = random.randint(1, 10)</span><br><span class="line">    print(ret, end=&quot; &quot;)</span><br></pre></td></tr></table></figure><p>没有显示设定种子时，每次输出的随机数都是不一样的；显示设置种子时，每次输出的随机数都是一样的。</p><p>random.random() # 用于生成一个0.0到1.0的随机数<br>print(random.random())</p><p>random.uniform(a, b) # 生成一个[a, b]之间的随机小数；a,b取整数或浮点数</p><p>print(random.uniform(10, 20))</p><p>random.randint(a, b)  # 生成一个[a, b]之间随机整数</p><p>print(random.randint(10, 20))</p><p>random.randrange(start, stop, [step])</p><p>#生成一个[start, stop]之间以step步数的随机整数：start,stop,step取整数,step不设置时默认值为1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(random.randrange(1, 100))  # 随机生成1-100之间的整数</span><br><span class="line"> </span><br><span class="line">print(random.randrange(1, 100, 2))  # 随机生成1-100之间奇数</span><br><span class="line"> </span><br><span class="line">print(random.randrange(2, 100, 2))  # 随机生成1-100之间偶数</span><br></pre></td></tr></table></figure><p>random.getrandbits(k)  # 生成一个占内存k位以内的随机整数；k取长度的整数值</p><p>print(random.getrandbits(10))<br> 生成一个内存占k位以内的随机数；k取长度的整数值</p><p>random.choice(seq)  # 从序列类型seq中随机返回一个元素；seq取序列类型：如字符串、列表、元组<br>print(random.choice([1, ‘10’, 3, 5, 7, 1001]))</p><p>random.shuffle(seq)<br>将序列类型中元素随机排序，返回打乱后序列，seq被改变（改变原序列），shuffle为洗牌之意；seq取序列类型：如字符串，列表，元组<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;]</span><br><span class="line">random.shuffle(list)</span><br><span class="line">print(list)</span><br></pre></td></tr></table></figure></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">def get_random_string(length):</span><br><span class="line">    # 随机生成字母和数字的位数</span><br><span class="line">    num_count = random.randint(1, length-1)</span><br><span class="line">    letter_count = length-num_count</span><br><span class="line">    # 随机抽样生成数字序列</span><br><span class="line">    num_list = [random.choice(string.digits) for _ in range(num_count)]</span><br><span class="line">    # 随机抽样生成字母序列</span><br><span class="line">    letter_list = [random.choice(string.ascii_letters) for _ in range(letter_count)]</span><br><span class="line">    # 合并字母和数字</span><br><span class="line">    all_list = num_list + letter_list</span><br><span class="line">    # 乱序</span><br><span class="line">    random.shuffle(all_list)</span><br><span class="line">    result = &quot;&quot;.join(i for i in all_list)</span><br><span class="line">    return result</span><br><span class="line"># 生成10位的密码</span><br><span class="line">password1 = get_random_string(10)</span><br><span class="line">print(password1)</span><br></pre></td></tr></table></figure><p>可以使用这种调用其的方式、</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//创建随机数对象</span><br><span class="line">      Random random = new Random();</span><br><span class="line"></span><br><span class="line">      //随机产生一个int类型取值范围内的数字。</span><br><span class="line">      int num1 = random.nextInt();</span><br><span class="line">      System.out.println(num1);</span><br><span class="line"></span><br><span class="line">      //产生一个[0-100]之间的随机数</span><br><span class="line">      int num2 = random.nextInt(101);</span><br><span class="line">      System.out.println(num2);//不包括101</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tkinter-event事件</title>
      <link href="/post/f50e177a.html"/>
      <url>/post/f50e177a.html</url>
      
        <content type="html"><![CDATA[<h5 id="Tkinter-Event事件处理"><a href="#Tkinter-Event事件处理" class="headerlink" title="Tkinter Event事件处理"></a>Tkinter Event事件处理</h5><p>事件处理，是 GUI 程序中不可或缺的重要组成部分，相比来说，控件只是组成一台机器的零部件， 而事件处理则是驱动这台机器“正常”运转的关键所在，它能够将零部件之间“优雅”的贯穿起来，因此“事件处理”可谓是 GUI 程序的“灵魂”，同时它也是实现人机交互的关键。</p><p>在一款 GUI 程序中，我们将用户对软件的操作统称为“事件”，比如鼠标点击按钮、键盘输入文本以及窗口管理器触发的重绘事件等，这些事件有一个共同的特点，即都是由用户直接或者间接触发的。</p><p>事件绑定方法</p><p>Tkinter 提供的事件处理机制允许我们为“控件”绑定相应的事件和事件处理函数（即 callback函数），从而实现控件与用户的交互<br>语法格式：widget.bind(“<event>“,func)</event></p><p>widget 代表控件的实例对象，之后，采用 bind() 方法进行事件绑定<br>该函数有两个参数：<br><event>：一个字符串参数，表示事件的类型，并使用“尖括号”的形式进行包裹；<br>func：表示事件的处理函数（callback，即回调函数），当触发事件时，Tk 会携带事件对象（Event）去调用 func 方法。</event></p><p><strong>注意：bind() 方法可以完成事件与处理函数绑定，而使用 unbind() 方法可以将事件与处理函数解绑。</strong></p><p>常用事件类型</p><p>事件类型（也称事件码）是 Tkinter 模块规定的，主要包括鼠标、键盘、光标等相关事件</p><p>Tkinter 为其规定了相应的语法格式：</p><modifier-type-detail><p>上述语法由三部分组成：<br>&lt;&gt;：事件类型必须包含在“尖括号”内；</p><p>modifier：可选项，事件类型的修饰符，通常用于描述组合键、双击<Double-Button-1>、大写锁定键<Lock>以及<Alt-Shift>等；</Alt-Shift></Lock></Double-Button-1></p><p>type：是必不可少的一项，表示事件的具体类型；</p><p>detail：可选项，通常用于描述具体的哪个按键，比如 <Button-1> 表示鼠标左键；</Button-1></p><p>这里有必要对经常使用的 modifier 修饰符做简单的介绍，修饰符可以修改事件的激活条件，比如双击鼠标或者需要同时按下某个键才触发事件，常用的修饰符如下：</p><p>Control<br>事件发生时需按下 Control 键</p><p>Alt<br>事件发生时需按下 Alt 键</p><p>Shift<br>事件发生时需按下 Shift 键</p><p>Lock<br>事件发生时需处于大写锁定状态</p><p>Double<br>事件连续发生两次，比如双击鼠标</p><p>Triple<br>事件连续发生三次</p><p>Quadruple<br>事件连续发生四次</p><p> Tkinter 中经常使用的事件类型：</p><p><ButtonPress-1>单击鼠标左键，简写为<Button-1>，后面的数字可以是1&#x2F;2&#x2F;3，分别代表左键、中间滑轮、右键</Button-1></ButtonPress-1></p><ButtonRelease-1>释放鼠标左键，后面数字可以是1/2/3，分别代表释放左键、滑轮、右键<B1-Motion>按住鼠标左键移动，<B2-Motion>和<B3-Motion>分别表示按住鼠标滑轮移动、右键移动<MouseWheel>转动鼠标滑轮<Double-Button-1>双击鼠标左键<Enter>鼠标光标进入控件实例<Leave>鼠标光标离开控件实例<Key>按下键盘上的任意键<p>&lt;KeyPress-字母&gt;&#x2F;&lt;KeyPress-数字&gt;按下键盘上的某一个字母或者数字键</p><KeyRelease>释放键盘上的按键<Return>回车键，其他同类型键有<Shift>/<Tab>/<Control>/<Alt><Space>空格键<UP>/<Down>/<Left>/<Right>方向键<F1>...<F12>常用的功能键<Control-Alt>组合键，再比如<Control-Shift-KeyPress-T>，表示用户同时点击 Ctrl + Shift + T<FocusIn>当控件获取焦点时候触发<p>比如鼠标点击输入控件输入内容，可以调用 <strong>focus_set()</strong> 方法使控件获得焦点<br><FocusOut>当控件失去焦点时激活</FocusOut></p><p>比如当鼠标离开输入框的时候<Configure>控件的发生改变的时候触发事件</Configure></p><p>比如调整了控件的大小等<Deactivate>当控件的状态从“激活”变为“未激活”时触发事件</Deactivate></p><p><Destroy>当控件被销毁的时候触发执行事件的函数</Destroy></p><p><Expose>当窗口或组件的某部分不再被覆盖的时候触发事件</Expose></p><p><Visibility>当应用程序至少有一部分在屏幕中是可见状态时触发事件</Visibility></p><p>Event事件对象</p><p>当事件触发后，Tkinter 会自动将事件对象交给回调函数进行下步的处理<br>Event 对象包含常用属性：</p><p>widget<br>发生事件的是哪一个控件</p><p>x,y相对于窗口的左上角而言，当前鼠标的坐标位置</p><p>x_root,y_root<br>相对于屏幕的左上角而言，当前鼠标的坐标位置</p><p>char<br>用来显示所按键相对应的字符</p><p>keysym<br>查看按键名，比如 Control_L 表示左边的 Ctrl 按键keycode按键码，一个按键的数字编号，比如 Delete 按键码是107num1&#x2F;2&#x2F;3中的一个，表示点击了鼠标的哪个按键，按键分为左、中、右</p><p>width,height<br>控件的修改后的尺寸，对应着 <Configure>事件type事件类型</Configure></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">from tkinter import *</span><br><span class="line"># 定义事件函数，必须用event参数</span><br><span class="line">def show_key(event):</span><br><span class="line">    # 查看触发事件的按钮</span><br><span class="line">    s=event.keysym</span><br><span class="line">    # 将其显示在按钮控件上</span><br><span class="line">    lb.config(text=s)</span><br><span class="line"></span><br><span class="line">root=Tk()</span><br><span class="line">root.geometry(&#x27;450x350+300+200&#x27;)</span><br><span class="line"></span><br><span class="line"># 添加一个按钮控件</span><br><span class="line">lb=Label(root,text=&#x27;请按键&#x27;,fg=&#x27;blue&#x27;,font=(&#x27;微软雅黑&#x27;,15))</span><br><span class="line"># 给按钮控件绑定事件，按下任意键，然后调用事件处理函数。注意，此处需要在英文状态下进行输入</span><br><span class="line">lb.bind(&#x27;&lt;Key&gt;&#x27;,show_key)</span><br><span class="line"># 设置按钮获取焦点，这里必须使用这个</span><br><span class="line">lb.focus_set()</span><br><span class="line">lb.pack()</span><br><span class="line"># 显示窗口</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><p>注意：只有当 Label 控件获取焦点后才能接收键盘事件，因此在给控件绑定事件和回调函数后，需要使用 focus_set() 方法来获取焦点。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 定义事件函数</span><br><span class="line">from tkinter import *</span><br><span class="line">def handleMotion(event):</span><br><span class="line">    lb1[&#x27;text&#x27;] = &#x27;你移动了光标的所在位置&#x27;</span><br><span class="line">    lb2[&#x27;text&#x27;] = &#x27;目前光标位置：x =&#x27;+ str(event.x)+&#x27;;y=&#x27;+str(event.y)</span><br><span class="line">    print(&#x27;光标当前位置&#x27;,event.x,event.y)</span><br><span class="line">win = Tk()</span><br><span class="line">win.config(bg=&#x27;#87CEEB&#x27;)</span><br><span class="line">win.geometry(&#x27;450x350+300+200&#x27;)</span><br><span class="line"># 创建一个窗体容器frame</span><br><span class="line">frame = Frame (win, relief=RAISED, borderwidth=2, width=300,height=200)</span><br><span class="line">frame.bind(&#x27;&lt;Motion&gt;&#x27;,handleMotion)</span><br><span class="line">lb1 = Label(frame,text=&#x27;没有任何事件触发&#x27;, bg=&#x27;purple&#x27;, )</span><br><span class="line">lb1.place (x=20,y=20)</span><br><span class="line">lb2 = Label(frame,text=&#x27;&#x27;)</span><br><span class="line">lb2.place (x=16,y=60)</span><br><span class="line">frame.pack(side=TOP)</span><br><span class="line"># 显示窗口</span><br><span class="line">win.mainloop()</span><br></pre></td></tr></table></figure></FocusIn></Control-Shift-KeyPress-T></Control-Alt></F12></F1></Right></Left></Down></UP></Space></Alt></Control></Tab></Shift></Return></KeyRelease></Key></Leave></Enter></Double-Button-1></MouseWheel></B3-Motion></B2-Motion></B1-Motion></ButtonRelease-1></modifier-type-detail>]]></content>
      
      
      <categories>
          
          <category> python--tkinter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python搞笑表白</title>
      <link href="/post/ce6b206b.html"/>
      <url>/post/ce6b206b.html</url>
      
        <content type="html"><![CDATA[<p>博主使用python 制作了一个网上经常看见的搞笑表白程序</p><p>本来是想将其打包成exe程序的，但是因为里面涉及有图片</p><p>所以打包起来非常的麻烦，所以博主这里就没有打包了</p><p>其实刚开始博主想制作的并不是现在做出来的这个程序 而是和用js css做出来的那种一样</p><p>但是由于 这里我主要使用的是tkinter这个GUI库，就里面的许多操作实现起来就比较麻烦</p><p>最后博主就做的这种的了</p><p>说说做这个的时候遇到的一些问题吧！</p><ol><li><p>在子页面加载图片问题</p><p>通过使用tkinter里面自带的加载图片工具是加载不了的</p><p>解决：通过 opencv里面的加载图片方法（下面的程序就是使用的这种方法）</p><p>​通过 PIL里面的加载图片方法，但是要注意加载的图片类型</p></li><li><p>不允许关闭主窗口问题</p><p>这个程序 ，你发给小姐姐，结果人家直接一个钢叉给你关闭了，你这白忙活一宿🤣 就尴尬了</p><p>解决：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from Tkinter import *</span><br><span class="line">import tkMessageBox</span><br><span class="line"> </span><br><span class="line">def callback():</span><br><span class="line">    if tkMessageBox.askokcancel(&quot;Quit&quot;, &quot;Do you really wish to quit?&quot;):</span><br><span class="line">        root.destroy()</span><br><span class="line"> </span><br><span class="line">root = Tk()</span><br><span class="line">root.protocol(&quot;WM_DELETE_WINDOW&quot;, callback)</span><br><span class="line"> </span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><p>可以参考一下上面这段代码，或者去廖雪峰老师的网站看一下</p><p>博主使用的就和上面这个有一定的区别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 让窗口不能关闭函数   </span><br><span class="line">def callback(event):</span><br><span class="line">    # 查看触发事件的按钮</span><br><span class="line">    s=event.keysym</span><br><span class="line">    if s == &quot;Escape&quot;:</span><br><span class="line">        root.destroy()</span><br><span class="line">root.protocol(&quot;WM_DELETE_WINDOW&quot;, callback)</span><br><span class="line">root.bind(&#x27;&lt;Key&gt;&#x27;,callback)</span><br><span class="line">root.focus_set()</span><br></pre></td></tr></table></figure></li><li><p>布局问题</p><p>​这里博主建议不会的小伙伴可以直接去看 这篇<a href="https://1yzf2zst.github.io/post/33f31c3e.html">文章</a></p><p>​博主这里就不说了，那边文章详细的介绍了布局</p></li><li><p>打包成exe程序问题</p><p>这个带图片的tkinterchengxu 打包成exe程序 有点太麻烦了，😥有操作比较流利的小伙伴可以教教博主、</p><p>解决：未解决</p></li></ol><p>这里博主给一个百度网盘的分享链接<a href="https://pan.baidu.com/s/1aYqFRZwmfcMtvudBGBBmLw">传送门</a><br>提取码：2111</p><p><strong>下面就直接给大家上源码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line">import tkinter as tk</span><br><span class="line">from PIL import Image, ImageTk</span><br><span class="line">import numpy as np</span><br><span class="line">import cv2</span><br><span class="line">import time</span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(&quot;小姐姐，我来表白啦，别跑呀&quot;)</span><br><span class="line">root.geometry(&quot;450x300&quot;)</span><br><span class="line">root.resizable(0,0)</span><br><span class="line">root.iconbitmap(&quot;icon.ico&quot;)</span><br><span class="line">image=tk.PhotoImage(file=&quot;cp2.png&quot;)</span><br><span class="line"></span><br><span class="line"># 不同意按钮弹窗</span><br><span class="line">def disagree1():</span><br><span class="line">    root1 = tk.Tk()</span><br><span class="line">    root1.title(&quot;小姐姐，我来表白啦，别跑呀&quot;)</span><br><span class="line">    root1.geometry(&quot;300x200&quot;)</span><br><span class="line">    root1.resizable(0,0)</span><br><span class="line">    root1.iconbitmap(&quot;icon.ico&quot;)</span><br><span class="line">    l1= tk.Label(root1,text=&quot;我妈会游泳&quot;,font=(&#x27;楷书&#x27;,15))</span><br><span class="line">    l1.place(x=100,y=20)     </span><br><span class="line">    btn= tk.Button(root1,text=&quot;勉强接受&quot;,bg=&quot;#e09780&quot;,command=root1.destroy) </span><br><span class="line">    btn.place(x=100,y=80)</span><br><span class="line">    btn1= tk.Button(root,text=&#x27;勉强接受&#x27;,bg=&quot;#AAAAFF&quot;,command=disagree2)</span><br><span class="line">    btn1.place(x=300,y=200)</span><br><span class="line">    root1.mainloop()</span><br><span class="line">    </span><br><span class="line">def disagree2():</span><br><span class="line">    # messagebox.showinfo(&#x27;小姐姐我喜欢你&#x27;,&#x27;我妈会游泳&#x27;)</span><br><span class="line">    root2 = tk.Tk()</span><br><span class="line">    root2.title(&quot;小姐姐，我来表白啦，别跑呀&quot;)</span><br><span class="line">    root2.geometry(&quot;300x200&quot;)</span><br><span class="line">    root2.resizable(0,0)</span><br><span class="line">    root2.iconbitmap(&quot;icon.ico&quot;)</span><br><span class="line">    l1= tk.Label(root2,text=&quot;保大&quot;,font=(&#x27;楷书&#x27;,25))</span><br><span class="line">    l1.place(x=100,y=20)     </span><br><span class="line">    btn= tk.Button(root2,text=&quot;还不错&quot;,bg=&quot;#e09780&quot;,command=root2.destroy) </span><br><span class="line">    btn.place(x=100,y=80)</span><br><span class="line">    btn2= tk.Button(root,text=&#x27;还不错&#x27;,bg=&quot;#AAAAFF&quot;,command=disagree3)</span><br><span class="line">    btn2.place(x=300,y=200)</span><br><span class="line">    root2.mainloop()</span><br><span class="line">def disagree3():</span><br><span class="line">    # messagebox.showinfo(&#x27;小姐姐我喜欢你&#x27;,&#x27;我妈会游泳&#x27;)</span><br><span class="line">    root3 = tk.Tk()</span><br><span class="line">    root3.title(&quot;小姐姐，我来表白啦，别跑呀&quot;)</span><br><span class="line">    root3.geometry(&quot;300x200&quot;)</span><br><span class="line">    root3.resizable(0,0)</span><br><span class="line">    root3.iconbitmap(&quot;icon.ico&quot;)</span><br><span class="line">    l1= tk.Label(root3,text=&quot;房产证写你的名字&quot;,font=(&#x27;楷书&#x27;,15))</span><br><span class="line">    l1.place(x=50,y=20)     </span><br><span class="line">    btn= tk.Button(root3,text=&quot;还差点&quot;,bg=&quot;#e09780&quot;,command=root3.destroy) </span><br><span class="line">    btn.place(x=150,y=80)</span><br><span class="line">    btn2= tk.Button(root,text=&#x27;还差点&#x27;,bg=&quot;#AAAAFF&quot;,command=disagree4)</span><br><span class="line">    btn2.place(x=300,y=200)</span><br><span class="line">    root3.mainloop()</span><br><span class="line">def disagree4():</span><br><span class="line">    # messagebox.showinfo(&#x27;小姐姐我喜欢你&#x27;,&#x27;我妈会游泳&#x27;)</span><br><span class="line">    root4 = tk.Tk()</span><br><span class="line">    root4.title(&quot;小姐姐，我来表白啦，别跑呀&quot;)</span><br><span class="line">    root4.geometry(&quot;300x200&quot;)</span><br><span class="line">    root4.resizable(0,0)</span><br><span class="line">    root4.iconbitmap(&quot;icon.ico&quot;)</span><br><span class="line">    l1= tk.Label(root4,text=&quot;给你买冰淇淋&quot;,font=(&#x27;楷书&#x27;,15))</span><br><span class="line">    l1.place(x=100,y=20)     </span><br><span class="line">    btn= tk.Button(root4,text=&quot;这还差不多 哼&quot;,bg=&quot;#e09780&quot;,command=root4.destroy) </span><br><span class="line">    btn.place(x=150,y=80)</span><br><span class="line">    btn2= tk.Button(root,text=&#x27;去你的&#x27;,bg=&quot;#AAAAFF&quot;,command=disagree1)</span><br><span class="line">    btn2.place(x=300,y=200)</span><br><span class="line">    root4.mainloop()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"># 同意按钮弹窗</span><br><span class="line">def agree1():</span><br><span class="line">    root1 = tk.Tk()</span><br><span class="line">    root1.title(&quot;小姐姐，我来表白啦，别跑呀&quot;)</span><br><span class="line">    root1.geometry(&quot;300x200&quot;)</span><br><span class="line">    root1.resizable(0,0)</span><br><span class="line">    root1.iconbitmap(&quot;icon.ico&quot;)</span><br><span class="line">    l1= tk.Label(root1,text=&quot;我就知道你会同意的 嘻嘻&quot;,font=(&#x27;楷书&#x27;,10))</span><br><span class="line">    l1.place(x=100,y=20)     </span><br><span class="line">    btn= tk.Button(root1,text=&quot;happy&quot;,bg=&quot;#e09780&quot;,command=agree2)</span><br><span class="line">    btn.place(x=150,y=80)</span><br><span class="line">    root1.mainloop()</span><br><span class="line">def agree2():</span><br><span class="line">    root1 = tk.Tk()</span><br><span class="line">    root1.title(&quot;小姐姐，我来表白啦，别跑呀&quot;)</span><br><span class="line">    root1.geometry(&quot;300x200&quot;)</span><br><span class="line">    root1.resizable(0,0)</span><br><span class="line">    root1.iconbitmap(&quot;icon.ico&quot;)</span><br><span class="line">    l1= tk.Label(root1,text=&quot;走啦！我的小仙女 吃饭去&quot;,font=(&#x27;楷书&#x27;,15))</span><br><span class="line">    l1.place(x=20,y=20)     </span><br><span class="line">    btn= tk.Button(root1,text=&quot;走咯&quot;,bg=&quot;#e09780&quot;,command=agree3)</span><br><span class="line">    btn.place(x=150,y=80)</span><br><span class="line">    root1.mainloop()   </span><br><span class="line">def agree3():</span><br><span class="line">    root1 = tk.Tk()</span><br><span class="line">    root1.title(&quot;小姐姐，我来表白啦，别跑呀&quot;)</span><br><span class="line">    root1.geometry(&quot;350x200&quot;)</span><br><span class="line">    root1.resizable(0,0)</span><br><span class="line">    root1.iconbitmap(&quot;icon.ico&quot;)</span><br><span class="line">    l1= tk.Label(root1,text=&quot;等等，我想牵着你的手手去  嘿嘿&quot;,font=(&#x27;楷书&#x27;,12))</span><br><span class="line">    l1.place(x=10,y=20)     </span><br><span class="line">    btn= tk.Button(root1,text=&quot;走咯&quot;,bg=&quot;#e09780&quot;,command=agree4) </span><br><span class="line">    btn.place(x=150,y=80)</span><br><span class="line">    root1.mainloop()</span><br><span class="line"># 显示素描图片</span><br><span class="line">def agree4():</span><br><span class="line">    root1 = tk.Tk()</span><br><span class="line">    root1.title(&quot;小姐姐，我来表白啦，别跑呀&quot;)</span><br><span class="line">    root1.geometry(&quot;350x200&quot;)</span><br><span class="line">    root1.resizable(0,0)</span><br><span class="line">    root1.iconbitmap(&quot;icon.ico&quot;)</span><br><span class="line">    l1= tk.Label(root1,text=&#x27;等等 给你个惊喜哦！&#x27;)</span><br><span class="line">    l1.place(x=20,y=20)  </span><br><span class="line">    btn= tk.Button(root1, text=&quot;点我哦&quot;,bg=&quot;#e09780&quot;,command=agree5) </span><br><span class="line">    btn.place(x=150,y=80)</span><br><span class="line">    root1.mainloop()</span><br><span class="line">def agree5():</span><br><span class="line">    root1 = tk.Tk()</span><br><span class="line">    root1.title(&quot;小姐姐，我来表白啦，别跑呀&quot;)</span><br><span class="line">    root1.geometry(&quot;350x200&quot;)</span><br><span class="line">    root1.resizable(0,0)</span><br><span class="line">    root1.iconbitmap(&quot;icon.ico&quot;)</span><br><span class="line">    l1= tk.Label(root1,text=&#x27;哈哈，骗你的小傻瓜！&#x27;)</span><br><span class="line">    l1.place(x=20,y=20)  </span><br><span class="line">    btn= tk.Button(root1, text=&quot;揍我?&quot;,bg=&quot;#e09780&quot;,command=agree6) </span><br><span class="line">    btn.place(x=150,y=80)</span><br><span class="line">    root1.mainloop()</span><br><span class="line">def agree6():</span><br><span class="line">    root1 = tk.Tk()</span><br><span class="line">    root1.title(&quot;小姐姐，我来表白啦，别跑呀&quot;)</span><br><span class="line">    root1.geometry(&quot;350x200&quot;)</span><br><span class="line">    root1.resizable(0,0)</span><br><span class="line">    root1.iconbitmap(&quot;icon.ico&quot;)</span><br><span class="line">    l1= tk.Label(root1,text=&#x27;我怎么舍得骗我的xxx呢&#x27;)</span><br><span class="line">    l1.place(x=20,y=20)  </span><br><span class="line">    btn= tk.Button(root1, text=&quot;有惊喜哦&quot;,bg=&quot;#e09780&quot;,command=agree7) </span><br><span class="line">    btn.place(x=150,y=80)</span><br><span class="line">    root1.mainloop()</span><br><span class="line">def agree7():</span><br><span class="line">    root1 = tk.Tk()</span><br><span class="line">    root1.title(&quot;小姐姐，我来表白啦，别跑呀&quot;)</span><br><span class="line">    root1.geometry(&quot;350x200&quot;)</span><br><span class="line">    root1.resizable(0,0)</span><br><span class="line">    root1.iconbitmap(&quot;icon.ico&quot;)</span><br><span class="line">    l1= tk.Label(root1,text=&#x27;嘿嘿 果然上当了 小笨蛋&#x27;)</span><br><span class="line">    l1.place(x=20,y=20)</span><br><span class="line">    root1.bind(&#x27;&lt;Motion&gt;&#x27;,agree8)</span><br><span class="line">    root1.focus_set()</span><br><span class="line">    root1.mainloop()  </span><br><span class="line">def agree8(event):</span><br><span class="line">    root1 = tk.Tk()</span><br><span class="line">    root1.title(&quot;小姐姐，我来表白啦，别跑呀&quot;)</span><br><span class="line">    root1.geometry(&quot;350x200&quot;)</span><br><span class="line">    root1.resizable(0,0)</span><br><span class="line">    root1.iconbitmap(&quot;icon.ico&quot;)</span><br><span class="line">    l1= tk.Label(root1,text=&#x27;当当当 别眨眼哦 惊喜在这呢&#x27;)</span><br><span class="line">    l1.place(x=20,y=20)</span><br><span class="line">    root1.bind(&#x27;&lt;Motion&gt;&#x27;,agree9)</span><br><span class="line">    root1.focus_set()</span><br><span class="line">    root1.mainloop() </span><br><span class="line"># 显示图片窗口 </span><br><span class="line">def agree9(event):</span><br><span class="line">    img = cv2.imread(&#x27;cp1.png&#x27;)</span><br><span class="line">    print(img)</span><br><span class="line">    cv2.imshow(&#x27;image&#x27;,img)</span><br><span class="line">    cv2.waitKey(5000)</span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line">    # 这里是一个图片格式转换操作，如果使用PIL里面的方法显示图片的画有可能会出现格式错误打不开图片</span><br><span class="line">    # from PIL import Image</span><br><span class="line">    # img = Image.open(&quot;cp1.png&quot;)</span><br><span class="line">    # im= img.convert(&quot;RGB&quot;)</span><br><span class="line">    # im.save(&quot;D:\\File\\All\\python\\love\\image.jpg&quot;)</span><br><span class="line">    </span><br><span class="line"># 让窗口不能关闭函数   </span><br><span class="line">def callback(event):</span><br><span class="line">    # 查看触发事件的按钮</span><br><span class="line">    s=event.keysym</span><br><span class="line">    if s == &quot;Escape&quot;:</span><br><span class="line">        root.destroy()</span><br><span class="line">    </span><br><span class="line">text3= tk.Label(root,text=&quot;小姐姐我观察你好久了&quot;)</span><br><span class="line">text3.place(x=30,y=10)</span><br><span class="line">text4= tk.Label(root,text=&quot;做我女朋友好不好？&quot;,font=(&#x27;宋体&#x27;,20))</span><br><span class="line">text4.place(x=60,y=80)</span><br><span class="line"></span><br><span class="line">btn1= tk.Button(root,text=&#x27;我同意&#x27;,bg=&quot;#AAAAFF&quot;,command=agree1)</span><br><span class="line">btn1.place(x=100,y=200)</span><br><span class="line">btn1= tk.Button(root,text=&#x27;去你的&#x27;,bg=&quot;#AAAAFF&quot;,command=disagree1)</span><br><span class="line">btn1.place(x=300,y=200)</span><br><span class="line"></span><br><span class="line">img= tk.Label(root, image=image)</span><br><span class="line">img.place(x=300,y=40)</span><br><span class="line"></span><br><span class="line"># 让x不能关闭窗口只能点escape才能关闭窗口 </span><br><span class="line">root.protocol(&quot;WM_DELETE_WINDOW&quot;, callback)</span><br><span class="line">root.bind(&#x27;&lt;Key&gt;&#x27;,callback)</span><br><span class="line">root.focus_set()</span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有问题的小伙伴可以直接私信博主（头像下面有联系方式哦）</p><p>展示（只放了一部分）</p><img src="/post/ce6b206b/1.png" class title="This is an image"><img src="/post/ce6b206b/2.png" class title="This is an image"><img src="/post/ce6b206b/3.png" class title="This is an image"><img src="/post/ce6b206b/4.png" class title="This is an image"><img src="/post/ce6b206b/5.png" class title="This is an image"><img src="/post/ce6b206b/6.png" class title="This is an image">]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搞笑表白 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tkinter-布局管理器</title>
      <link href="/post/33f31c3e.html"/>
      <url>/post/33f31c3e.html</url>
      
        <content type="html"><![CDATA[<h5 id="Tkinter布局管理器（三种方法详解）"><a href="#Tkinter布局管理器（三种方法详解）" class="headerlink" title="Tkinter布局管理器（三种方法详解）"></a>Tkinter布局管理器（三种方法详解）</h5><p>布局管理指的是通过管理控件在窗口中的位置（排版），从而实现对窗口和控件布局的目的。Tkinter 提供了一系列布局管理的方法和容器控件。</p><p>Tkinter 提供了三种常用的布局管理器，分别是 pack()、grid() 以及 place()，如下：</p><p>方法说明<br>pack()按照控件的添加顺序其进行排列，遗憾的是此方法灵活性较差</p><p>grid()以行和列（网格）形式对控件进行排列，此种方法使用起来较为灵活</p><p>place()可以指定组件大小以及摆放位置，三个方法中最为灵活的布局方法</p><p>pack()</p><p>pack() 是一种较为简单的布局方法，在不使用任何参数的情况下，它会将控件以添加时的先后顺序，自上而下，一行一行的进行排列，并且默认居中显示。</p><h6 id="pack-方法的常用参数："><a href="#pack-方法的常用参数：" class="headerlink" title="pack() 方法的常用参数："></a>pack() 方法的常用参数：</h6><p>anchor<br>组件在窗口中的对齐方式，有 9 个方位参数值，比如”n”&#x2F;“w”&#x2F;“s”&#x2F;“e”&#x2F;“ne”，以及 “center” 等（这里的 e w s n分别代表，东西南北）</p><p>expand<br>是否可扩展窗口，参数值为 True（扩展）或者 False（不扩展），默认为 False，若设置为 True，则控件的位置始终位于窗口的中央位置</p><p>fill<br>参数值为 X&#x2F;Y&#x2F;BOTH&#x2F;NONE，表示允许控件在水平&#x2F;垂直&#x2F;同时在两个方向上进行拉伸，比如当 fill &#x3D; X 时，控件会占满水平方向上的所有剩余的空间。</p><p>ipadx,ipady<br>需要与 fill 参数值共同使用，表示组件与内容和组件边框的距离（内边距），比如文本内容和组件边框的距离，单位为像素(p)，或者厘米(c)、英寸(i)padx,pady用于控制组件之间的上下、左右的距离（外边距），单位为像素(p)，或者厘米(c)、英寸(i)</p><p>side<br>组件放置在窗口的哪个位置上，参数值 ‘top’,’bottom’,’left’,’right’。<br>注意，单词小写时需要使用字符串格式，若为大写单词则不必使用字符串格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">from tkinter import  *</span><br><span class="line">win = Tk()</span><br><span class="line">win.geometry(&#x27;450x300+300+300&#x27;)</span><br><span class="line"></span><br><span class="line">lb_red = Label(win,text=&quot;红色&quot;,bg=&quot;Red&quot;,fg=&#x27;#ffffff&#x27;,relief=GROOVE)</span><br><span class="line"># 默认以top方式放置</span><br><span class="line">lb_red.pack()</span><br><span class="line"></span><br><span class="line">lb_blue = Label(win,text=&quot;蓝色&quot;,bg=&quot;blue&quot;,fg=&#x27;#ffffff&#x27;,relief=GROOVE)</span><br><span class="line"># 沿着水平方向填充，使用 pady 控制蓝色标签与其他标签的上下距离为 5 个像素</span><br><span class="line">lb_blue.pack(fill=X,pady=&#x27;5px&#x27;)</span><br><span class="line"></span><br><span class="line">lb_green = Label(win,text=&quot;绿色&quot;,bg=&quot;green&quot;,fg=&#x27;#ffffff&#x27;,relief=RAISED)</span><br><span class="line"># 将 标签所在区域都填充为黄色，当使用 fill 参数时，必须设置 expand = 1，否则不能生效</span><br><span class="line"></span><br><span class="line">lb_green.pack(side=LEFT,expand=1,fill = BOTH)</span><br><span class="line">win.mainloop()</span><br></pre></td></tr></table></figure><h6 id="grid"><a href="#grid" class="headerlink" title="grid()"></a>grid()</h6><p>grid() 函数是一种基于网格式的布局管理方法，相当于把窗口看成了一张由行和列组成的表格。当使用该 grid 函数进行布局的时，表格内的每个单元格都可以放置一个控件。，从而实现对界面的布局管理。<br>注意：这里的所说的“表格”是虚拟出来，目的是便于大家理解，其实窗体并不会因为使用了 gird() 函数，而增加一个表格。</p><p>grid() 函数的常用参数：</p><p>column<br>控件位于表格中的第几列，窗体最左边的为起始列，默认为第 0 列</p><p>columnsapn<br>控件实例所跨的列数，默认为 1 列，通过该参数可以合并一行中多个领近单元格。</p><p>ipadx,ipady<br>用于控制内边距，在单元格内部，左右、上下方向上填充指定大小的空间。</p><p>padx,pady<br>用于控制外边距，在单元格外部，左右、上下方向上填充指定大小的空间。</p><p>row<br>控件位于表格中的第几行，窗体最上面为起始行，默认为第 0 行</p><p>rowspan<br>控件实例所跨的行数，默认为 1 行，通过该参数可以合并一列中多个领近单元格。</p><p>sticky<br>该属性用来设置控件位于单元格那个方位上，参数值和 anchor 相同，若不设置该参数则控件在单元格内居中</p><p>grid() 方法相比 pack() 方法来说要更加灵活，以网格的方式对组件进行布局管理，让整个布局显得非常简洁、优雅。如果说非要从三个布局管理器中选择一个使用的话，那么我推荐大家使用 grid() 方法。</p><p>这里有一点需要大家要特别注意，在一个程序中不能同时使用 pack() 和 grid() 方法，这两个方法只能二选一，否则程序会运行错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from tkinter import *</span><br><span class="line">win = Tk()</span><br><span class="line">win.config(bg=&#x27;#87CEEB&#x27;)</span><br><span class="line">win.geometry(&#x27;500x350+300+300&#x27;)</span><br><span class="line">#在窗口内创建按钮，以表格的形式依次排列</span><br><span class="line">for i in range (10):</span><br><span class="line">    for j in range (10):</span><br><span class="line">        Button (win, text=&quot; (&quot; + str(i) + &quot;,&quot;+ str(j)+ &quot;)&quot;,bg=&#x27;#D1EEEE&#x27;) .grid(row=i,column=j)</span><br><span class="line"># 在第5行第11列添加一个Label标签</span><br><span class="line">Label(win,text=&quot;qwer&quot;,fg=&#x27;blue&#x27;,font=(&#x27;楷体&#x27;,12,&#x27;bold&#x27;)).grid(row =4,column=11)</span><br><span class="line">#开始窗口的事件循环</span><br><span class="line">win. mainloop()</span><br></pre></td></tr></table></figure><p>当使用 grid 函数布局的时，其实就是为各个控件指定行号、列号的过程，我们不需要为每个单元格指定大小，因为 grid 会为每个单元格自动设置一个适合的尺寸。</p><p>通过 grid() 布局管理器制作一个简易的登录界面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import tkinter as tk</span><br><span class="line">from tkinter import messagebox</span><br><span class="line"></span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.resizable(0,0)</span><br><span class="line"></span><br><span class="line">tk.Label(root, text=&quot;用户名&quot;).grid(row=0, sticky=&quot;w&quot;)</span><br><span class="line">tk.Label(root, text=&quot;密码&quot;).grid(row=1, sticky=&quot;w&quot;)</span><br><span class="line"></span><br><span class="line">tk.Entry(root).grid(row=0, column=1)</span><br><span class="line">tk.Entry(root, show=&quot;*&quot;).grid(row=1, column=1)</span><br><span class="line"></span><br><span class="line">tk.Label(root,text=&#x27;nihao&#x27;).grid(row=0, column=2, rowspan=2, padx=&#x27;4px&#x27;, pady=&#x27;5px&#x27;)</span><br><span class="line"></span><br><span class="line"># 编写一个回调函数</span><br><span class="line">def login():</span><br><span class="line">    messagebox.showinfo(&#x27;欢迎&#x27;)</span><br><span class="line"></span><br><span class="line"># 使用grid()函数来布局，并控制按钮的显示位置</span><br><span class="line">tk.Button(root, text=&quot;登录&quot;, width=10, command=login).grid(row=3, column=0, columnspan=2,sticky=&quot;w&quot;, padx=10, pady=5)</span><br><span class="line">tk.Button(root, text=&quot;退出&quot;, width=10, command=root.quit).grid(row=3, column=1, columnspan=2,sticky=&quot;e&quot;, padx=10, pady=5)</span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><h6 id="place"><a href="#place" class="headerlink" title="place()"></a>place()</h6><p>与前两种布局方法相比，采用 place() 方法进行布局管理要更加精细化，通过 place() 布局管理器可以直接指定控件在窗体内的绝对位置，或者相对于其他控件定位的相对位置。</p><p><strong>使用 place,设置第一个标签位于距离窗体左上角的位置和其大小（width，height）注意这里（x,y）位置坐标指的是标签左上角的位置（以NW左上角进行绝对定位，默认为NW）</strong></p><p>anchor<br>定义控件在窗体内的方位，参数值N&#x2F;NE&#x2F;E&#x2F;SE&#x2F;S&#x2F;SW&#x2F;W&#x2F;NW 或 CENTER，默认值是 NW</p><p>bordermode<br>定义控件的坐标是否要考虑边界的宽度，参数值为 OUTSIDE（排除边界） 或 INSIDE（包含边界），默认值 INSIDE。</p><p>x、y<br>定义控件在根窗体中水平和垂直方向上的<strong>起始</strong>绝对位置</p><p>relx、rely</p><ol><li>定义控件相对于根窗口（或其他控件）在水平和垂直方向上的相对位置（即位移比例），取值范围再 0.0~1.0 之间</li><li>可设置 in_ 参数项，相对于某个其他控件的位置</li></ol><p>height、width<br>控件自身的高度和宽度（单位为像素）</p><p>relheight、relwidth<br>控件高度和宽度相对于根窗体高度和宽度的比例，取值也在 0.0~1.0 之间</p><p>relx和rely参数指定的是控件相对于父组件的位置，而relwidth和relheight参数则是指定控件相对于父组件的尺寸大小。注意：这里父组件指的是当前可操作控件的上层组件，比如在没有使用容器控件（frame）的窗体中，控件的父组件就是主窗口本身</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from tkinter import *</span><br><span class="line">#主窗口</span><br><span class="line">win = Tk()</span><br><span class="line"></span><br><span class="line">#创建一个frame窗体对象，用来包裹标签</span><br><span class="line">frame = Frame (win, relief=SUNKEN, borderwidth=2, width=450, height=250)</span><br><span class="line"># 在水平、垂直方向上填充窗体</span><br><span class="line">frame. pack (side=TOP, fill=BOTH, expand=1)</span><br><span class="line"></span><br><span class="line"># 创建 &quot;位置1&quot;</span><br><span class="line">Label1 = Label ( frame, text=&quot;位置1&quot;,bg=&#x27;blue&#x27;,fg=&#x27;white&#x27;)</span><br><span class="line"># 使用 place,设置第一个标签位于距离窗体左上角的位置（40,40）和其大小（width，height）</span><br><span class="line"># 注意这里（x,y）位置坐标指的是标签左上角的位置（以NW左上角进行绝对定位，默认为NW）</span><br><span class="line">Label1.place (x=40,y=40, width=60, height=30)</span><br><span class="line"></span><br><span class="line"># 设置标签2</span><br><span class="line">Label2 = Label (frame, text=&quot;位置2&quot;,bg=&#x27;purple&#x27;,fg=&#x27;white&#x27;)</span><br><span class="line"># 以右上角进行绝对值定位，anchor=NE，第二个标签的位置在距离窗体左上角的(180，80)</span><br><span class="line">Label2.place(x=180,y=80, anchor=NE, width=60, height=30)</span><br><span class="line"></span><br><span class="line"># 设置标签3</span><br><span class="line">Label3 = Label (frame, text=&quot;位置3&quot;,bg=&#x27;green&#x27;,fg=&#x27;white&#x27;)</span><br><span class="line"># 设置水平起始位置相对于窗体水平距离的0.6倍，垂直的绝对距离为80，大小为60，30</span><br><span class="line">Label3.place(relx=0.6,y=80, width=60, height=30)</span><br><span class="line"></span><br><span class="line"># 设置标签4</span><br><span class="line">Label4 = Label (frame, text=&quot;位置4&quot;,bg=&#x27;gray&#x27;,fg=&#x27;white&#x27;)</span><br><span class="line"># 设置水平起始位置相对于窗体水平距离的0.01倍，垂直的绝对距离为80，并设置高度为窗体高度比例的0.5倍，宽度为80</span><br><span class="line">Label4.place(relx=0.01,y=80,relheight=0.4,width=80)</span><br><span class="line">#开始事件循环</span><br><span class="line">win. mainloop()</span><br></pre></td></tr></table></figure><p>注意：在一个父组件中 place()方法可以与 grid() 方法混合使用，要与 pack() 进行区别。</p><p>一般博主推荐 简单的布局的画就使用pack 和 grid 就好了，相对较复杂的布局时就是用place</p><p>还有就是需要注意有时候使用grid布局 可能没有效果，这个需要自己分析一下，博主之际也遇到过这种情况</p>]]></content>
      
      
      <categories>
          
          <category> python--tkinter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tkinter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>os模块简单使用</title>
      <link href="/post/6ef6247d.html"/>
      <url>/post/6ef6247d.html</url>
      
        <content type="html"><![CDATA[<h5 id="os-getcwd"><a href="#os-getcwd" class="headerlink" title="os.getcwd()"></a>os.getcwd()</h5><p>作用：获取当前的工作路径；</p><h5 id="os-listdir-path"><a href="#os-listdir-path" class="headerlink" title="os.listdir(path)"></a>os.listdir(path)</h5><p>传入任意一个path路径，返回的是该路径下所有文件和目录组成的列表；</p><h5 id="os-walk-path"><a href="#os-walk-path" class="headerlink" title="os.walk(path)"></a>os.walk(path)</h5><p>传入任意一个path路径，深层次遍历指定路径下的所有子文件夹，返回的是一个由路径、文件夹列表、文件列表组成的元组。我代码中写的方式属于元组拆包；</p><p>元组拆包：就是将一个元组中的每个值，赋值给不同的变量；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">path = r&quot;C:\Users\Desktop\publish\os模块&quot;</span><br><span class="line">for path,dirs,files in os.walk(path):</span><br><span class="line">    print(path)</span><br><span class="line">    print(dirs)</span><br><span class="line">    print(files)</span><br><span class="line">    print(&quot;\n&quot;)</span><br></pre></td></tr></table></figure><h5 id="os-path-exists-path"><a href="#os-path-exists-path" class="headerlink" title="os.path.exists(path)"></a>os.path.exists(path)</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">path1 = &#x27;C:\Users\Desktop\publish\os模块&#x27;</span><br><span class="line"></span><br><span class="line">if os.path.exists(path1):</span><br><span class="line">    print(&quot;指定文件夹存在&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;指定文件夹不存在&quot;)</span><br></pre></td></tr></table></figure><h5 id="os-mkdir-path"><a href="#os-mkdir-path" class="headerlink" title="os.mkdir(path)"></a>os.mkdir(path)</h5><p>含义：传入一个path路径，创建单层(单个)文件夹；</p><p>注意：如果文件夹已经存在，就会报错。因此创建文件夹之前，需要使用os.path.exists(path)函数判断文件夹是否存在；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">os.getcwd()</span><br><span class="line">path1 = os.getcwd()+&quot;\\i&quot;</span><br><span class="line">os.mkdir(path1)</span><br></pre></td></tr></table></figure><h5 id="os-makedirs-path"><a href="#os-makedirs-path" class="headerlink" title="os.makedirs(path)"></a>os.makedirs(path)</h5><p>含义：传入一个path路径，生成一个递归的文件夹；<br>注意：如果文件夹存在，就会报错。因此创建文件夹之前，需要使用os.path.exists(path)函数判断文件夹是否存在；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">os.getcwd()</span><br><span class="line">path1 = os.getcwd()+&quot;\\ngei&quot;</span><br><span class="line">os.makedirs(path1)</span><br></pre></td></tr></table></figure><h5 id="os-rmdir-path"><a href="#os-rmdir-path" class="headerlink" title="os.rmdir(path)"></a>os.rmdir(path)</h5><p>含义：传入一个path路径，删除指定路径下的文件夹；</p><p>注意：该方法只能删除空文件夹，删除非空文件夹会报错；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">path1 = os.getcwd()+&quot;\\i&quot;</span><br><span class="line">os.rmdir(path1)</span><br><span class="line">path2 = os.getcwd()+&quot;\\a\\b\\c&quot;</span><br><span class="line">os.rmdir(path2) </span><br></pre></td></tr></table></figure><h5 id="os-path-join-path1-path2"><a href="#os-path-join-path1-path2" class="headerlink" title="os.path.join(path1,path2)"></a>os.path.join(path1,path2)</h5><p>含义：传入两个path路径，将该路径拼接起来，形成一个新的完整路径；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">path = os.getcwd()</span><br><span class="line">lis = [&quot;a.jpg&quot;,&quot;b.jpg&quot;,&quot;c.jpg&quot;]</span><br><span class="line">for i in lis:</span><br><span class="line">    x = os.path.join(path,i)</span><br><span class="line">    print(x)</span><br></pre></td></tr></table></figure><h5 id="os-path-split-path"><a href="#os-path-split-path" class="headerlink" title="os.path.split(path)"></a>os.path.split(path)</h5><p>含义：传入一个完整的path路径，将其拆分为绝对路径和文件名2部分；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path = &#x27;D:\File\All\python\blog\jiemian.jpg&#x27;</span><br><span class="line">print(os.path.split(path))</span><br></pre></td></tr></table></figure><h5 id="os-path-dirname-path"><a href="#os-path-dirname-path" class="headerlink" title="os.path.dirname(path)"></a>os.path.dirname(path)</h5><p>含义：传入一个完整的文件路径，只获取其绝对路径；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path1 = r&quot;D:\File\All\python\blog\jiemian.jpg&quot;</span><br><span class="line">os.path.dirname(path1)</span><br></pre></td></tr></table></figure><h5 id="os-path-basename-path"><a href="#os-path-basename-path" class="headerlink" title="os.path.basename(path)"></a>os.path.basename(path)</h5><p>含义：传入一个完整的文件路径，只获取其文件名；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path1 = r&quot;D:\File\All\python\blog\jiemian.jpg&quot;</span><br><span class="line">os.path.basename(path1)</span><br></pre></td></tr></table></figure><h5 id="os-path-isdir-path"><a href="#os-path-isdir-path" class="headerlink" title="os.path.isdir(path)"></a>os.path.isdir(path)</h5><p>含义：传入一个完整的文件路径，判断它是否是文件夹；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">path = os.getcwd()</span><br><span class="line">file_list = os.listdir()</span><br><span class="line">for file in file_list:</span><br><span class="line">    if os.path.isdir(file):</span><br><span class="line">        print(file)</span><br></pre></td></tr></table></figure><h5 id="os-path-isfile-path"><a href="#os-path-isfile-path" class="headerlink" title="os.path.isfile(path)"></a>os.path.isfile(path)</h5><p>含义：传入一个完整的文件路径，判断它是否是文件；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">path = os.getcwd()</span><br><span class="line">file_list = os.listdir()</span><br><span class="line">for file in file_list:</span><br><span class="line">    if os.path.isfile(file):</span><br><span class="line">        print(file)</span><br></pre></td></tr></table></figure><h5 id="os-path-sep"><a href="#os-path-sep" class="headerlink" title="os.path.sep"></a>os.path.sep</h5><p>含义：返回当前操作系统的路径分隔符；</p><p>print(os.path.sep)</p><h5 id="os-path-getsize-path"><a href="#os-path-getsize-path" class="headerlink" title="os.path.getsize(path)"></a>os.path.getsize(path)</h5><p>含义：传入一个完整的文件路径，返回该文件的大小；</p>]]></content>
      
      
      <categories>
          
          <category> python os模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python提升九</title>
      <link href="/post/8b7b2458.html"/>
      <url>/post/8b7b2458.html</url>
      
        <content type="html"><![CDATA[<h5 id="Python-logging模块简单用法"><a href="#Python-logging模块简单用法" class="headerlink" title="Python logging模块简单用法"></a>Python logging模块简单用法</h5><p> logging 模块可以很容易地创建自定义的消息记录，这些日志消息将描述程序执行何时到达日志函数调用，并列出指定的任何变量当时的值。</p><p>启用 logging 模块很简单，直接将下面的代码复制到程序开头：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line">logging.basicConfig(level=logging.DEBUG, format=&#x27; %(asctime)s - %(levelname)s - %(message)s&#x27;)</span><br></pre></td></tr></table></figure><p>当 Python 记录一个事件的日志时，它会创建一个 LogRecord 对象，保存关于该事件的信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line">logging.basicConfig(level=logging.DEBUG, format=&#x27; %(asctime)s - %(levelname)s - %(message)s&#x27;)</span><br><span class="line">for i in range(0,5):</span><br><span class="line">   logging.debug(&#x27;i is &#x27; + str(i))</span><br></pre></td></tr></table></figure><p>通过 logging.debug() 函数可以打印日志信息，这个 debug() 函数将调用 basicConfig() 打印一行信息，这行信息的格式是在 basicConfig() 函数中指定的，并且包括传递给 debug() 的消息。</p><h6 id="Python-logging日志级别"><a href="#Python-logging日志级别" class="headerlink" title="Python logging日志级别"></a>Python logging日志级别</h6><p>“日志级别”提供了一种方式，按重要性对日志消息进行分类。5 个日志级别如图所示，从最不重要到最重要。利用不同的日志函数，消息可以按某个级别记入日志。</p><img src="/post/8b7b2458/40.png" class title="This is an image"><p>日志级别的好处在于，我们可以改变想看到的日志消息的优先级。比如说，向 basicConfig() 函数传入 logging.DEBUG 作为 level 关键字参数，这将显示所有级别为 DEBUG 的日志消息。</p><p>当开发了更多的程序后，我们可能只对错误感兴趣，在这种情况下，可以将 basicConfig() 的 level 参数设置为 logging.ERROR，这将只显示 ERROR 和 CRITICAL 消息，跳过 DEBUG、INFO 和 WARNING 消息。</p><h6 id="Python-logging禁用日志"><a href="#Python-logging禁用日志" class="headerlink" title="Python logging禁用日志"></a>Python logging禁用日志</h6><p>在调试完程序后，可能并不希望所有这些日志消息出现在屏幕上，这时就可以使用 logging.disable() 函数禁用这些日志消息，从而不必进入到程序中，手工删除所有的日志调用。</p><p>logging.disable() 函数的用法是，向其传入一个日志级别，它会禁止该级别以及更低级别的所有日志消息。因此，如果想要禁用所有日志，只要在程序中添加 logging.disable(logging.CRITICAL) 即可，</p><p>将日志消息输出到文件中<br>虽然日志消息很有用，但它们可能塞满屏幕，让你很难读到程序的输出。考虑到这种情况，可以将日志信息写入到文件，既能使屏幕保持干净，又能保存信息，一举两得。</p><p>将日志消息输出到文件中的实现方法很简单，只需要设置 logging.basicConfig() 函数中的 filename 关键字参数即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line">logging.basicConfig(filename=&quot;aa.txt&quot;,level=logging.DEBUG, format=&#x27; %(asctime)s - %(levelname)s - %(message)s&#x27;)</span><br><span class="line">for i in range(0,5):</span><br><span class="line">   logging.debug(&#x27;i is &#x27; + str(i))</span><br></pre></td></tr></table></figure><p>此程序中，将日志消息存储到了 demo.txt 文件中，该文件就位于运行的程序文件所在的目录。</p><h5 id="文件路径，Python中如何书写文件路径"><a href="#文件路径，Python中如何书写文件路径" class="headerlink" title="文件路径，Python中如何书写文件路径"></a>文件路径，Python中如何书写文件路径</h5><p>路径中的 D:\ 指的是“根文件夹”，它包含了所有其他文件夹。在 Windows 中，根文件夹名为 D:\，也称为 D: 盘</p><p>在 Windows 上，路径书写使用反斜杠 “&quot; 作为文件夹之间的分隔符</p><p>不仅如此，如果需要创建带有文件名称的文件存储路径，<br>os.path.join() 函数同样很有用。<br>下面的例子将一个文件名列表中的名称，添加到文件夹名称的末尾：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">path = os.getcwd()</span><br><span class="line">lis = [&quot;a.jpg&quot;,&quot;b.jpg&quot;,&quot;c.jpg&quot;]</span><br><span class="line">for i in lis:</span><br><span class="line">    x = os.path.join(path,i)</span><br><span class="line">    print(x)</span><br></pre></td></tr></table></figure><h5 id="Python绝对路径和相对路径详解"><a href="#Python绝对路径和相对路径详解" class="headerlink" title="Python绝对路径和相对路径详解"></a>Python绝对路径和相对路径详解</h5><h6 id="什么是绝对路径与相对路径"><a href="#什么是绝对路径与相对路径" class="headerlink" title="什么是绝对路径与相对路径"></a>什么是绝对路径与相对路径</h6><p>明确一个文件所在的路径，有 2 种表示方式，分别是：<br>绝对路径：总是从根文件夹开始，Window 系统中以盘符（C：、D：）作为根文件夹，而 OS X 或者 Linux 系统中以 &#x2F; 作为根文件夹。<br>相对路径：指的是文件相对于当前工作目录所在的位置。例如，当前工作目录为 “C:\Windows\System32”，若文件 demo.txt 就位于这个 System32 文件夹下，则 demo.txt 的相对路径表示为 “.\demo.txt”（其中 .\ 就表示当前所在目录）。</p><p>在使用相对路径表示某文件所在的位置时，除了经常使用 .\ 表示当前所在目录之外，还会用到 ..\ 表示当前所在目录的父目录。</p><h6 id="Python处理绝对路径和相对路径"><a href="#Python处理绝对路径和相对路径" class="headerlink" title="Python处理绝对路径和相对路径"></a>Python处理绝对路径和相对路径</h6><p>Python os.path 模块提供了一些函数，可以实现绝对路径和相对路径之间的转换，以及检查给定的路径是否为绝对路径，比如说：</p><p><a href="https://xiaoyangzst.vercel.app/post/6ef6247d.html">os模块</a></p><h5 id="Python文件基本操作"><a href="#Python文件基本操作" class="headerlink" title="Python文件基本操作"></a>Python文件基本操作</h5><p>Python 中，对文件的操作有很多种，常见的操作包括创建、删除、修改权限、读取、写入等</p><p>这些操作可大致分为以下 2 类：<br>删除、修改权限：作用于文件本身，属于系统级操作。</p><p>写入、读取：是文件最常用的操作，作用于文件的内容，属于应用级操作。</p><p>对文件的系统级操作功能单一，比较容易实现，可以借助 Python 中的专用模块（os、sys 等），并调用模块中的指定函数来实现。</p><p>假设如下代码文件的同级目录中有一个文件“a.txt”，通过调用 os 模块中的 remove 函数，可以将该文件删除，具体实现代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">os.remove(&quot;a.txt&quot;)</span><br></pre></td></tr></table></figure><p>文件的应用级操作可以分为以下 3 步，每一步都需要借助对应的函数实现：</p><p>打开文件：使用 open() 函数，该函数会返回一个<strong>文件对象</strong>；</p><p>对已打开文件做读&#x2F;写操作：读取文件内容可使用 read()、readline() 以及 readlines() 函数；<br>向文件中写入内容，可以使用 write() 函数。</p><p>关闭文件：完成对文件的读&#x2F;写操作之后，最后需要关闭文件，可以使用 close() 函数。</p><h5 id="Python-open-函数详解：打开指定文件"><a href="#Python-open-函数详解：打开指定文件" class="headerlink" title="Python open()函数详解：打开指定文件"></a>Python open()函数详解：打开指定文件</h5><p>在 Python 中，如果想要操作文件，首先需要创建或者打开指定的文件，并创建一个文件对象，而这些工作可以通过内置的 open() 函数实现。</p><p>语法格式：</p><p>file &#x3D; open(file_name [, mode&#x3D;’r’ [ , buffering&#x3D;-1 [ , encoding &#x3D; None ]]]) </p><p>名称要用引号（单引号或双引号都可以）括起来。</p><p>需要注意的是，如果要打开的文件和当前执行的代码文件位于同一目录，则直接写文件名即可，否则，此参数需要指定打开文件所在的完整路径。</p><p>mode：可选参数，用于指定文件的打开模式</p><img src="/post/8b7b2458/41.png" class title="This is an image"><p>如果不写，则默认以只读（r）模式打开文件。</p><p>buffering：可选参数，用于指定对文件做读写操作时，是否使用缓冲区</p><p>encoding：手动设定打开文件时所使用的编码格式，不同平台的 ecoding 参数值也不同。</p><h6 id="open-是否需要缓冲区"><a href="#open-是否需要缓冲区" class="headerlink" title="open()是否需要缓冲区"></a>open()是否需要缓冲区</h6><p>通常情况下、建议大家在使用 open() 函数时打开缓冲区，即不需要修改 buffing 参数的值。</p><p>如果 buffing 参数的值为 0（或者 False），则表示在打开指定文件时不使用缓冲区；</p><p>如果 buffing 参数值为大于 1 的整数，该整数用于指定缓冲区的大小（单位是字节）；</p><p>如果 buffing 参数的值为负数，则代表使用默认的缓冲区大小。</p><p>因为目前为止计算机内存的 I&#x2F;O 速度仍远远高于计算机外设（例如键盘、鼠标、硬盘等）的 I&#x2F;O 速度，如果不使用缓冲区，则程序在执行 I&#x2F;O 操作时，内存和外设就必须进行同步读写操作，也就是说，内存必须等待外设输入（输出）一个字节之后，才能再次输出（输入）一个字节。这意味着，内存中的程序大部分时间都处于等待状态。<br>而如果使用缓冲区，则程序在执行输出操作时，会先将所有数据都输出到缓冲区中，然后继续执行其它操作，缓冲区中的数据会有外设自行读取处理；同样，当程序执行输入操作时，会先等外设将数据读入缓冲区中，无需同外设做同步读写操作。</p><h6 id="open-文件对象常用的属性"><a href="#open-文件对象常用的属性" class="headerlink" title="open()文件对象常用的属性"></a>open()文件对象常用的属性</h6><p>成功打开文件之后，可以调用文件对象本身拥有的属性获取当前文件的部分信息，其常见的属性为：</p><p>file.name：返回文件的名称；</p><p>file.mode：返回打开文件时，采用的文件打开模式；</p><p>file.encoding：返回打开文件时使用的编码格式；</p><p>file.closed：判断文件是否己经关闭。</p><h6 id="Python-read-函数"><a href="#Python-read-函数" class="headerlink" title="Python read()函数"></a>Python read()函数</h6><p>对于借助 open() 函数，并以可读模式（包括 r、r+、rb、rb+）打开的文件，可以调用 read() 函数逐个字节（或者逐个字符）读取文件中的内容。如果文件是以文本模式（非二进制模式）打开的，则 read() 函数会逐个字符进行读取；</p><p>反之，如果文件以二进制模式打开，则 read() 函数会逐个字节进行读取。<br>语法格式： file.read([size])</p><p>file 表示已打开的文件对象；</p><p>size 作为一个可选参数，用于指定一次最多可读取的字符（字节）个数，如果省略，则默认一次性读取所有内容。</p><p>当然，我们也可以通过使用 size 参数，指定 read() 每次可读取的最大字符（或者字节）数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file = open(&quot;aa.txt, encoding= &quot;utf-8&quot;)</span><br><span class="line">print(file.read())</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p>但是一般都使用这种方式打开<br>这样可以不用 关闭操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with open(&quot;aa.txt&quot;,encoding=&quot;utf-8&quot;) as f:</span><br><span class="line">   print(f.read())</span><br></pre></td></tr></table></figure><h6 id="read-函数抛出UnicodeDecodeError异常的解决方法"><a href="#read-函数抛出UnicodeDecodeError异常的解决方法" class="headerlink" title="read()函数抛出UnicodeDecodeError异常的解决方法"></a>read()函数抛出UnicodeDecodeError异常的解决方法</h6><p>在使用 read() 函数时，如果 Python 解释器提示UnicodeDecodeError异常，其原因在于，目标文件使用的编码格式和 open() 函数打开该文件时使用的编码格式不匹配。<br>举个例子，如果目标文件的编码格式为 GBK 编码，而我们在使用 open() 函数并以文本模式打开该文件时，手动指定 encoding 参数为 UTF-8。这种情况下，由于编码格式不匹配，当我们使用 read() 函数读取目标文件中的数据时，Python 解释器就会提示UnicodeDecodeError异常。<br>要解决这个问题，要么将 open() 函数中的 encoding 参数值修改为和目标文件相同的编码格式，要么重新生成目标文件（即将该文件的编码格式改为和 open() 函数中的 encoding 参数相同）。</p><p>除此之外，还有一种方法：先使用二进制模式读取文件，然后调用 bytes 的 decode() 方法，使用目标文件的编码格式，将读取到的字节串转换成认识的字符串。<br>eg.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#以二进制形式打开指定文件，该文件编码格式为 utf-8</span><br><span class="line">f = open(&quot;aa.txt&quot;,&#x27;rb+&#x27;)</span><br><span class="line">byt = f.read()</span><br><span class="line">print(byt)</span><br><span class="line">print(&quot;\n转换后：&quot;)</span><br><span class="line">print(byt.decode(&#x27;utf-8&#x27;))</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h6 id="Python-readline-和readlines-函数：按行读取文件"><a href="#Python-readline-和readlines-函数：按行读取文件" class="headerlink" title="Python readline()和readlines()函数：按行读取文件"></a>Python readline()和readlines()函数：按行读取文件</h6><p>这 2 个函数都以“行”作为读取单位，即每次都读取目标文件中的一行。</p><p>对于读取以文本格式打开的文件，读取一行很好理解；</p><p>对于读取以二进制格式打开的文件，它们会以“\n”作为读取一行的标志。</p><h6 id="Python-readline-函数"><a href="#Python-readline-函数" class="headerlink" title="Python readline()函数"></a>Python readline()函数</h6><p>readline() 函数用于读取文件中的一行，包含最后的换行符“\n”。</p><p>语法格式：<br>file.readline([size])</p><p>size 为可选参数，用于指定读取每一行时，一次最多读取的字符（字节）数。</p><h6 id="Python-readlines-函数"><a href="#Python-readlines-函数" class="headerlink" title="Python readlines()函数"></a>Python readlines()函数</h6><p>readlines() 函数用于读取文件中的所有行，它和调用不指定 size 参数的 read() 函数类似，只不过该函数<strong>返回是一个字符串列表</strong>，其中每个元素为文件中的一行内容。</p><p>语法格式：<br>file.readlines()</p>]]></content>
      
      
      <categories>
          
          <category> python提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python提升八</title>
      <link href="/post/36f0a209.html"/>
      <url>/post/36f0a209.html</url>
      
        <content type="html"><![CDATA[<h5 id="什么是异常处理，Python常见异常类型"><a href="#什么是异常处理，Python常见异常类型" class="headerlink" title="什么是异常处理，Python常见异常类型"></a>什么是异常处理，Python常见异常类型</h5><p>编写程序时遇到的错误可大致分为 2 类，分别为语法错误和运行时错误。</p><h6 id="Python语法错误"><a href="#Python语法错误" class="headerlink" title="Python语法错误"></a>Python语法错误</h6><p>语法错误，也就是解析代码时出现的错误。当代码不符合 Python 语法规则时，Python解释器在解析时就会报出 SyntaxError 语法错误，与此同时还会明确指出最早探测到错误的语句。</p><h6 id="Python运行时错误"><a href="#Python运行时错误" class="headerlink" title="Python运行时错误"></a>Python运行时错误</h6><p>运行时错误，即程序在语法上都是正确的，但在运行时发生了错误。<br>在 Python 中，把这种运行时产生错误的情况叫做异常</p><img src="/post/36f0a209/37.png" class title="This is an image"><h5 id="Python异常处理机制"><a href="#Python异常处理机制" class="headerlink" title="Python异常处理机制"></a>Python异常处理机制</h5><p>使用 Python 的异常处理机制就可以解决这个问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">try：</span><br><span class="line">    if(用户输入不合理)：</span><br><span class="line">        raise 异常</span><br><span class="line">except Exception：</span><br><span class="line">    alert 输入不合法</span><br><span class="line">    goto retry</span><br><span class="line">#正常的业务代码</span><br></pre></td></tr></table></figure><p>此程序中，通过在 try 块中判断用户的输入数据是否合理，如果不合理，程序受 raise 的影响会进行到 except 代码块，对用户的错误输出进行处理，然后会继续执行正常的业务代码；反之，如果用户输入合理，那么程序将直接执行正常的业务代码。<br>try except 是 Python 实现异常处理机制的核心结构</p><h5 id="Python-try-except异常处理详解"><a href="#Python-try-except异常处理详解" class="headerlink" title="Python try except异常处理详解"></a>Python try except异常处理详解</h5><p>Python 中，用try except语句块捕获并处理异常<br>语法结构：</p><p>try:<br>    可能产生异常的代码块<br>except [ (Error1, Error2, … ) [as e] ]:<br>    处理异常的代码块1<br>except [ (Error3, Error4, … ) [as e] ]:<br>    处理异常的代码块2<br>except  [Exception]:<br>    处理其它异常</p><p>该格式中，[] 括起来的部分可以使用，也可以省略。其中各部分的含义如下：<br>(Error1, Error2,…) 、(Error3, Error4,…)：其中，Error1、Error2、Error3 和 Error4 都是具体的异常类型。显然，一个 except 块可以同时处理多种异常。<br>[as e]：作为可选参数，表示给异常类型起一个别名 e，这样做的好处是方便在 except 块中调用异常类型<br>[Exception]：作为可选参数，可以代指程序可能发生的所有异常情况，其通常用在最后一个 except 块。</p><p>try 块有且仅有一个，但 except 代码块可以有多个，且每个 except 块都可以同时处理多种异常</p><p>try except 语句的执行流程如下：<br>首先执行 try 中的代码块，如果执行过程中出现异常，<strong>系统会自动生成一个异常类型</strong>，并将该异常提交给 Python 解释器，此过程称为捕获异常。<br>当 Python 解释器收到异常对象时，会寻找能处理该异常对象的 except 块，如果找到合适的 except 块，则把该异常对象交给该 except 块处理，这个过程被称为处理异常。</p><p><strong>如果 Python 解释器找不到处理异常的 except 块，则程序运行终止，Python 解释器也将退出</strong>。</p><p>事实上，不管程序代码块是否处于 try 块中，甚至包括 except 块中的代码，只要执行该代码块时出现了异常，系统都会自动生成对应类型的异常。<br>但是，如果此段程序没有用 try 包裹，又或者没有为该异常配置处理它的 except 块，则 Python 解释器将无法处理，程序就会停止运行；反之，如果程序发生的异常经 try 捕获并由 except 处理完成，则程序可以继续执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    a = int(input(&quot;输入被除数：&quot;))</span><br><span class="line">    b = int(input(&quot;输入除数：&quot;))</span><br><span class="line">    c = a / b</span><br><span class="line">    print(&quot;您输入的两个数相除的结果是：&quot;, c )</span><br><span class="line">except (ValueError, ArithmeticError):</span><br><span class="line">    print(&quot;程序发生了数字格式异常、算术异常之一&quot;)</span><br><span class="line">except :</span><br><span class="line">    print(&quot;未知异常&quot;)</span><br><span class="line">print(&quot;程序继续运行&quot;)</span><br></pre></td></tr></table></figure><p>上面程序中，使用了（ValueError, ArithmeticError）来指定所捕获的异常类型，这就表明该 except 块可以同时捕获这 2 种类型的异常；<br>只有 except 关键字，并未指定具体要捕获的异常类型，这种省略异常类的 except 语句也是合法的，它表示可捕获所有类型的异常，一般会作为异常捕获的最后一个 except 块。</p><h6 id="获取特定异常的有关信息"><a href="#获取特定异常的有关信息" class="headerlink" title="获取特定异常的有关信息"></a>获取特定异常的有关信息</h6><p>其实，每种异常类型都提供了如下几个属性和方法，通过调用它们，就可以获取当前处理异常类型的相关信息：</p><p>args：返回异常的错误编号和描述字符串；</p><p>str(e)：返回异常信息，但不包括异常信息的类型；</p><p>repr(e)：返回较全的异常信息，包括异常信息的类型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    1/0</span><br><span class="line">except Exception as e:</span><br><span class="line">    # 访问异常的错误编号和详细信息</span><br><span class="line">    print(e.args)</span><br><span class="line">    print(str(e))</span><br><span class="line">    print(repr(e))</span><br></pre></td></tr></table></figure><p>除此之外，如果想要更加详细的异常信息，可以使用 traceback 模块</p><p>从程序中可以看到，由于 except 可能接收多种异常，因此为了操作方便，可以直接给每一个进入到此 except 块的异常，起一个统一的别名 e。</p><h5 id="Python异常处理机制的底层实现"><a href="#Python异常处理机制的底层实现" class="headerlink" title="Python异常处理机制的底层实现"></a>Python异常处理机制的底层实现</h5><p>try except异常处理的用法，简单来说，当位于 try 块中的程序执行出现异常时，会将该种异常捕获，同时找到对应的 except 块处理该异常，那么这里就有一个问题，它是如何找到对应的 except 块的呢？</p><p>我们知道，一个 try 块也可以对应多个 except 块，一个 except 块可以同时处理多种异常。如果我们想使用一个 except 块处理所有异常，就可以这样写</p><p>try:<br>    #…<br>except Exception:<br>    #…</p><p>try 块中可能出现的任何异常，Python 解释器都会交给仅有的这个<br> except 块处理，因为它的参数是 Exception，表示可以接收任何类型的异常。<br>注意，对于可以接收任何异常的 except 来说，其后可以跟 Exception，也可以不跟任何参数，但表示的含义都是一样的。</p><p>详细介绍一下 Exception。要知道，为了表示程序中可能出现的各种异常，Python 提供了大量的异常类，这些异常类之间有严格的继承关系，图显示了 Python 的常见异常类之间的继承关系。</p><img src="/post/36f0a209/38.png" class title="This is an image"><p>BaseException 是 Python 中所有异常类的基类，但对于我们来说，最主要的是 Exception 类，因为程序中可能出现的各种异常，都继承自 Exception。</p><p>如果用户要实现自定义异常，不应该继承 BaseException ，而应该继承 Exception 类。</p><p>关于如何<strong>自定义一个异常类</strong></p><p>当 try 块捕获到异常对象后，Python 解释器会拿这个异常类型依次和各个 except 块指定的异常类进行比较，如果捕获到的这个异常类，和某个 except 块后的异常类一样，又或者是该异常类的子类，那么 Python 解释器就会调用这个 except 块来处理异常；反之，Python 解释器会继续比较，直到和最后一个 except 比较完，如果没有比对成功，则证明该异常无法处理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    a = int(input(&quot;输入 a：&quot;))</span><br><span class="line">    b = int(input(&quot;输入 b：&quot;))</span><br><span class="line">    print( a/b )</span><br><span class="line">except ValueError:</span><br><span class="line">    print(&quot;数值错误：程序只能接收整数参数&quot;)</span><br><span class="line">except ArithmeticError:</span><br><span class="line">    print(&quot;算术错误&quot;)</span><br><span class="line">except Exception:</span><br><span class="line">    print(&quot;未知异常&quot;)</span><br></pre></td></tr></table></figure><p>该程序中，根据用户输入 a 和 b 值的不同，可能会导致 ValueError、ArithmeticError 异常：</p><p>如果用户输入的 a 或者 b 是其他字符，而不是数字，会发生 ValueError 异常，try 块会捕获到该类型异常，同时 Python 解释器会调用第一个 except 块处理异常；</p><p>如果用户输入的 a 和 b 是数字，但 b 的值为 0，由于在进行除法运算时除数不能为 0，因此会发生 ArithmeticError 异常，try 块会捕获该异常，同时 Python 解释器会调用第二个 except 块处理异常；<br>当然，程序运行过程中，还可能由于其他因素出现异常，try 块都可以捕获，同时 Python 会调用最后一个 except 块来处理。<br>当一个 try 块配有多个 except 块时，这些 except 块应遵循这样一个排序规则，即可处理全部异常的 except 块（参数为 Exception，也可以什么都不写）要放到所有 except 块的后面，且所有父类异常的 except 块要放到子类异常的 except 块的后面。</p><h5 id="Python-try-except-else"><a href="#Python-try-except-else" class="headerlink" title="Python try except else"></a>Python try except else</h5><p>在原本的try except结构的基础上，Python 异常处理机制还提供了一个 else 块，也就是<strong>原有 try except 语句的基础上再添加一个 else 块</strong>，即try except else结构。</p><p>使用 else 包裹的代码，只有当 try 块没有捕获到任何异常时，才会得到执行；<br>反之，如果 try 块捕获到异常，即便调用对应的 except 处理完异常，else 块中的代码也不会得到执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    result = 20 / int(input(&#x27;请输入除数:&#x27;))</span><br><span class="line">    print(result)</span><br><span class="line">except ValueError:</span><br><span class="line">    print(&#x27;必须输入整数&#x27;)</span><br><span class="line">except ArithmeticError:</span><br><span class="line">    print(&#x27;算术错误，除数不能为 0&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;没有出现异常&#x27;)</span><br><span class="line">print(&quot;继续执行&quot;)</span><br></pre></td></tr></table></figure><p>当我们输入正确的数据时，try 块中的程序正常执行，Python 解释器执行完 try 块中的程序之后，会继续执行 else 块中的程序，继而执行后续的程序。</p><h5 id="Python-try-except-finally：资源回收"><a href="#Python-try-except-finally：资源回收" class="headerlink" title="Python try except finally：资源回收"></a>Python try except finally：资源回收</h5><p>Python 异常处理机制还提供了一个 finally 语句，通常用来为 try 块中的程序做扫尾清理工作。注意，和 else 语句不同，finally 只要求和 try 搭配使用，而至于该结构中是否包含 except 以及 else，对于 finally 不是必须的<strong>else 必须和 try except 搭配使用</strong>。<br>在整个异常处理机制中，finally 语句的功能是：<strong>无论 try 块是否发生异常，最终都要进入 finally 语句，并执行其中的代码块</strong>。</p><p>基于 finally 语句的这种特性，在某些情况下，当 try 块中的程序打开了一些物理资源（文件、数据库连接等）时，由于这些资源必须手动回收，而回收工作通常就放在 finally 块中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    a = int(input(&quot;请输入 a 的值:&quot;))</span><br><span class="line">    print(20/a)</span><br><span class="line">except:</span><br><span class="line">    print(&quot;发生异常！&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;执行 else 块中的代码&quot;)   </span><br><span class="line">finally :</span><br><span class="line">    print(&quot;执行 finally 块中的代码&quot;)</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：<br>在整个异常处理结构中，只有 try 块是必需的，也就是说：<br>如果没有 try 块，则不能有后面的 except 块、else 块和 finally 块。</p><p>但是也不能只使用 try 块，要么使用 try except 结构，要么使用 try finally 结构；except 块、else 块、finally 块都是可选的，当然也可以同时出现；</p><p>可以有多个 except 块，但捕获父类异常的 except 块应该位于捕获子类异常的 except 块的后面；多个 except 块必须位于 try 块之后，finally 块必须位于所有的 except 块之后。要使用 else 块，其前面必须包含 try 和 except。</p><p>另外在通常情况下，不要在 finally 块中使用如 return 或 raise 等导致方法中止的语句，一旦在 finally 块中使用了 return 或 raise 语句，将会导致 try 块、except 块中的 return、raise 语句失效</p><p>同样，如果 Python 程序在执行 try 块、except 块包含有 return 或 raise 语句，则 Python 解释器执行到该语句时，会先去查找 finally 块，如果没有 finally 块，程序才会立即执行 return 或 raise 语句；</p><p>反之，如果找到 finally 块，系统立即开始执行 finally 块，只有当 finally 块执行完成后，系统才会再次跳回来执行 try 块、except 块里的 return 或 raise 语句。<br>但是，如果在 finally 块里也使用了 return 或 raise 等导致方法中止的语句，finally 块己经中止了方法，系统将不会跳回去执行 try 块、except 块里的任何代码。</p><h5 id="Python-raise用法"><a href="#Python-raise用法" class="headerlink" title="Python raise用法"></a>Python raise用法</h5><p>Python 允许我们在程序中手动设置异常，使用 raise 语句即可。</p><p>raise 语句的基本语法格式为：raise [exceptionName [(reason)]]<br>其中，用 [] 括起来的为可选参数，其作用是指定抛出的异常名称，以及异常信息的相关描述。如果可选参数全部省略，则 raise 会把当前错误原样抛出；如果仅省略 (reason)，则在抛出异常时，将不附带任何的异常描述信息。</p><p>也就是说，raise 语句有如下三种常用的用法：<br>raise：单独一个 raise。该语句引发当前上下文中捕获的异常（比如在 except 块中），或默认引发 RuntimeError 异常。</p><p>raise 异常类名称：raise 后带一个异常类名称，表示引发执行类型的异常。<br>raise 异常类名称(描述信息)：在引发指定类型的异常的同时，附带异常的描述信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    a = input(&quot;输入一个数：&quot;)</span><br><span class="line">    #判断用户输入的是否为数字</span><br><span class="line">    if(not a.isdigit()):</span><br><span class="line">        raise ValueError(&quot;a 必须是数字&quot;)</span><br><span class="line">except ValueError as e:</span><br><span class="line">    print(&quot;引发异常：&quot;,repr(e))</span><br></pre></td></tr></table></figure><p>当然，我们手动让程序引发异常，很多时候并不是为了让其崩溃。事实上，raise 语句引发的异常通常用 try except（else finally）异常处理结构来捕获并进行处理。例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    a = input(&quot;输入一个数：&quot;)</span><br><span class="line">    #判断用户输入的是否为数字</span><br><span class="line">    if(not a.isdigit()):</span><br><span class="line">        raise ValueError(&quot;a 必须是数字&quot;)</span><br><span class="line">except ValueError as e:</span><br><span class="line">    print(&quot;引发异常：&quot;,repr(e))</span><br></pre></td></tr></table></figure><p> raise 不需要参数<br>正如前面所看到的，在使用 raise 语句时可以不带参数，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    a = input(&quot;输入一个数：&quot;)</span><br><span class="line">    if(not a.isdigit()):</span><br><span class="line">        raise</span><br><span class="line">except RuntimeError as e:</span><br><span class="line">    print(&quot;引发异常：&quot;,repr(e))</span><br><span class="line">     </span><br></pre></td></tr></table></figure><h5 id="Python-sys-exc-info-方法：获取异常信息"><a href="#Python-sys-exc-info-方法：获取异常信息" class="headerlink" title="Python sys.exc_info()方法：获取异常信息"></a>Python sys.exc_info()方法：获取异常信息</h5><p>捕获异常时，有 2 种方式可获得更多的异常信息，分别是：<br>使用 sys 模块中的 exc_info 方法</p><p>使用 traceback 模块中的相关函数</p><p>模块 sys 中，有两个方法可以返回异常的全部信息，分别是 exc_info() 和 last_traceback()，这两个函数有相同的功能和用法</p><p>exc_info() 方法会将当前的异常信息以元组的形式返回，该元组中包含 3 个元素，分别为 type、value 和 traceback，它们的含义分别是：</p><p>type：异常类型的名称<br>value：捕获到的异常实例<br>traceback：是一个 traceback 对象(无法直接看出有关异常的信息，还需要对其做进一步处理)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">try:</span><br><span class="line">    x = int(input(&quot;请输入一个被除数：&quot;))</span><br><span class="line">    print(&quot;30除以&quot;,x,&quot;等于&quot;,30/x)</span><br><span class="line">except:</span><br><span class="line">    print(sys.exc_info())</span><br><span class="line">    print(&quot;其他异常...&quot;)</span><br></pre></td></tr></table></figure><p>要查看 traceback 对象包含的内容，需要先引进 traceback 模块，然后调用 traceback 模块中的 print_tb 方法，并将 sys.exc_info() 输出的 traceback 对象作为参数参入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import traceback</span><br><span class="line">try:</span><br><span class="line">    x = int(input(&quot;请输入一个被除数：&quot;))</span><br><span class="line">    print(&quot;30除以&quot;,x,&quot;等于&quot;,30/x)</span><br><span class="line">except:</span><br><span class="line">    traceback.print_tb(sys.exc_info()[2])</span><br><span class="line">    print(&quot;其他异常...&quot;)</span><br></pre></td></tr></table></figure><h5 id="Python自定义异常类及用法"><a href="#Python自定义异常类及用法" class="headerlink" title="Python自定义异常类及用法"></a>Python自定义异常类及用法</h5><p>Python 允许用户自定义异常类型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Error(Exception):</span><br><span class="line">   pass</span><br><span class="line">try:</span><br><span class="line">   raise Error()</span><br><span class="line">except :</span><br><span class="line">   print(&quot;error&quot;)</span><br></pre></td></tr></table></figure><p>另外，系统自带的异常只要触发会自动抛出（比如 NameError、ValueError 等），但用户自定义的异常需要用户自己决定什么时候抛出。也就是说，<strong>自定义的异常需要使用 raise 手动抛出。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class InputError(Exception):</span><br><span class="line">    &#x27;&#x27;&#x27;当输出有误时，抛出此异常&#x27;&#x27;&#x27;</span><br><span class="line">    #自定义异常类型的初始化</span><br><span class="line">    def __init__(self, value):</span><br><span class="line">        self.value = value</span><br><span class="line">    #返回异常类对象的说明信息</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return (&quot;&#123;&#125; is invalid input&quot;.format(repr(self.value)))</span><br><span class="line">   </span><br><span class="line">try:</span><br><span class="line">    raise InputError(1) # 抛出 MyInputError 这个异常</span><br><span class="line">except InputError as err:</span><br><span class="line">    print(&#x27;error: &#123;&#125;&#x27;.format(err))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python提升七</title>
      <link href="/post/686f287a.html"/>
      <url>/post/686f287a.html</url>
      
        <content type="html"><![CDATA[<h5 id="Python可重载运算符有哪些"><a href="#Python可重载运算符有哪些" class="headerlink" title="Python可重载运算符有哪些"></a>Python可重载运算符有哪些</h5><p>这里给大家举一个与重载运算符相关的实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class MyClass: #自定义一个类</span><br><span class="line">    def __init__(self, name , age): #定义该类的初始化函数</span><br><span class="line">        self.name = name #将传入的参数值赋值给成员交量</span><br><span class="line">        self.age = age</span><br><span class="line">    def __str__(self): #用于将值转化为字符串形式，等同于 str(obj)</span><br><span class="line">        return &quot;name:&quot;+self.name+&quot;;age:&quot;+str(self.age)</span><br><span class="line">   </span><br><span class="line">    __repr__ = __str__ #转化为供解释器读取的形式</span><br><span class="line">   </span><br><span class="line">    def __lt__(self, record): #重载 self&lt;record 运算符</span><br><span class="line">        if self.age &lt; record.age:</span><br><span class="line">            return True</span><br><span class="line">        else:</span><br><span class="line">            return False</span><br><span class="line">   </span><br><span class="line">    def __add__(self, record): #重载 + 号运算符</span><br><span class="line">        return MyClass(self.name, self.age+record.age)</span><br><span class="line"></span><br><span class="line">myc = MyClass(&quot;Anna&quot;, 42) #实例化一个对象 Anna，并为其初始化</span><br><span class="line">mycl = MyClass(&quot;Gary&quot;, 23) #实例化一个对象 Gary，并为其初始化</span><br><span class="line">print(repr(myc)) #格式化对象 myc，</span><br><span class="line">print(myc) #解释器读取对象 myc，调用 repr</span><br><span class="line">print (str (myc)) #格式化对象 myc ，输出&quot;name:Anna;age:42&quot;</span><br><span class="line">print(myc &lt; mycl) #比较 myc&lt;mycl 的结果，输出 False</span><br><span class="line">print (myc+mycl) #进行两个 MyClass 对象的相加运算，输出 &quot;name:Anna;age:65&quot;</span><br></pre></td></tr></table></figure><p>通过将 myc 进行 repr、str 运算，从输出结果中可以看到，程序调用了重载的操作符方法 <strong>repr</strong> 和 __str__。而令 myc 和 mycl 进行 &lt; 号的比较运算以及加法运算，从输出结果中可以看出，程序调用了重载 &lt; 号的方法 <strong>lt</strong> 和 <strong>add</strong> 方法。</p><p>那么，Python 类支持对哪些方法进行重载呢？这个给大家提供一个表格（表 1），列出了 Python 中常用的可重载的运算符，以及各自的含义</p><h5 id="Python迭代器及其用法"><a href="#Python迭代器及其用法" class="headerlink" title="Python迭代器及其用法"></a>Python迭代器及其用法</h5><p>列表（list）、元组（tuple）、字典（dict）、集合（set）这些序列式容器，有一个共同的特性，<br>它们都支持使用 for 循环遍历存储的元素，都是可迭代的，因此它们又有一个别称，即迭代器。</p><p>从字面来理解，迭代器指的就是支持迭代的容器，更确切的说，是支持迭代的容器类对象，这里的容器可以是列表、元组等这些 Python 提供的基础容器，也可以是自定义的容器类对象，只要该容器支持迭代即可。</p><p>如果要<strong>自定义</strong>实现一个迭代器，则类中必须实现如下 2 个方法：<br><strong>next</strong>(self)：返回容器的下一个元素。<br><strong>iter</strong>(self)：该方法返回一个迭代器（iterator）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">class reverse:</span><br><span class="line">    def __init__(self,string):</span><br><span class="line">        self.index= len(string)</span><br><span class="line">        self.string= string</span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return self</span><br><span class="line">    def __next__(self):</span><br><span class="line">        if self.index==0:</span><br><span class="line">            sys.exit(0)</span><br><span class="line">        self.index -= 1</span><br><span class="line">        return self.string[self.index]</span><br><span class="line">res= reverse(&quot;xiaoyang&quot;)</span><br><span class="line">for i in res:</span><br><span class="line">    print(i,end=&#x27; &#x27;)</span><br></pre></td></tr></table></figure><p>迭代器本身是一个底层的特性和概念，在程序中并不常用，但它为生成器这一更有趣的特性提供了基础。</p><h5 id="Python迭代器实现字符串的逆序输出"><a href="#Python迭代器实现字符串的逆序输出" class="headerlink" title="Python迭代器实现字符串的逆序输出"></a>Python迭代器实现字符串的逆序输出</h5><p>实现思路是这样的，自定义一个类并重载其 <strong>init</strong>() 初始化方法，实现为自身私有成员赋值<br>同时重载 <strong>iter</strong>() 和 <strong>next</strong>() 方法，使其具有迭代器功能。在此基础上，如果想实现对用户输入的字符串进行逆序输出，就需要在 <strong>next</strong>() 方法中实现从后往前返回字符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Reverse:</span><br><span class="line">    def __init__(self, string):</span><br><span class="line">        self.__string = string</span><br><span class="line">        self.__index = len(string)</span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return self</span><br><span class="line">    def __next__(self):</span><br><span class="line">        if self.__index == 0:</span><br><span class="line">            raise(StopIteration)</span><br><span class="line">        self.__index -= 1</span><br><span class="line">        return self.__string[self.__index]</span><br><span class="line">revstr = Reverse(&#x27;Python&#x27;)</span><br><span class="line">for c in revstr:</span><br><span class="line">    print(c,end=&quot; &quot;)</span><br></pre></td></tr></table></figure><h5 id="Python生成器"><a href="#Python生成器" class="headerlink" title="Python生成器"></a>Python生成器</h5><p>以 list 容器为例，在使用该容器迭代一组数据时，必须事先将所有数据存储到容器中，才能开始迭代；而生成器却不同，它可以实现在迭代的同时生成元素。<br>也就是说，对于可以用某种算法推算得到的多个数据，生成器并不会一次性生成它们，而是什么时候需要，才什么时候生成。<br>不仅如此，生成器的创建方式也比迭代器简单很多，大体分为以下 2 步：</p><p>定义一个以 yield 关键字标识返回值的函数；<br>调用刚刚创建的函数，即可创建一个生成器。<br>带有 yield 的函数不再是一个普通函数，而是一个生成器generator，可用于迭代，工作原理同上。</p><p>yield 是一个类似 return的关键字，迭代一次遇到yield时就返回yield后面的值。重点是：下一次迭代时，从上一次迭代遇到的yield后面的代码开始执行。</p><p>简要理解：yield就是 return 返回一个值，并且记住这个返回的位置，下次迭代就从这个位置后开始。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def intNum():</span><br><span class="line">    print(&quot;开始执行&quot;)</span><br><span class="line">    for i in range(5):</span><br><span class="line">        yield i</span><br><span class="line">        print(&quot;继续执行&quot;)</span><br><span class="line">num = intNum()</span><br></pre></td></tr></table></figure><p>我们就成功创建了一个 num 生成器对象。显然，和普通函数不同，intNum() 函数的返回值用的是 yield 关键字，而不是 return 关键字，此类函数又成为生成器函数。</p><p>和 return 相比，yield 除了可以返回相应的值，还有一个更重要的功能，即每当程序执行完该语句时，程序就会暂停执行。</p><p>不仅如此，即便调用生成器函数，Python 解释器也不会执行函数中的代码，它只会返回一个生成器（对象）。</p><p>要想使生成器函数得以执行，或者想使执行完 yield 语句立即暂停的程序得以继续执行，有以下 2 种方式：</p><p>通过生成器（上面程序中的 num）调用 next() 内置函数或者 <strong>next</strong>() 方法；<br>通过 for 循环遍历生成器。</p><p>在上面程序的基础上，添加如下语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def diedai():</span><br><span class="line">   print(&quot;开始使用&quot;)</span><br><span class="line">   for i in range(0,11):</span><br><span class="line">      yield i</span><br><span class="line">num = diedai()</span><br><span class="line"># print(diedai())</span><br><span class="line">#调用 next() 内置函数</span><br><span class="line">print(next(num))#调用 __next__() 方法</span><br><span class="line">print(num.__next__())#通过for循环遍历生成器</span><br><span class="line">for i in num:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><p>这里有必要给读者分析一个程序的执行流程：</p><ol><li><p>首先，在创建有 num 生成器的前提下，通过其调用 next() 内置函数，会使 Python 解释器开始执行 intNum() 生成器函数中的代码，因此会输出“开始执行”，程序会一直执行到yield i，而此时的 i&#x3D;&#x3D;0，因此 Python 解释器输出“0”。由于受到 yield 的影响，程序会在此处暂停。</p></li><li><p>然后，我们使用 num 生成器调用 <strong>next</strong>() 方法，该方法的作用和 next() 函数完全相同（事实上，next() 函数的底层执行的也是 <strong>next</strong>() 方法），它会是程序继续执行，即输出“继续执行”，程序又会执行到yield i，此时 i&#x3D;&#x3D;1，因此输出“1”，然后程序暂停。</p></li><li><p>最后，我们使用 for 循环遍历 num 生成器，之所以能这么做，是因为 for 循环底层会不断地调用 next() 函数，使暂停的程序继续执行，因此会输出后续的结果。</p></li></ol><h5 id="Python生成器send-方法"><a href="#Python生成器send-方法" class="headerlink" title="Python生成器send()方法"></a>Python生成器send()方法</h5><p>我们知道，通过调用 next() 或者 <strong>next</strong>() 方法，可以实现从外界控制生成器的执行。除此之外，通过 send() 方法，还可以向生成器中传值。<br>值得一提的是，send() 方法可带一个参数，也可以不带任何参数（用 None 表示）。其中，当使用不带参数的 send() 方法时，它和 next() 函数的功能完全相同。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def intNum():</span><br><span class="line">    print(&quot;开始执行&quot;)</span><br><span class="line">    for i in range(5):</span><br><span class="line">        yield i</span><br><span class="line">        print(&quot;继续执行&quot;)</span><br><span class="line">num = intNum()</span><br><span class="line">print(num.send(None))</span><br><span class="line">print(num.send(None))</span><br></pre></td></tr></table></figure><p>带参数的 send(value) 的用法，其具备 next() 函数的部分功能，即将暂停在 yield 语句出的程序继续执行，但与此同时，该函数还会将 value 值作为 yield 语句返回值赋值给接收者。注意，带参数的 send(value) 无法启动执行生成器函数。也就是说，程序中第一次使用生成器调用 next() 或者 send() 函数时，不能使用带参数的 send() 函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def foo():</span><br><span class="line">    bar_a = yield &quot;hello&quot;    </span><br><span class="line">    bar_b = yield bar_a</span><br><span class="line">    yield bar_b</span><br><span class="line">f = foo()</span><br><span class="line">print(f.send(None))</span><br><span class="line">print(f.send(&quot;漂亮鬼&quot;))</span><br><span class="line">print(f.send(&quot;https://xiaoyangzst.vercel.app&quot;))</span><br></pre></td></tr></table></figure><p>分析一下此程序的执行流程：</p><ol><li><p>首先，构建生成器函数，并利用器创建生成器（对象）f 。</p></li><li><p>使用生成器 f 调用无参的 send() 函数，其功能和 next() 函数完全相同，因此开始执行生成器函数，即执行到第一个 yield “hello” 语句，该语句会返回 “hello” 字符串，然后程序停止到此处（注意，此时还未执行对 bar_a 的赋值操作）。</p></li><li><p>下面开始使用生成器 f 调用有参的 send() 函数，首先它会将暂停的程序开启，同时还会将其参数“漂亮鬼”赋值给当前 yield 语句的接收者，也就是 bar_a 变量。程序一直执行完 yield bar_a 再次暂停，因此会输出“漂亮鬼”。</p></li></ol><p>4） 最后依旧是调用有参的 send() 函数，同样它会启动餐厅的程序，同时将参数”<a href="https://xiaoyangzst.vercel.app&quot;传给/">https://xiaoyangzst.vercel.app&quot;传给</a> bar_b，然后执行完 yield bar_b 后（输出”<a href="https://xiaoyangzst.vercel.app&quot;),程序执行再次暂停./">https://xiaoyangzst.vercel.app&quot;)，程序执行再次暂停。</a></p><p>yield 是一个类似 return 的关键字，迭代一次遇到yield时就返回yield后面(右边)的值。重点是：下一次迭代时，从上一次迭       代遇到的yield后面的代码(下一行)开始执行</p><h5 id="Python生成器close-方法"><a href="#Python生成器close-方法" class="headerlink" title="Python生成器close()方法"></a>Python生成器close()方法</h5><p>当程序在生成器函数中遇到 yield 语句暂停运行时，此时如果调用 close() 方法，会阻止生成器函数继续执行，该函数会在程序停止运行的位置抛出 GeneratorExit 异常。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def foo():</span><br><span class="line">    try:</span><br><span class="line">        yield 1</span><br><span class="line">    except GeneratorExit:</span><br><span class="line">        print(&#x27;捕获到 GeneratorExit&#x27;)</span><br><span class="line">f = foo()</span><br><span class="line">print(next(f))</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>注意，虽然通过捕获 GeneratorExit 异常，可以继续执行生成器函数中剩余的代码，带这部分代码中不能再包含 yield 语句，否则程序会抛出 RuntimeError 异常</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def foo():</span><br><span class="line">    try:</span><br><span class="line">        yield 1</span><br><span class="line">    except GeneratorExit:</span><br><span class="line">        print(&#x27;捕获到 GeneratorExit&#x27;)</span><br><span class="line">        yield 2 #抛出 RuntimeError 异常</span><br><span class="line"></span><br><span class="line">f = foo()</span><br><span class="line">print(next(f))</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>另外，生成器函数一旦使用 close() 函数停止运行，后续将无法再调用 next() 函数或者 <strong>next</strong>() 方法启动执行，否则会抛出 StopIteration 异常</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def foo():</span><br><span class="line">    yield &quot;c.biancheng.net&quot;</span><br><span class="line">    print(&quot;生成器停止执行&quot;)</span><br><span class="line"></span><br><span class="line">f = foo()</span><br><span class="line">print(next(f)) #输出 &quot;c.biancheng.net&quot;</span><br><span class="line">f.close()</span><br><span class="line">next(f) #原本应输出&quot;生成器停止执行&quot;</span><br></pre></td></tr></table></figure><h5 id="Python-函数装饰器及用法"><a href="#Python-函数装饰器及用法" class="headerlink" title="Python @函数装饰器及用法"></a>Python @函数装饰器及用法</h5><p>函数装饰器的工作原理<br>假设用 funA() 函数装饰器去装饰 funB() 函数：</p><p>#funA 作为装饰器函数<br>def funA(fn):<br>    #…<br>    fn() # 执行传入的fn参数<br>    #…<br>    return ‘…’</p><p>@funA<br>def funB():<br>    #…</p><p>实际上，上面程序完全等价于下面的程序：</p><p>def funA(fn):<br>    #…<br>    fn() # 执行传入的fn参数<br>    #…<br>    return ‘…’</p><p>def funB():<br>    #…</p><p>funB &#x3D; funA(funB)</p><p>通过比对以上 2 段程序不难发现，使用函数装饰器 A() 去装饰另一个函数 B()，其底层执行了如下 2 步操作：<br>将 B 作为参数传给 A() 函数；将 A() 函数执行完成的返回值反馈回B。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#funA 作为装饰器函数</span><br><span class="line">def funA(fn):</span><br><span class="line">    print(&quot;漂亮鬼&quot;)</span><br><span class="line">    fn() # 执行传入的fn参数</span><br><span class="line">    print(&quot;https://xiaoyangzst.vercel.app&quot;)</span><br><span class="line">    return &quot;装饰器函数的返回值&quot;</span><br><span class="line"></span><br><span class="line">@funA</span><br><span class="line">def funB():</span><br><span class="line">    print(&quot;学习 Python&quot;)</span><br><span class="line">print(funB)</span><br></pre></td></tr></table></figure><p>显然，被“＠函数”修饰的函数不再是原来的函数，而是被替换成一个新的东西（取决于装饰器的返回值），</p><p>即如果装饰器函数的返回值为普通变量，那么被修饰的函数名就变成了变量名；</p><p>同样，如果装饰器返回的是一个函数的名称，那么被修饰的函数名依然表示一个函数。<br><strong>实际上，所谓函数装饰器，就是通过装饰器函数，在不修改原函数的前提下，来对函数的功能进行合理的扩充。</strong></p><h6 id="带参数的函数装饰器"><a href="#带参数的函数装饰器" class="headerlink" title="带参数的函数装饰器"></a>带参数的函数装饰器</h6><p>在分析 funA() 函数装饰器和 funB() 函数的关系时，细心的读者可能会发现一个问题，即当 funB() 函数无参数时，可以直接将 funB 作为 funA() 的参数传入。但是，如果被修饰的函数本身带有参数，那应该如何传值呢？<br>比较简单的解决方法就是在函数装饰器中嵌套一个函数，该函数带有的参数个数和被装饰器修饰的函数相同。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def funA(fn):</span><br><span class="line">    # 定义一个嵌套函数</span><br><span class="line">    def say(arc):</span><br><span class="line">        print(&quot;Python教程:&quot;,arc)</span><br><span class="line">    return say</span><br><span class="line"></span><br><span class="line">@funA</span><br><span class="line">def funB(arc):</span><br><span class="line">    print(&quot;funB():&quot;, a)</span><br><span class="line">funB(&quot;1d23456789&quot;)</span><br></pre></td></tr></table></figure><p>其实，它和如下程序是等价的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def funA(fn):</span><br><span class="line">    # 定义一个嵌套函数</span><br><span class="line">    def say(arc):</span><br><span class="line">        print(&quot;Python教程:&quot;,arc)</span><br><span class="line">    return say</span><br><span class="line"></span><br><span class="line">def funB(arc):</span><br><span class="line">    print(&quot;funB():&quot;, arc)</span><br><span class="line">   </span><br><span class="line">funB = funA(funB)</span><br><span class="line">funB(&quot;http://c.biancheng.net/python&quot;)</span><br></pre></td></tr></table></figure><p>但还有一个问题需要解决，即如果当前程序中，有多个（≥ 2）函数被同一个装饰器函数修饰，这些函数带有的参数个数并不相等，怎么办呢？<br>最简单的解决方式是用 *args 和 *<em>kwargs 作为装饰器内部嵌套函数的参数，</em>args 和 **kwargs 表示接受任意数量和类型的参数。举个例子：</p><p>def funA(fn):<br>    # 定义一个嵌套函数<br>    def say(*args,**kwargs):<br>        fn(*args,**kwargs)<br>    return say</p><p>@funA<br>def funB(arc):<br>    print(“211212：”,arc)</p><p>@funA<br>def other_funB(name,arc):<br>    print(name,arc)<br>funB(“2134567”)<br>other_funB(“324程：”,”234234324234234”)</p>]]></content>
      
      
      <categories>
          
          <category> python提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python提升六</title>
      <link href="/post/df93073c.html"/>
      <url>/post/df93073c.html</url>
      
        <content type="html"><![CDATA[<h5 id="Python-del-方法：销毁对象"><a href="#Python-del-方法：销毁对象" class="headerlink" title="Python del()方法：销毁对象"></a>Python <strong>del</strong>()方法：销毁对象</h5><p>Python 通过调用 <strong>init</strong>() 方法构造当前类的实例化对象，而节 <strong>del</strong>() 方法，功能正好和 <strong>init</strong>() 相反，其用来销毁实例化对象。</p><p>事实上在编写程序时，如果之前创建的<strong>类实例化对象</strong>后续不再使用，最好在适当位置手动将其销毁，释放其占用的内存空间（整个过程称为垃圾回收（简称GC））。<br>大多数情况下，Python 开发者不需要手动进行垃圾回收，因为 Python 有自动的垃圾回收机制，能自动将不需要使用的实例对象进行销毁。<br>无论是手动销毁，还是 Python 自动帮我们销毁，都会调用 <strong>del</strong>() 方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class CLanguage:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        print(&quot;调用 __init__() 方法构造对象&quot;)</span><br><span class="line">    def __del__(self):</span><br><span class="line">        print(&quot;调用__del__() 销毁对象，释放其空间&quot;)</span><br><span class="line">clangs = CLanguage()</span><br><span class="line">del clangs</span><br></pre></td></tr></table></figure><p><strong>读者千万不要误认为，只要为该实例对象调用 <strong>del</strong>() 方法，该对象所占用的内存空间就会被释放</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class CLanguage:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        print(&quot;调用 __init__() 方法构造对象&quot;)</span><br><span class="line">    def __del__(self):</span><br><span class="line">        print(&quot;调用__del__() 销毁对象，释放其空间&quot;)</span><br><span class="line">clangs = CLanguage()</span><br><span class="line">cl = clangs</span><br><span class="line">del clangs</span><br><span class="line">print(&#x27;nihao&#x27;)</span><br></pre></td></tr></table></figure><p>可以看到，当程序中有其它变量（比如这里的 cl）引用该实例对象时，即便手动调用 <strong>del</strong>() 方法，该方法也不会立即执行。这和 Python 的垃圾回收机制的实现有关。</p><p><strong>Python 采用自动引用计数（简称 ARC）的方式实现垃圾回收机制。</strong></p><p>该方法的核心思想是：<br>每个 Python 对象都会配置一个计数器，初始 Python 实例对象的计数器值都为 0，如果有变量<strong>引用该实例对象</strong>，其计数器的值会加 1，依次类推；反之，每当一个变量取消对该实例对象的引用，计数器会减 1。如果一个 Python 对象的的计数器值为 0，则表明没有变量引用该 Python 对象，即证明程序不再需要它，此时 Python 就会自动调用 <strong>del</strong>() 方法将其回收。</p><p>以上面程序中的 clangs 为例，实际上构建 clangs 实例对象的过程分为 2 步，先使用 CLanguage() 调用该类中的 <strong>init</strong>() 方法构造出一个该类的对象（将其称为 C，计数器为 0），并立即用 clangs 这个变量作为所建实例对象的引用（ C 的计数器值 + 1）。在此基础上，又有一个 cl 变量引用 clangs（其实相当于引用 CLanguage()，此时 C 的计数器再 +1 ），这时如果调用del clangs语句，只会导致 C 的计数器减 1（值变为 1），因为 C 的计数器值不为 0，因此 C 不会被销毁（不会执行 <strong>del</strong>() 方法）。</p><p>需要额外说明的是，如果我们重写子类的 <strong>del</strong>() 方法（父类为非 object 的类），则必须显式调用父类的 <strong>del</strong>() 方法，这样才能保证在回收子类对象时，其占用的资源（可能包含继承自父类的部分资源）能被彻底释放。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class CLanguage:</span><br><span class="line">    def __del__(self):</span><br><span class="line">        print(&quot;调用父类 __del__() 方法&quot;)</span><br><span class="line"></span><br><span class="line">class cl(CLanguage):</span><br><span class="line">    def __del__(self):</span><br><span class="line">        print(&quot;调用子类 __del__() 方法&quot;)</span><br><span class="line">c = cl()</span><br><span class="line">del c</span><br></pre></td></tr></table></figure><p>正确做法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class CLanguage:</span><br><span class="line">    def __del__(self):</span><br><span class="line">        print(&quot;调用父类 __del__() 方法&quot;)</span><br><span class="line">class cl(CLanguage):</span><br><span class="line">    def __del__(self):</span><br><span class="line">        print(&quot;调用子类 __del__() 方法&quot;)</span><br><span class="line">c = cl()</span><br><span class="line">del c</span><br><span class="line">CLanguage.__del__(cl)</span><br></pre></td></tr></table></figure><h5 id="Python-dir-用法：列出对象的所有属性（方法）名"><a href="#Python-dir-用法：列出对象的所有属性（方法）名" class="headerlink" title="Python dir()用法：列出对象的所有属性（方法）名"></a>Python <strong>dir</strong>()用法：列出对象的所有属性（方法）名</h5><p>Python 内置函数时，提到了 dir() 函数，通过此函数可以某个对象拥有的所有的属性名和方法名，该函数会返回一个包含有所有属性名和方法名的有序列表。<br>注意，通过 dir() 函数，不仅仅输出本类中新添加的属性名和方法（最后 3 个），还会输出从父类（这里为 object 类）继承得到的属性名和方法名。</p><p>值得一提的是，dir() 函数的内部实现，其实是在调用参数对象  <strong>dir</strong>() 方法的基础上，对该方法返回的属性名和方法名做了排序。<br>所以，除了使用 dir() 函数，我们完全可以自行调用该对象具有的 <strong>dir</strong>() 方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class CLanguage:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        print(&quot;调用 __init__() 方法构造对象&quot;)</span><br><span class="line">    def __del__(self):</span><br><span class="line">        print(&quot;调用__del__() 销毁对象，释放其空间&quot;)</span><br><span class="line">    def __say(self):</span><br><span class="line">        pass</span><br><span class="line">clangs = CLanguage()</span><br><span class="line">print(clangs.__dir__())</span><br></pre></td></tr></table></figure><p>使用 <strong>dir</strong>() 方法和 dir() 函数输出的数据是相同，仅仅顺序不同。</p><h5 id="Python-dict-属性：查看对象内部所有属性名和属性值组成的字典"><a href="#Python-dict-属性：查看对象内部所有属性名和属性值组成的字典" class="headerlink" title="Python __dict__属性：查看对象内部所有属性名和属性值组成的字典"></a>Python __dict__属性：查看对象内部所有属性名和属性值组成的字典</h5><p>在 Python 类的内部，无论是类属性还是实例属性，都是以字典的形式进行存储的，其中属性名作为键，而值作为该键对应的值。</p><p>为了方便用户查看类中包含哪些属性，Python 类提供了 <strong>dict</strong> 属性。需要注意的一点是，该属性可以用类名或者类的实例对象来调用</p><p>用<strong>类名</strong>直接调用 __dict__，会输出该由类中所有<strong>类属性</strong>组成的字典；</p><p>而使用<strong>类的实例对象</strong>调用 __dict__，会输出该类中所有<strong>实例属性</strong>组成的字典。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class CLanguage:</span><br><span class="line">    a =23</span><br><span class="line">    b=21</span><br><span class="line">    def __init__(self):</span><br><span class="line">        print(&quot;调用 __init__() 方法构造对象&quot;)</span><br><span class="line">        self.name=12</span><br><span class="line">        self.data=42</span><br><span class="line">    def __say(self):</span><br><span class="line">        pass</span><br><span class="line">clangs = CLanguage()</span><br><span class="line">print(clangs.__dict__)</span><br><span class="line">print(CLanguage.__dict__)</span><br></pre></td></tr></table></figure><p>对于具有继承关系的父类和子类来说，父类有自己的 __dict__，同样子类也有自己的 __dict__，它不会包含父类的 <strong>dict</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class CLanguage:</span><br><span class="line">    a = 1</span><br><span class="line">    b = 2</span><br><span class="line">    def __init__ (self):</span><br><span class="line">        self.name = &quot;12&quot;</span><br><span class="line">        self.add = &quot;23&quot;</span><br><span class="line">       </span><br><span class="line">class CL(CLanguage):</span><br><span class="line">    c = 1</span><br><span class="line">    d = 2</span><br><span class="line">    def __init__ (self):</span><br><span class="line">        self.na = &quot;22&quot;</span><br><span class="line">        self.ad = &quot;h24&quot;</span><br><span class="line">#父类名调用__dict__</span><br><span class="line">print(CLanguage.__dict__)</span><br><span class="line">#子类名调用__dict__</span><br><span class="line">print(CL.__dict__)</span><br><span class="line">#父类实例对象调用 __dict__</span><br><span class="line">clangs = CLanguage()</span><br><span class="line">print(clangs.__dict__)</span><br><span class="line">#子类实例对象调用 __dict__</span><br><span class="line">cl = CL()</span><br><span class="line">print(cl.__dict__)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="Python-setattr-、getattr-、hasattr-函数用法详解"><a href="#Python-setattr-、getattr-、hasattr-函数用法详解" class="headerlink" title="Python setattr()、getattr()、hasattr()函数用法详解"></a>Python setattr()、getattr()、hasattr()函数用法详解</h5><h6 id="Python-hasattr-函数"><a href="#Python-hasattr-函数" class="headerlink" title="Python hasattr()函数"></a>Python hasattr()函数</h6><p>hasattr() 函数用来判断某个类实例对象是否包含指定名称的属性或方法。<br>语法格式：</p><p>hasattr(obj, name)</p><p>其中 obj 指的是某个类的实例对象，name 表示指定的属性名或方法名。同时，该函数会将判断的结果（True 或者 False）作为返回值反馈回来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class CLanguage:</span><br><span class="line">    def __init__ (self):</span><br><span class="line">        self.name = &quot;12&quot;</span><br><span class="line">        self.add = &quot;23&quot;</span><br><span class="line">    def say(self):</span><br><span class="line">        print(&quot;我正在学Python&quot;)</span><br><span class="line"></span><br><span class="line">clangs = CLanguage()</span><br><span class="line">print(hasattr(clangs,&quot;name&quot;))</span><br><span class="line">print(hasattr(clangs,&quot;add&quot;))</span><br><span class="line">print(hasattr(clangs,&quot;say&quot;))</span><br></pre></td></tr></table></figure><p>无论是属性名还是方法名，都在 hasattr() 函数的匹配范围内。因此，我们只能通过该函数判断实例对象是否包含该名称的属性或方法，<strong>但不能精确判断，该名称代表的是属性还是方法。</strong></p><h6 id="Python-getattr-函数"><a href="#Python-getattr-函数" class="headerlink" title="Python getattr() 函数"></a>Python getattr() 函数</h6><p>getattr() 函数获取某个<strong>类实例对象中指定属性的值</strong>。没错，和 hasattr() 函数不同，该函数只会从类对象包含的所有属性中进行查找。<br>语法格式：<br>getattr(obj, name[, default])</p><p>obj 表示指定的类实例对象<br>name 表示指定的属性名<br>default 是可选参数，用于设定该函数的默认返回值，即当函数查找失败时，如果不指定 default 参数，则程序将直接报 AttributeError 错误，反之该函数将返回 default 指定的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class CLanguage:</span><br><span class="line">    def __init__ (self):</span><br><span class="line">        self.name = &quot;12&quot;</span><br><span class="line">        self.add = &quot;23&quot;</span><br><span class="line">    def say(self):</span><br><span class="line">        print(&quot;我正在学Python&quot;)</span><br><span class="line"></span><br><span class="line">clangs = CLanguage()</span><br><span class="line">print(getattr(clangs,&quot;name&quot;))</span><br><span class="line">print(getattr(clangs,&quot;add&quot;))</span><br><span class="line">print(getattr(clangs,&quot;say&quot;))</span><br><span class="line">print(getattr(clangs,&quot;display&quot;,&#x27;no display&#x27;))</span><br></pre></td></tr></table></figure><p>对于类中已有的属性，getattr() 会返回它们的值，而如果该名称为方法名，则返回该方法的状态信息；反之，如果该明白不为类对象所有，要么返回默认的参数，要么程序报 AttributeError 错误。</p><h6 id="Python-setattr-函数"><a href="#Python-setattr-函数" class="headerlink" title="Python setattr()函数"></a>Python setattr()函数</h6><p>setattr() 函数的功能相对比较复杂，它最基础的功能是<strong>修改</strong>类实例对象中的属性值。其次，它还可以实现为实例对象动态添加属性或者方法。<br>语法格式：</p><p>setattr(obj, name, value)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class CLanguage:</span><br><span class="line">    def __init__ (self):</span><br><span class="line">        self.name = &quot;12&quot;</span><br><span class="line">        self.add = &quot;23&quot;</span><br><span class="line">    def say(self):</span><br><span class="line">        print(&quot;我正在学Python&quot;)</span><br><span class="line">clangs = CLanguage()</span><br><span class="line">print(clangs.name)</span><br><span class="line">print(clangs.add)</span><br><span class="line">setattr(clangs,&quot;name&quot;,&quot;Python&quot;)</span><br><span class="line">setattr(clangs,&quot;add&quot;,&quot;change&quot;)</span><br><span class="line">print(clangs.name)</span><br><span class="line">print(clangs.add)</span><br></pre></td></tr></table></figure><p>甚至利用 setattr() 函数，还可以将类属性修改为一个类方法，同样也可以将类方法修改成一个类属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def say(self):</span><br><span class="line">    print(&quot;我正在学Python&quot;)</span><br><span class="line"></span><br><span class="line">class CLanguage:</span><br><span class="line">    def __init__ (self):</span><br><span class="line">        self.name = &quot;12&quot;</span><br><span class="line">        self.add = &quot;23&quot;</span><br><span class="line"></span><br><span class="line">clangs = CLanguage()</span><br><span class="line">print(clangs.name)</span><br><span class="line">print(clangs.add)</span><br><span class="line">setattr(clangs,&quot;name&quot;,say)</span><br><span class="line">clangs.name(clangs)</span><br></pre></td></tr></table></figure><p>显然，通过修改 name 属性的值为 say（这是一个外部定义的函数），原来的 name 属性就变成了一个 name() 方法。</p><p>使用 setattr() 函数对实例对象中执行名称的属性或方法进行修改时，如果该名称查找失败，Python 解释器不会报错，<strong>而是会给该实例对象动态添加一个指定名称的属性或方法</strong>。：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def say(self):</span><br><span class="line">    print(&quot;我正在学Python&quot;)</span><br><span class="line">class CLanguage:</span><br><span class="line">    pass</span><br><span class="line">clangs = CLanguage()</span><br><span class="line">setattr(clangs,&quot;name&quot;,&quot;漂亮鬼&quot;)</span><br><span class="line">setattr(clangs,&quot;say&quot;,say)</span><br><span class="line">print(clangs.name)</span><br><span class="line">clangs.say(clangs)</span><br></pre></td></tr></table></figure><p>虽然 CLanguage 为空类，但通过 setattr() 函数，我们为 clangs 对象动态添加了一个 name 属性和一个 say() 方法。</p><h5 id="Python-call-方法"><a href="#Python-call-方法" class="headerlink" title="Python call()方法"></a>Python <strong>call</strong>()方法</h5><p>该方法的功能类似于在类中重载 () 运算符，使得类实例对象可以像调用普通函数那样，以“对象名()”的形式使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class CLanguage:</span><br><span class="line">    # 定义__call__方法</span><br><span class="line">    def __call__(self,name,add):</span><br><span class="line">        print(&quot;调用__call__()方法&quot;,name,add)</span><br><span class="line"></span><br><span class="line">clangs = CLanguage()</span><br><span class="line">clangs(&quot;漂亮鬼&quot;,&quot;https://xiaoyangzst.vercel.app&quot;)</span><br></pre></td></tr></table></figure><p>通过在 CLanguage 类中实现 <strong>call</strong>() 方法，使的 clangs 实例对象变为了可调用对象</p><p>Python 中，凡是可以将 () 直接应用到自身并执行，都称为可调用对象。可调用对象包括自定义的函数、Python 内置函数以及本节所讲的类实例对象。</p>]]></content>
      
      
      <categories>
          
          <category> python提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tkinter-Canvas画布控件</title>
      <link href="/post/20b2c4ea.html"/>
      <url>/post/20b2c4ea.html</url>
      
        <content type="html"><![CDATA[<h5 id="Tkinter-Canvas画布控件"><a href="#Tkinter-Canvas画布控件" class="headerlink" title="Tkinter Canvas画布控件"></a>Tkinter Canvas画布控件</h5><p>Canvas 控件具有两个功能，<br>1.<br>它可以用来绘制各种图形<br>如,弧形、线条、椭圆形、多边形和矩形等，<br>2.<br>Canvas 控件还可以用来展示图片（包括位图），我们将这些绘制在画布控件上的图形，称之为“画布对象”。</p><p>每一个画布对象都有一个“唯一身份ID”，这是 Tkinter 自动为其创建的，从而方便控制和操作这些画布对象。</p><p>通过 Canvas 控件创建一个简单的图形编辑器，让用户可以达到自定义图形的目的，就像使用画笔在画布上绘画一样，可以绘制各式各样的形状，从而有更好的人机交互体验。</p><p>常用属性：</p><p>background(bg)<br>指定 Canvas 控件的背景颜色</p><p>borderwidth(bd)<br>指定 Canvas 控件的边框宽度</p><p>closeenough</p><ol><li>指定一个距离，当鼠标与画布对象的距离小于该值时，认为鼠标位于画布对象上</li><li>该选项是一个浮点类型的值</li></ol><p>confine<br>指定 Canvas 控件是否允许滚动超出 </p><p>scrollregion<br>项设置的滚动范围，默认值为 True</p><p>selectbackground<br>指定当画布对象（即在 Canvas 画布上绘制的图形）被选中时的背景色</p><p>selectborderwidth<br>指定当画布对象被选中时的边框宽度（选中边框）</p><p>selectforeground<br>指定当画布对象被选中时的前景色</p><p>state<br>设置 Canvas 的状态：”normal” 或 “disabled”，默认值是 “normal”，注意，该值不会影响画布对象的状态</p><p>takefocus<br>指定使用 Tab 键可以将焦点移动到输入框中，默认为开启，将该选项设置为 False 避免焦点在此输入框中</p><p>width<br>指定 Canvas 的宽度，单位为像素</p><p>xscrollcommand与 scrollbar（滚动条）控件<br>相关联（沿着 x 轴水平方向）</p><p>xscrollincrement</p><ol><li>该选项指定 Canvas 水平滚动的“步长”</li><li>例如 ‘3c’ 表示 3 厘米，还可以选择的单位有 ‘i’（英寸），’m’（毫米）和 ‘p’（DPI，大约是 ‘1i’ 等于 ‘72p’）</li><li>默认为 0，表示可以水平滚动到任意位置</li></ol><p>yscrollcommand与 scrollbar 控件（滚动条）<br>相关联（沿着 y 轴垂直方向）</p><p>yscrollincrement</p><ol><li>该选项指定 Canvas 垂直滚动的“步长”</li><li>例如 ‘3c’ 表示 3 厘米，还可以选择的单位有 ‘i’（英寸），’m’（毫米）和 ‘p’（DPI，大约是 ‘1i’ 等于 ‘72p’）</li><li>默认值是 0，表示可以垂直方向滚动到任意位置</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import tkinter as tk</span><br><span class="line">window = tk.Tk()</span><br><span class="line">window.geometry(&#x27;400x200&#x27;)</span><br><span class="line"># 创库不允许改变</span><br><span class="line">window.resizable(0,0)</span><br><span class="line"># 创建画布</span><br><span class="line">canvas = tk.Canvas(window,</span><br><span class="line">                   bg=&#x27;#CDC9A5&#x27;,</span><br><span class="line">                   height=200,</span><br><span class="line">                   width=300)</span><br><span class="line">canvas.pack()</span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><p>常用方法：</p><p>create_line(x0, y0, x1, y1, … , xn, yn, options)</p><ol><li><p>根据给定的坐标创建一条或者多条线段；</p></li><li><p>参数 x0,y0,x1,y1,…,xn,yn 定义线条的坐标；</p></li><li><p>参数 options 表示其他可选参数</p></li></ol><p>create_oval(x0, y0, x1, y1, options)</p><ol><li><p>绘制一个圆形或椭圆形；</p></li><li><p>参数 x0 与 y0 定义绘图区域的左上角坐标；参数 x1 与 y1 定义绘图区域的右下角坐标；</p></li><li><p>参数 options 表示其他可选参数</p></li></ol><p>create_polygon(x0, y0, x1, y1, … , xn, yn, options)</p><ol><li><p>绘制一个至少三个点的多边形；</p></li><li><p>参数 x0、y0、x1、y1、…、xn、yn 定义多边形的坐标；</p></li><li><p>参数 options 表示其他可选参数</p></li></ol><p>create_rectangle(x0, y0, x1, y1, options)</p><ol><li><p>绘制一个矩形；</p></li><li><p>参数 x0 与 y0 定义矩形的左上角坐标；参数 x 与 y1 定义矩形的右下角坐标；</p></li><li><p>参数 options 表示其他可选参数</p></li></ol><p>create_text(x0, y0, text, options)</p><ol><li><p>绘制一个文字字符串</p></li><li><p>参数 x0 与 y0 定义文字字符串的左上角坐标，参数 text 定义文字字符串的文字；</p></li><li><p>参数 options 表示其他可选参数</p></li></ol><p> create_image(x, y, image)</p><ol><li><p>创建一个图片;</p></li><li><p>参数 x 与 y 定义图片的左上角坐标；</p></li><li><p>参数 image 定义图片的来源，必须是 tkinter 模块的 BitmapImage 类或 PhotoImage 类的实例变量。</p></li></ol><p>create_bitmap(x, y, bitmap)</p><ol><li><p>创建一个位图；</p></li><li><p>参数 x 与 y 定义位图的左上角坐标；</p></li><li><p>参数 bitmap 定义位图的来源，参数值可以是<br> gray12、gray25、gray50、gray75、hourglass、error、questhead、info、warning 或 question，或者也可以直接使用 XBM（X Bitmap）类型的文件，此时需要在 XBM 文件名称前添加一个 @ 符号</p></li></ol><p>例如 bitmap&#x3D;@hello.xbmcreate_arc(coord, start, extent, fill)</p><ol><li>绘制一个弧形；</li><li>参数 coord 定义画弧形区块的左上角与右下角坐标；</li><li>参数 start 定义画弧形区块的起始角度（逆时针方向）；</li><li>参数 extent 定义画弧形区块的结束角度（逆时针方向）；</li><li>参数 fill 定义填充弧形区块的颜色。</li></ol><p>注意：上述方法都会返回一个画布对象的唯一 ID。关于 options 参数，下面会通过一个示例对经常使用的参数做相关介绍</p><p>从上述不难看出，Canvas 控件采用了坐标系的方式来确定画布中的每一点。</p><p>一般情况下，默认主窗口的左上角为坐标原点，这种坐标系被称作为“窗口坐标系”，但也会存在另外一种情况，即画布的大小可能大于主窗口，当发生这种情况的时，可以采用带滚动条的 Canvas 控件，此时会以画布的左上角为坐标原点，我们将这种坐标系称为“画布坐标系”。</p><ol><li>绘制直线<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">from tkinter import *</span><br><span class="line">root = Tk()</span><br><span class="line">root.config(bg=&#x27;#87CEEB&#x27;)</span><br><span class="line">root.geometry(&#x27;450x350&#x27;)</span><br><span class="line">cv=Canvas(root,bg=&quot;white&quot;,width =300, height = 250)</span><br><span class="line">cv.pack()</span><br><span class="line"># 设置坐标点,此处可以元组的形式来设置坐标点</span><br><span class="line">point=[(10,20),(20,30),(30,40),(40,100),(80,120),(150,90)]</span><br><span class="line"># 创建画布，添加线条</span><br><span class="line"># fill 参数指定填充的颜色，如果为空字符串，则表示透明</span><br><span class="line"># dash 参数表示用来绘制虚线轮廓，元组参数，分别代表虚线中线段的长度和线段之间的间隔</span><br><span class="line"># arrow 设线段的箭头样式，默认不带箭头，参数值 first 表示添加箭头带线段开始位置，last表示到末尾占位置，both表示两端均添加</span><br><span class="line"># smooth 布尔值参数，表示是否以曲线的样式划线，默认为 False</span><br><span class="line"># width 控制线宽</span><br><span class="line">line1=cv.create_line(point,fill=&quot;purple&quot;,dash=(1,1),arrow=LAST,width=5)</span><br><span class="line"># print(&#x27;线段line1的画布id号:&#x27;,line1)</span><br><span class="line"># line2=cv.create_line(point,fill=&quot;red&quot;,arrow=BOTH,smooth=TRUE,width=5)</span><br><span class="line"># print(&#x27;线段line2的画布id号:&#x27;,line2)</span><br><span class="line"># 移动其中一条线段，只需要更改其坐标就可以,使用 coords()方法移动曲线</span><br><span class="line"># cv.coords(line2,50,30,25,35,35,40,50,120,60,170,10,180)</span><br><span class="line"># 显示窗口</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure></li></ol><p>上述示例中涉及了一部分参数，比如 fill、dash、arrow 等，<br>对 create_line() 函数的相关参数做了简单介绍：</p><p>activedash<br>当画布对象状态为 “active” 的时候，绘制虚线</p><p>activefill<br>当画布对象状态为 “active” 的时候，填充颜色</p><p>activestipple<br>当画布对象状态为 “active” 的时候，指定填充的位图</p><p>activewidth<br>当画布对象状态为 “active” 的时候，指定边框的宽度</p><p>arrow</p><ol><li>默认线段是不带箭头的，通过设置该选项添加箭头到线段中</li><li>“first” 表示添加箭头到线段开始的位置</li><li>“last” 表示添加箭头到线段结束的位置</li><li>“both” 表示两端均添加箭头</li></ol><p>arrowshape<br>用一个三元组来指定箭头的形状，默认值是 (8, 10, 3)，元组中的数值分别代表箭头中三条边的长度</p><p>capstyle</p><ol><li>指定线段两端的样式，默认值是 “butt”</li><li>该选项的值可以是：<br>“butt”（线段的两段平切于起点和终点）<br>“projecting”（线段的两段在起点和终点的位置将 width 选项设置的长度分别延长一半）<br>“round”（线段的两段在起点和终点的位置将 width设置的长度分别延长一半，并以圆角进行绘制）</li></ol><p>dash<br>绘制虚线，该选项值是一个整数元组，元组中的元素分别代表短线的长度和间隔，比如 (3, 5) 代表 3 个像素的短线和 5 个像素的间隔</p><p>dashoffset<br>指定虚线开始的偏移位置，比如 dash&#x3D;(5, 1, 2, 1)，dashoffset&#x3D;3，则从 2 开始画虚线</p><p>disableddash<br>当画布对象状态为 “disabled” 的时候，绘制虚线</p><p>disabledfill<br>画布对象状态为 “disabled” 的时候，填充颜色</p><p>disabledstipple<br>当画布对象状态为 “disabled” 的时候，指定填充的位图</p><p>disabledwidth<br>当画布对象状态为 “disabled” 的时候，指定边框的宽度</p><p>fill<br>指定填充的颜色，空字符串表示透明</p><p>joinstyle</p><ol><li><p>指定当绘制两个相邻线段之间时接口的样式，默认为 “round”</p></li><li><p>该选项的值可以是：<br>“round”（以连接点为圆心，1&#x2F;2 width 选项设置的长度为半径来绘制圆角）<br>“bevel”（在连接点处将两线段的夹角做平切操作）<br>“miter”（沿着两线段的夹角延伸至一个点）</p></li></ol><p>offset<br>指定当点画模式时填充位图的偏移</p><p>smooth<br>默认值为 False，若设置为 True，表示将以曲线的样式代替所绘线段</p><p>splinesteps<br>当绘制曲线的时，该选项指定由多少条折线来构成曲线，默认值是 12，这里需要注意，只有当 smooth 选项为 True 时该选项才会生效。</p><p>state<br>指定该画布对象的状态，默认值为 “normal”，参数值有 “normal”，”disabled”（不可用）和 “hidden”（隐藏）三种状态。</p><p>stipple<br>指定一个位图进行填充，默认值为空字符串，表示实心</p><p>tags<br>为创建的画布对象添加标签width指定边框的宽度</p><p>对于扇形、矩形、三角形、圆形等，这些封闭式图形，它们由轮廓线和填充颜色两部分组成。在绘制这些图形时相关函数的可选参数与上述也存在略微差异</p><p>下面以绘制扇形的 create_arc() 函数为例做简单的介绍：</p><p>activedash<br>当画布对象状态为 “active” 的时候，绘制虚线</p><p>activefill<br>当画布对象状态为 “active” 的时候，填充颜色</p><p>activeoutline<br>当画布对象状态为 “active” 的时候，绘制轮廓线</p><p>activeoutlinestipple<br>当画布对象状态为 “active” 的时候，指定填充轮廓的位图</p><p>activestipple<br>当画布对象状态为 “active” 的时候，指定填充的位图</p><p>activewidth<br>当画布对象状态为 “active” 的时候，指定边框的宽度</p><p>dash<br>指定绘制虚线轮廓，与绘制线段的含义相同</p><p>dashoffset<br>指定虚线轮廓开始的偏移位置</p><p>disableddash<br>当画布对象状态为 “disabled” 的时候，绘制虚线</p><p>disabledfill<br>当画布对象状态为 “disabled” 的时候，填充颜色</p><p>disabledoutline<br>当画布对象状态为 “disabled” 的时候，绘制轮廓线</p><p>disabledoutlinestipple<br>当画布对象状态为 “disabled” 的时候，指定填充轮廓的位图</p><p>disabledstipple<br>当画布对象状态为 “disabled” 的时候，指定填充的位图</p><p>disabledwidth<br>当画布对象状态为 “disabled” 的时候，指定边框的宽度</p><p>extent<br>指定跨度（从 start 选项指定的位置开始到结束位置的角度）默认值是 90.0</p><p>fill<br>与上述表格的含义相同，表示指定的填充颜色，若为空字符串则为透明色</p><p>offset<br>指定当点画模式时填充位置的偏移，参数值为 “x,y”坐标偏移和位置偏移两种方式，比如 “ne”&#x2F;“e” 等outline指定轮廓的颜色</p><p>outlineoffset<br>指定当点画模式绘制轮廓时位图的偏移</p><p>outlinestipple<br>当 outline 选项被设置时，该选项用于指定一个位图来填充边框，默认值是空字符串，表示黑色</p><p>start<br>指定起始位置的偏移角度</p><p>style<br>默认创建的是扇形，指定该方法创建的是扇形（”pieslice”）、弓形（”chord”）还是弧形（”arc”）</p><p>tags<br>为创建的画布对象添加标签width指定边框的宽度</p><p>在实际的使用的过程中经常用到的参数有 dash、fill、outline、extend 和 start，但是这么多的参数我们也不可能都记住，这时查手册是一种很好的方法，官网文档地址：<a href="https://docs.python.org/3.7/library/tkinter.html">点击前往</a>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">from tkinter import *</span><br><span class="line">root = Tk()</span><br><span class="line">root.config(bg=&#x27;#8DB6CD&#x27;)</span><br><span class="line">root.geometry(&#x27;500x400&#x27;)</span><br><span class="line"># 将画布设置为白色</span><br><span class="line">canvas = Canvas(root,width = 400,height = 400,bg=&#x27;white&#x27;)</span><br><span class="line"># 设置基准坐标</span><br><span class="line">x0,y0,x1,y1 = 10,10,80,80</span><br><span class="line"># 绘制扇形,起始角度为 0 度，结束角度为 270, 扇形区域填充色为淡蓝色，轮廓线为蓝色，线宽为 2px</span><br><span class="line">arc = canvas.create_arc(x0, y0, x1, y1,start = 0, extent = 270, fill = &#x27;#B0E0E6&#x27;,outline =&#x27;blue&#x27;,width = 2)</span><br><span class="line"># 绘制圆形</span><br><span class="line">oval = canvas.create_oval(x0+150, y0, x1+150, y1,fill =&#x27;#CD950C&#x27;,outline = &#x27;blue&#x27;,width=2)</span><br><span class="line"># 绘制矩形,并将轮廓线设置为透明色，即不显示最外围的轮廓线，默认为黑色</span><br><span class="line">rect = canvas.create_rectangle(x0,y0+100,x1,y1+100,fill=&#x27;red&#x27;,outline = &#x27;&#x27;)</span><br><span class="line"># 绘制一个三角形，填充色为绿色</span><br><span class="line">trigon = canvas.create_polygon(80,80,150,80,200,200, outline=&quot;&quot;, fill=&quot;green&quot;,)</span><br><span class="line"># 绘制一个多边形，首先定义一系列的多边形上的坐标点</span><br><span class="line">poly_points=[(0,280),(140,200),(140,240),(270,240),(270,320),(140,320),(140,360)]</span><br><span class="line">polygon = canvas.create_polygon(poly_points,fill=&quot;#BF3EFF&quot;)</span><br><span class="line">canvas.pack()</span><br><span class="line"># 显示窗口</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><p>注意：create_rectangle() 方法的前两个参数决定了矩形的左上角坐标，后两个参数决定了矩形的右下角坐标；另外 create_oval() 方法并不是只能绘制圆形，还能绘制椭圆形，这取决于传入的参数。</p><p>Tkinter 展示图片、创建位图以及文本信息等</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import tkinter as tk</span><br><span class="line">root= tk.Tk()</span><br><span class="line">w=root.winfo_screenwidth()</span><br><span class="line">h=root.winfo_screenheight()</span><br><span class="line">root.geometry(&quot;300x300+500+200&quot;)</span><br><span class="line">cv= tk.Canvas(root,bg=&quot;#AAAAFF&quot;)</span><br><span class="line">img= tk.PhotoImage(file=&quot;D:\\File\\All\\python\\blog\\img\\99.png&quot;)</span><br><span class="line">cv.create_image(10,10,image=img)</span><br><span class="line">cv.create_text(100,100,text=&#x27;漂亮鬼&#x27;,font =(&#x27;华文楷体&#x27;,15,&#x27;bold&#x27;))</span><br><span class="line">cv.pack()</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><p>注意，添加到 Canvas 上的对象会一直保留直着。如果你希望修改它们，您可以使用 coords() 和 move() 方法来移动画布上的对象，当然您可以使用 delete() 来删除它们：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import tkinter as tk</span><br><span class="line">root= tk.Tk()</span><br><span class="line">w=root.winfo_screenwidth()</span><br><span class="line">h=root.winfo_screenheight()</span><br><span class="line">root.geometry(&quot;300x300+500+200&quot;)</span><br><span class="line">cv= tk.Canvas(root,bg=&quot;#AAAAFF&quot;)</span><br><span class="line">img= tk.PhotoImage(file=&quot;D:\\File\\All\\python\\blog\\img\\99.png&quot;)</span><br><span class="line">cv.create_image(10,10,image=img)</span><br><span class="line">cv.create_text(100,100,text=&#x27;漂亮鬼&#x27;,font =(&#x27;华文楷体&#x27;,15,&#x27;bold&#x27;))</span><br><span class="line">def move_img():</span><br><span class="line">    # 定义移动坐标</span><br><span class="line">    cv.move(img,50,30)</span><br><span class="line">btn=tk.Button(cv,text=&quot;点击移动画布&quot;,bg=&quot;#8A8A8A&quot;,activebackground=&quot;#7CCD7C&quot;,command=move_img)</span><br><span class="line"># 在指定位置创建一个窗口控件，tags来添加标签</span><br><span class="line">cv.create_window(365,250,height=30,width=30,window=btn)</span><br><span class="line"># 调用delete() 删除画布对象,若传入ALL，则删除所有的画布对象</span><br><span class="line">#cv.delete(image1)</span><br><span class="line">cv.pack()</span><br><span class="line"># 显示窗口</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><p>这里可能没有效果，大家可以换一张比窗口小的图放上面移动就能看到明显效果了</p>]]></content>
      
      
      <categories>
          
          <category> python--tkinter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python提升五</title>
      <link href="/post/d98acf3f.html"/>
      <url>/post/d98acf3f.html</url>
      
        <content type="html"><![CDATA[<h5 id="Python-MetaClass元类详解"><a href="#Python-MetaClass元类详解" class="headerlink" title="Python MetaClass元类详解"></a>Python MetaClass元类详解</h5><p>MetaClass元类，本质也是一个类，但和普通类的用法不同，它可以对类内部的定义（包括类属性和类方法）进行动态的修改。可以这么说，<strong>使用元类的主要目的就是为了实现在创建类时，能够动态地改变类中定义的属性或者方法</strong>。</p><p>如果在创建类时，想用 MetaClass 元类动态地修改内部的属性或者方法，则类的创建过程将变得复杂：</p><p>先创建 MetaClass 元类，然后用元类去创建类，最后使用该类的实例化对象实现功能。<br>和前面创建的类不同，如果想把一个类设计成 MetaClass 元类，其必须符合以下条件：</p><p>必须显式继承自 type 类；<br>类中需要定义并实现 <strong>new</strong>() 方法，该方法一定要返回该类的一个实例对象，因为在使用元类创建类时，该 <strong>new</strong>() 方法会自动被执行，用来修改新建的类。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#定义一个元类</span><br><span class="line">class FirstMetaClass(type):</span><br><span class="line">    def __new__(cls, name, bases, attrs):</span><br><span class="line">        # 动态为该类添加一个name属性</span><br><span class="line">        attrs[&#x27;name&#x27;] = &quot;xiiaoyang&quot;</span><br><span class="line">        attrs[&#x27;say&#x27;] = lambda self: print(&quot;调用 say() 实例方法&quot;)</span><br><span class="line">        return super().__new__(cls,name,bases,attrs)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>，首先可以断定 FirstMetaClass 是一个类。其次，由于该类继承自 type 类，并且内部实现了 <strong>new</strong>() 方法，因此可以断定 FirstMetaCLass 是一个元类。</p><p>可以看到，在这个元类的 <strong>new</strong>() 方法中，手动添加了一个 name 属性和 say() 方法。这意味着，通过 FirstMetaClass 元类创建的类，会额外添加 name 属性和 say() 方法。通过如下代码，可以验证这个结论：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#定义类时，指定元类class CLanguage(object,metaclass=FirstMetaClass):</span><br><span class="line">    pass</span><br><span class="line">clangs = CLanguage()</span><br><span class="line">print(clangs.name)</span><br><span class="line">clangs.say()</span><br></pre></td></tr></table></figure><p>可以看到，在创建类时，通过在<strong>标注父类的同时指定元类</strong>（格式为metaclass&#x3D;元类名），则当 Python 解释器在创建这该类时，FirstMetaClass 元类中的 <strong>new</strong> 方法就会被调用，从而实现动态修改类属性或者类方法的目的。</p><p>显然，FirstMetaClass 元类的 <strong>new</strong>() 方法动态地为 Clanguage 类添加了 name 属性和 say() 方法，因此，即便该类在定义时是空类，它也依然有 name 属性和 say() 方法。</p><p><strong>使用的比较少</strong></p><h5 id="Python多态及用法详解"><a href="#Python多态及用法详解" class="headerlink" title="Python多态及用法详解"></a>Python多态及用法详解</h5><p>Python 是弱类型语言，其最明显的特征是在使用变量时，无需为其指定具体的数据类型。这会导致一种情况，即同一变量可能会被先后赋值不同的类对象，</p><p>类的多态特性，还要满足以下 2 个前提条件：</p><p>继承：多态一定是发生在子类和父类之间；<br>重写：子类重写了父类的方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class CLanguage:</span><br><span class="line">    def say(self):</span><br><span class="line">        print(&quot;调用的是 Clanguage 类的say方法&quot;)</span><br><span class="line">class CPython(CLanguage):</span><br><span class="line">    def say(self):</span><br><span class="line">        print(&quot;调用的是 CPython 类的say方法&quot;)</span><br><span class="line">class CLinux(CLanguage):</span><br><span class="line">    def say(self):</span><br><span class="line">        print(&quot;调用的是 CLinux 类的say方法&quot;)</span><br><span class="line">a = CLanguage()</span><br><span class="line">a.say()</span><br><span class="line">a = CPython()</span><br><span class="line">a.say()</span><br><span class="line">a = CLinux()</span><br><span class="line">a.say()</span><br></pre></td></tr></table></figure><p>其实，Python 在多态的基础上，衍生出了一种更灵活的编程机制。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class WhoSay:</span><br><span class="line">    def say(self,who):</span><br><span class="line">        who.say()</span><br><span class="line">class CLanguage:</span><br><span class="line">    def say(self):</span><br><span class="line">        print(&quot;调用的是 Clanguage 类的say方法&quot;)</span><br><span class="line">class CPython(CLanguage):</span><br><span class="line">    def say(self):</span><br><span class="line">        print(&quot;调用的是 CPython 类的say方法&quot;)</span><br><span class="line">class CLinux(CLanguage):</span><br><span class="line">    def say(self):</span><br><span class="line">        print(&quot;调用的是 CLinux 类的say方法&quot;)</span><br><span class="line">a = WhoSay()</span><br><span class="line">#调用 CLanguage 类的 say() 方法</span><br><span class="line">a.say(CLanguage())</span><br><span class="line">#调用 CPython 类的 say() 方法</span><br><span class="line">a.say(CPython())</span><br><span class="line">#调用 CLinux 类的 say() 方法</span><br><span class="line">a.say(CLinux())</span><br></pre></td></tr></table></figure><p>此程序中，通过给 WhoSay 类中的 say() 函数添加一个 who 参数，其内部利用传入的 who 调用 say() 方法。<br>这意味着，当调用 WhoSay 类中的 say() 方法时，我们传给 who 参数的是哪个类的实例对象，它就会调用那个类中的 say() 方法。</p><h5 id="Python枚举类定义和使用"><a href="#Python枚举类定义和使用" class="headerlink" title="Python枚举类定义和使用"></a>Python枚举类定义和使用</h5><p>一些具有特殊含义的类，其实例化对象的个数往往是固定的，<br>比如用一个类表示月份，则该类的实例对象最多有 12 个；再比如用一个类表示季节，则该类的实例化对象最多有 4 个。<br>针对这种特殊的类，Python中有Enum 枚举类。</p><p>也就是说，对于这些实例化对象个数固定的类，可以用枚举类来定义。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from enum import Enum</span><br><span class="line">class Color(Enum):</span><br><span class="line">    # 为序列值指定value值</span><br><span class="line">    red = 1</span><br><span class="line">    green = 2</span><br><span class="line">    blue = 3</span><br></pre></td></tr></table></figure><p>如果想将一个类定义为枚举类，只需要令其继承自 enum 模块中的 Enum 类即可。<br>如在上面程序中，Color 类继承自 Enum 类，则证明这是一个枚举类。</p><p>在 Color 枚举类中，red、green、blue 都是该类的成员（可以理解为是类变量）。</p><p>注意，枚举类的每个成员都由 2 部分组成，分别为 name 和 value，其中 name 属性值为该枚举值的变量名（如 red），value 代表该枚举值的序号（序号通常从 1 开始）。</p><p>和普通类的用法不同，<strong>枚举类不能用来实例化对象</strong>，但这并不妨碍我们访问枚举类中的成员。访问枚举类成员的方式有多种</p><p>如，以 Color 枚举类为例，在其基础上添加如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#调用枚举成员的 3 种方式</span><br><span class="line">print(Color.red)</span><br><span class="line">print(Color[&#x27;red&#x27;])</span><br><span class="line">print(Color(1))</span><br><span class="line">#调取枚举成员中的 value 和 name</span><br><span class="line">print(Color.red.value)</span><br><span class="line">print(Color.red.name)</span><br><span class="line">#遍历枚举类中所有成员的 2 种方式</span><br><span class="line">for color in Color:</span><br><span class="line">    print(color)</span><br></pre></td></tr></table></figure><p><strong>枚举类成员之间不能比较大小，但可以用 &#x3D;&#x3D; 或者 is 进行比较是否相等</strong></p><p>print(Color.red &#x3D;&#x3D; Color.green)<br>print(Color.red.name is Color.green.name)</p><p>需要注意的是，<strong>枚举类中各个成员的值，不能在类的外部做任何修改</strong><br>下面语法的做法是错误的：<br>Color.red &#x3D; 4</p><p>除此之外，该枚举类还提供了一个 <strong>members</strong> 属性，该属性是一个包含枚举类中所有成员的字典，通过遍历该属性，也可以访问枚举类中的各个成员</p><p>for name,member in Color.<strong>members</strong>.items():<br>    print(name,”-&gt;”,member)</p><p>注意：<strong>Python 枚举类中各个成员必须保证 name 互不相同，但 value 可以相同</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from enum import Enum</span><br><span class="line">class Color(Enum):</span><br><span class="line">    red = 1</span><br><span class="line">    green = 1</span><br><span class="line">    blue = 3</span><br><span class="line">print(Color[&#x27;green&#x27;])</span><br></pre></td></tr></table></figure><p>Color 枚举类中 red 和 green 具有相同的值（都是 1），Python 允许这种情况的发生，它会将 green 当做是 red 的别名，因此当访问 green 成员时，最终输出的是 red。</p><p>在实际编程过程中，如果想避免发生这种情况，可以借助 @unique 装饰器，这样当枚举类中出现相同值的成员时，程序会报 ValueError 错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from enum import Enum,unique</span><br><span class="line">#添加 unique 装饰器</span><br><span class="line">@unique</span><br><span class="line">class Color(Enum):</span><br><span class="line">    red = 1</span><br><span class="line">    green = 1</span><br><span class="line">    blue = 3</span><br><span class="line">print(Color[&#x27;green&#x27;])</span><br></pre></td></tr></table></figure><p>除了通过继承 Enum 类的方法创建枚举类，还可以使用 Enum() 函数创建枚举类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from enum import Enum</span><br><span class="line">#创建一个枚举类</span><br><span class="line">Color = Enum(&quot;Color&quot;,(&#x27;red&#x27;,&#x27;green&#x27;,&#x27;blue&#x27;))</span><br></pre></td></tr></table></figure><p>Enum() 函数可接受 2 个参数，第一个用于指定枚举类的类名，第二个参数用于指定枚举类中的多个成员。</p><p>其实枚举一般使用的也比较少，只有在一些特殊的场合才会使用，而且它还可以使用其他的方法将就替换</p><h5 id="Python-new-方法详解"><a href="#Python-new-方法详解" class="headerlink" title="Python new()方法详解"></a>Python <strong>new</strong>()方法详解</h5><p><strong>new</strong>() 是一种负责创建<strong>类实例的静态方法</strong>，它无需使用 staticmethod 装饰器修饰，且该方法会优先 <strong>init</strong>() 初始化方法被调用。</p><p>一般情况下，覆写 <strong>new</strong>() 的实现将会使用合适的参数调用其超类的 super().<strong>new</strong>()，并在返回之前修改实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class demoClass:</span><br><span class="line">    instances_created = 0</span><br><span class="line">    def __new__(cls,*args,**kwargs):</span><br><span class="line">        print(&quot;__new__():&quot;,cls,args,kwargs)</span><br><span class="line">        instance = super().__new__(cls)</span><br><span class="line">        instance.number = cls.instances_created</span><br><span class="line">        cls.instances_created += 1</span><br><span class="line">        return instance</span><br><span class="line">    def __init__(self,attribute):</span><br><span class="line">        print(&quot;__init__():&quot;,self,attribute)</span><br><span class="line">        self.attribute = attribute</span><br><span class="line">test1 = demoClass(&quot;abc&quot;)</span><br><span class="line">test2 = demoClass(&quot;xyz&quot;)</span><br><span class="line">print(test1.number,test1.instances_created)</span><br><span class="line">print(test2.number,test2.instances_created)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>new</strong>() 通常会返回该类的一个实例，但有时也可能会返回其他类的实例，如果发生了这种情况，则会跳过对 <strong>init</strong>() 方法的调用。而在某些情况下（比如需要修改不可变类实例（Python 的某些内置类型）的创建行为），利用这一点会事半功倍。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class nonZero(int):</span><br><span class="line">    def __new__(cls,value):</span><br><span class="line">        return super().__new__(cls,value) if value != 0 else None</span><br><span class="line">    def __init__(self,skipped_value):</span><br><span class="line">        #此例中会跳过此方法</span><br><span class="line">        print(&quot;__init__()&quot;)</span><br><span class="line">        super().__init__()</span><br><span class="line">print(type(nonZero(-12)))</span><br><span class="line">print(type(nonZero(0)))</span><br></pre></td></tr></table></figure><p><strong>什么情况下使用 <strong>new</strong>() 呢？答案很简单，在 <strong>init</strong>() 不够用的时候。</strong></p><p>前面例子中对 Python 不可变的内置类型（如 int、str、float 等）进行了子类化，这是因为一旦创建了这样不可变的对象实例，就无法在 <strong>init</strong>() 方法中对其进行修改。</p><p>注意，由于 <strong>new</strong>() 不限于返回同一个类的实例，所以很容易被滥用，不负责任地使用这种方法可能会对代码有害，所以要谨慎使用。<br>Python中大量使用 <strong>new</strong>() 方法且合理的，就是 MetaClass 元类。</p><h5 id="Python-repr-方法：显示属性"><a href="#Python-repr-方法：显示属性" class="headerlink" title="Python repr()方法：显示属性"></a>Python <strong>repr</strong>()方法：显示属性</h5><p>我们经常会直接输出类的实例化对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class CLanguage:</span><br><span class="line">    pass</span><br><span class="line">clangs = CLanguage()</span><br><span class="line">print(clangs)</span><br></pre></td></tr></table></figure><p>通常情况下，直接输出某个实例化对象，本意往往是想了解该对象的基本信息，例如该对象有哪些属性，它们的值各是多少等等。但默认情况下，我们得到的信息只会是“类名+object at+内存地址”，对我们了解该实例化对象帮助不大。</p><p>事实上，当我们输出某个实例化对象时，其调用的就是该对象的 <strong>repr</strong>() 方法，输出的是该方法的返回值。</p><p>执行 print(clangs) 等同于执行 print(clangs.<strong>repr</strong>())，程序的输出结果是一样的（输出的内存地址可能不同）。</p><p>和 <strong>init</strong>(self) 的性质一样，Python 中的<strong>每个类都包含 <strong>repr</strong>() 方法</strong>，因为 object 类包含 <strong>reper</strong>() 方法，而 Python 中所有的类都直接或间接继承自 object 类。</p><p>默认情况下，<strong>repr</strong>() 会返回和调用者有关的 “类名+object at+内存地址”信息。<br>当然，我们还可以通过在类中重写这个方法，从而实现当输出实例化对象时，输出我们想要的信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class CLanguage:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.name = &quot;漂亮鬼&quot;</span><br><span class="line">        self.add = &quot;https://xiaoyangzst.vercel.app/&quot;</span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &quot;CLanguage[name=&quot;+ self.name +&quot;,add=&quot; + self.add +&quot;]&quot;</span><br><span class="line">clangs = CLanguage()</span><br><span class="line">print(clangs)</span><br></pre></td></tr></table></figure><p><strong>repr</strong>() 方法是类的实例化对象用来做“<strong>自我介绍</strong>”的方法，默认情况下，它会返回当前对象的“类名+object at+内存地址”，而如果对该方法进行重写，可以为其制作自定义的自我描述信息。</p>]]></content>
      
      
      <categories>
          
          <category> python提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python提升四</title>
      <link href="/post/c468ad7a.html"/>
      <url>/post/c468ad7a.html</url>
      
        <content type="html"><![CDATA[<h5 id="Python继承机制及其使用"><a href="#Python继承机制及其使用" class="headerlink" title="Python继承机制及其使用"></a>Python继承机制及其使用</h5><p>继承机制经常用于创建和现有类功能类似的新类，又或是新类只需要在现有类基础上添加一些成员（属性和方法），但又不想直接将现有类代码复制给新类。也就是说，通过使用继承这种机制，可以轻松实现类的重复使用。</p><p>举个例子，假设现有一个 Shape 类，该类的 draw() 方法可以在屏幕上画出指定的形状，现在需要创建一个 Form 类，要求此类不但可以在屏幕上画出指定的形状，还可以计算出所画形状的面积。要创建这样的类，笨方法是将 draw() 方法直接复制到新类中，并添加计算面积的方法。</p><p>就是使用类的继承机制。实现方法为：让 From 类继承 Shape 类，这样当 From 类对象调用 draw() 方法时，Python 解释器会先去 From 中找以 draw 为名的方法，如果找不到，它还会自动去 Shape 类中找。如此，我们只需在 From 类中添加计算面积的方法即可，示例代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Shape:</span><br><span class="line">    def draw(self,content):</span><br><span class="line">        print(&quot;画&quot;,content)</span><br><span class="line">class Form(Shape):</span><br><span class="line">    def area(self):</span><br><span class="line">        #....</span><br><span class="line">        print(&quot;此图形的面积为...&quot;)</span><br><span class="line">shap= Form()</span><br><span class="line">shap.draw(&quot;circle&quot;)</span><br></pre></td></tr></table></figure><p>上面代码中，class From(Shape) 就表示 From 继承 Shape。<br>Python 中，实现继承的类称为子类，被继承的类称为父类（也可称为基类、超类）。因此在上面这个样例中，From 是子类，Shape 是父类。<br>子类继承父类时，只需在定义子类时，将父类（可以是多个）放在子类之后的圆括号里即可<br>语法格式：</p><p>class 类名(父类1, 父类2, …)：</p><p>类定义部分注意，如果该类没有显式指定继承自哪个类，则默认继承 object 类（object 类是 Python 中所有类的父类，即要么是直接父类，要么是间接父类）。另外，Python 的继承是多继承机制（和 C++ 一样），即<br><strong>一个子类可以同时拥有多个直接父类</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class People:</span><br><span class="line">    def say(self):</span><br><span class="line">        print(&quot;我是一个人，名字是：&quot;,self.name)</span><br><span class="line">class Animal:</span><br><span class="line">    def display(self):</span><br><span class="line">        print(&quot;人也是高级动物&quot;)</span><br><span class="line">class Person(People, Animal):</span><br><span class="line">    pass</span><br><span class="line">zhangsan = Person()</span><br><span class="line">zhangsan.name = &quot;张三&quot;</span><br><span class="line">zhangsan.say()</span><br><span class="line">zhangsan.display()</span><br></pre></td></tr></table></figure><p>没错，<strong>子类拥有父类所有的属性和方法</strong>，即便该属性或方法是私有（private）的(与c++的区别)</p><p><strong>关于Python的多继承</strong></p><p>使用多继承经常需要面临的问题是，多个父类中包含同名的类方法。对于这种情况，Python 的处置措施是：<br>根据子类继承多个父类时这些父类的<strong>前后次序</strong>决定，即排在前面父类中的类方法会覆盖排在后面父类中的同名类方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class People:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.name = People</span><br><span class="line">    def say(self):</span><br><span class="line">        print(&quot;People类&quot;,self.name)</span><br><span class="line">class Animal:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.name = Animal</span><br><span class="line">    def say(self):</span><br><span class="line">        print(&quot;Animal类&quot;,self.name)</span><br><span class="line">#People中的 name 属性和 say() 会遮蔽 Animal 类中的</span><br><span class="line">class Person(People, Animal):</span><br><span class="line">    pass</span><br><span class="line">zhangsan = Person()</span><br><span class="line">zhangsan.name = &quot;张三&quot;</span><br><span class="line">zhangsan.say()</span><br></pre></td></tr></table></figure><p><strong>一般不使用多继承 因为多继承容易使代码变得复杂化</strong></p><h5 id="Python父类方法重写"><a href="#Python父类方法重写" class="headerlink" title="Python父类方法重写"></a>Python父类方法重写</h5><p>子类继承了父类，那么子类就拥有了父类所有的类属性和类方法。通常情况下，子类会在此基础上，扩展一些新的类属性和类方法。<br>但凡事都有例外，我们可能会遇到这样一种情况，即子类从父类继承得来的类方法中，大部分是适合子类使用的，但有个别的类方法，并不能直接照搬父类的，如果不对这部分类方法进行修改，子类对象无法使用。针对这种情况，<strong>我们就需要在子类中重复父类的方法。</strong></p><p>举个例子，鸟通常是有翅膀的，也会飞，因此我们可以像如下这样定义个和鸟相关的类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Bird:</span><br><span class="line">    def isWing(self):</span><br><span class="line">        print(&quot;鸟有翅膀&quot;)</span><br><span class="line">    def fly(self):</span><br><span class="line">        print(&quot;鸟会飞&quot;)</span><br></pre></td></tr></table></figure><p>但是，对于鸵鸟来说，它虽然也属于鸟类，也有翅膀，但是它只会奔跑，并不会飞。针对这种情况，可以这样定义鸵鸟类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Ostrich(Bird):</span><br><span class="line">    #重写Bird类的fly()方法</span><br><span class="line">    def fly(self):</span><br><span class="line">        print(&quot;鸵鸟不会飞&quot;)</span><br></pre></td></tr></table></figure><p>可以看到，因为 Ostrich 继承自 Bird，因此 Ostrich 类拥有 Bird 类的 isWing() 和 fly() 方法。其中，isWing() 方法同样适合 Ostrich，但 fly() 明显不适合，因此我们在 Ostrich 类中对 fly() 方法进行重写。<br>重写，有时又称覆盖，是一个意思，指的是对类中已有方法的内部实现进行修改。</p><p><strong>如何调用被重写的方法</strong><br><strong>事实上，如果我们在子类中重写了从父类继承来的类方法，那么当在类的外部通过子类对象调用该方法时，Python 总是会执行子类中重写的方法。</strong></p><p>如果想调用父类中被重写的这个方法<br>很简单，前面讲过，Python 中的类可以看做是一个独立空间，而类方法其实就是出于该空间中的一个函数。而如果想要全局空间中，调用类空间中的函数，只需要在调用该函数是备注类名即可。举个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Bird:</span><br><span class="line">    def isWing(self):</span><br><span class="line">        print(&quot;鸟有翅膀&quot;)</span><br><span class="line">    def fly(self):</span><br><span class="line">        print(&quot;鸟会飞&quot;)</span><br><span class="line">class Ostrich(Bird):</span><br><span class="line">    def fly(self):</span><br><span class="line">        print(&quot;鸵鸟不会飞&quot;)</span><br><span class="line">ostrich = Ostrich()</span><br><span class="line">Bird.fly(ostrich)</span><br></pre></td></tr></table></figure><p><strong>此程序中，需要大家注意的一点是，使用类名调用其类方法，Python 不会为该方法的第一个 self 参数自定绑定值，因此采用这种调用方法，需要手动为 self 参数赋值。</strong></p><h5 id="Python-super-函数：调用父类的构造方法"><a href="#Python-super-函数：调用父类的构造方法" class="headerlink" title="Python super()函数：调用父类的构造方法"></a>Python super()函数：调用父类的构造方法</h5><p><strong>Python 中子类会继承父类所有的类属性和类方法</strong>。严格来说，类的构造方法其实就是实例方法，因此毫无疑问，父类的构造方法，子类同样会继承。</p><p>Python 是一门支持多继承的面向对象编程语言，如果子类继承的多个父类中包含同名的类实例方法，则子类对象在调用该方法时，会优先选择排在最前面的父类中的实例方法<br>显然，构造方法也是如此。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class People:</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.name = name</span><br><span class="line">    def say(self):</span><br><span class="line">        print(&quot;我是人，名字为：&quot;,self.name)</span><br><span class="line">class Animal:</span><br><span class="line">    def __init__(self,food):</span><br><span class="line">        self.food = food</span><br><span class="line">    def display(self):</span><br><span class="line">        print(&quot;我是动物,我吃&quot;,self.food)</span><br><span class="line">#People中的 name 属性和 say() 会遮蔽 Animal 类中的</span><br><span class="line">class Person(People, Animal):</span><br><span class="line">    pass</span><br><span class="line">per = Person(&quot;zhangsan&quot;)</span><br><span class="line">per.say()</span><br><span class="line">#per.display()</span><br></pre></td></tr></table></figure><p>Person 类同时继承 People 和 Animal，其中 People 在前。这意味着，在创建 per 对象时，其将会调用从 People 继承来的构造函数。因此我们看到，上面程序在创建 per 对象的同时，还要给 name 属性进行赋值。</p><p>但如果去掉最后一行的注释，运行此行代码，Python 解释器会报错</p><p><strong>这是因为，从 Animal 类中继承的 display() 方法中，需要用到 food 属性的值，但由于 People 类的构造方法“遮蔽”了Animal 类的构造方法，使得在创建 per 对象时，Animal 类的构造方法未得到执行，所以程序出错。</strong></p><p>针对这种情况，正确的做法是定义 Person 类自己的构造方法（等同于重写第一个直接父类的构造方法）。但需要注意，如果在子类中定义构造方法，则必须在该方法中调用父类的构造方法。</p><p>在子类中的构造方法中，调用父类构造方法的方式有 2 种，分别是：<br>1.<br>类可以看做一个独立空间，在类的外部调用其中的实例方法，可以向调用普通函数那样，只不过需要额外备注类名（此方式又称为未绑定方法）；<br>2.<br>使用 super() 函数。但如果涉及多继承，该函数只能调用第一个直接父类的构造方法。</p><p>super() 语法格式</p><p><code>super().__init__(self,...)</code></p><p>修改上面的程序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class People:</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.name = name</span><br><span class="line">    def say(self):</span><br><span class="line">        print(&quot;我是人，名字为：&quot;,self.name)</span><br><span class="line">class Animal:</span><br><span class="line">    def __init__(self,food):</span><br><span class="line">        self.food = food</span><br><span class="line">    def display(self):</span><br><span class="line">        print(&quot;我是动物,我吃&quot;,self.food)</span><br><span class="line">class Person(People, Animal):</span><br><span class="line">    #自定义构造方法</span><br><span class="line">    def __init__(self,name,food):</span><br><span class="line">        #调用 People 类的构造方法</span><br><span class="line">        super().__init__(name)</span><br><span class="line">        #super(Person,self).__init__(name) #执行效果和上一行相同</span><br><span class="line">        #People.__init__(self,name)#使用未绑定方法调用 People 类构造方法</span><br><span class="line">        #调用其它父类的构造方法，需手动给 self 传值</span><br><span class="line">        Animal.__init__(self,food)    </span><br><span class="line">per = Person(&quot;zhangsan&quot;,&quot;熟食&quot;)</span><br><span class="line">per.say()</span><br><span class="line">per.display()</span><br></pre></td></tr></table></figure><p>可以看到，Person 类自定义的构造方法中，调用 People 类构造方法，可以使用 super() 函数，也可以使用未绑定方法。但是调用 Animal 类的构造方法，只能使用未绑定方法。</p><h5 id="Python-slots-：限制类实例动态添加属性和方法"><a href="#Python-slots-：限制类实例动态添加属性和方法" class="headerlink" title="Python __slots__：限制类实例动态添加属性和方法"></a>Python __slots__：限制类实例动态添加属性和方法</h5><p>Python 也允许动态地为类或实例对象添加方法<br>我们知道，类方法又可细分为实例方法、静态方法和类方法，Python 语言允许为类动态地添加这 3 种方法；</p><p>但<strong>对于实例对象</strong>，则只允许动态地添加实例方法，不能添加类方法和静态方法。这个在前面已经提到过</p><p>为单个实例对象添加方法，不会影响该类的其它实例对象；而如果为类动态地添加方法，则所有的实例对象都可以使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class CLanguage:</span><br><span class="line">    pass</span><br><span class="line">def info(self):</span><br><span class="line">    print(&quot;正在调用实例方法&quot;)</span><br><span class="line">   </span><br><span class="line">@classmethod</span><br><span class="line">def info2(cls):</span><br><span class="line">    print(&quot;正在调用类方法&quot;)</span><br><span class="line">@staticmethod</span><br><span class="line">def info3():</span><br><span class="line">    print(&quot;正在调用静态方法&quot;)</span><br><span class="line">#类可以动态添加以上 3 种方法，会影响所有实例对象</span><br><span class="line">CLanguage.info = info</span><br><span class="line">CLanguage.info2 = info2</span><br><span class="line">CLanguage.info3 = info3</span><br><span class="line">clang = CLanguage()</span><br><span class="line">#如今，clang 具有以上 3 种方法</span><br><span class="line">clang.info()</span><br><span class="line">clang.info2()</span><br><span class="line">clang.info3()</span><br><span class="line">#类实例对象只能动态添加实例方法，不会影响其它实例对象</span><br><span class="line">clang1 = CLanguage()</span><br><span class="line">clang1.info = info</span><br><span class="line">#必须手动为 self 传值</span><br><span class="line">clang1.info(clang1)</span><br></pre></td></tr></table></figure><p>Python 提供了 <strong>slots</strong> 属性，通过它可以避免用户频繁的给<strong>实例对象</strong>动态地添加属性或方法。</p><p>再次声明，<strong>slots</strong> 只能限制为<strong>实例对象</strong>动态添加属性和方法，而无法限制动态地为类添加属性和方法。</p><p><strong>slots</strong> 属性值其实就是一个元组，只有其中指定的元素，才可以作为动态添加的属性或者方法的名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class CLanguage:</span><br><span class="line">    __slots__ = (&#x27;name&#x27;,&#x27;add&#x27;,&#x27;info&#x27;)</span><br></pre></td></tr></table></figure><p>可以看到， CLanguage 类中指定了 <strong>slots</strong> 属性，这意味着，该类的实例对象仅限于动态添加 name、add、info 这 3 个属性以及 name()、add() 和 info() 这 3 个方法。</p><p>注意，对于动态添加的方法，<strong>slots</strong> 限制的是其方法名，并不限制参数的个数。</p><h5 id="Python-type-函数：动态创建类"><a href="#Python-type-函数：动态创建类" class="headerlink" title="Python type()函数：动态创建类"></a>Python type()函数：动态创建类</h5><p>type() 函数属于 Python 内置函数，通常用来查看某个变量的具体类型。<br>其实，type() 函数还有一个更高级的用法，即创建一个自定义类型（也就是创建一个类）。<br>type() 函数的语法格式有 2 种：</p><p>type(obj)<br>type(name, bases, dict)</p><p>这 2 种语法格式，各参数的含义及功能分别是：<br><strong>第一种语法格式用来查看某个变量（类对象）的具体类型</strong>，obj 表示某个变量或者类对象。</p><p><strong>第二种语法格式用来创建类</strong>，<br>其中 name 表示类的名称；<br>bases 表示一个元组，其中存储的是该类的父类；<br>dict 表示一个字典，用于表示类内定义的属性或者方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def say(self):</span><br><span class="line">    print(&quot;我要学 Python！&quot;)</span><br><span class="line">CLanguage = type(&quot;CLanguage&quot;,(object,),dict(say = say, name = &quot;xiaoyang&quot;))</span><br><span class="line">clangs = CLanguage()</span><br><span class="line">#调用 say() 方法和 name 属性</span><br><span class="line">clangs.say()</span><br><span class="line">print(clangs.name)</span><br></pre></td></tr></table></figure><p>注意，Python 元组语法规定，<strong>当 (object,) 元组中只有一个元素时，最后的逗号（,）不能省略</strong>。</p><p>如何判断 dict 字典中添加的是方法还是属性？</p><p>很简单，如果该键值对中，值为普通变量（如 “xiaoyang”），则表示为类添加了一个类属性；反之，如果值为外部定义的函数（如 say() ），则表示为类添加了一个实例方法。<br>可以看到，使用 type() 函数创建的类，和直接使用 class 定义的类并无差别。</p><p><strong>事实上，我们在使用 class 定义类时，Python 解释器底层依然是用 type() 来创建这个类</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> python提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python提升三</title>
      <link href="/post/88bac164.html"/>
      <url>/post/88bac164.html</url>
      
        <content type="html"><![CDATA[<h4 id="Python-property-函数：定义属性"><a href="#Python-property-函数：定义属性" class="headerlink" title="Python property()函数：定义属性"></a>Python property()函数：定义属性</h4><p>我们一直在用“类对象.属性”的方式访问类中定义的属性，其实这种做法是欠妥的，因为它破坏了类的封装原则。<strong>正常情况下，类包含的属性应该是隐藏的</strong>，只允许通过类提供的方法来间接实现对类属性的访问和操作。</p><p>因此，在不破坏类封装原则的基础上，为了能够有效操作类中的属性，类中应包含读（或写）类属性的多个 getter（或 setter）方法，这样就可以通过“类对象.方法(参数)”的方式操作属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class CLanguage:</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.name = name</span><br><span class="line">    #设置 name 属性值的函数</span><br><span class="line">    def setname(self,name):</span><br><span class="line">        self.name = name</span><br><span class="line">    #访问nema属性值的函数</span><br><span class="line">    def getname(self):</span><br><span class="line">        return self.name</span><br><span class="line">    #删除name属性值的函数</span><br><span class="line">    def delname(self):</span><br><span class="line">        self.name=&quot;xxx&quot;</span><br><span class="line">clang = CLanguage(&quot;漂亮鬼&quot;)</span><br><span class="line">print(clang.getname())</span><br><span class="line">clang.setname(&quot;Python&quot;)</span><br><span class="line">print(clang.getname())</span><br><span class="line">clang.delname()</span><br><span class="line">print(clang.getname())</span><br></pre></td></tr></table></figure><p>Python 中提供了 property() 函数，可以实现在不破坏类封装原则的前提下，让开发者依旧使用“类对象.属性”的方式操作类中的属性</p><p>property() 函数的基本使用格式：<br>属性名&#x3D;property(fget&#x3D;None, fset&#x3D;None, fdel&#x3D;None, doc&#x3D;None)</p><p>fget 参数用于指定获取该属性值的类方法，<br>fset 参数用于指定设置该属性值的方法，<br>fdel 参数用于指定删除该属性值的方法，<br>最后的 doc 是一个文档字符串，用于说明此函数的作用。</p><p>注意，在使用 property() 函数时，以上 4 个参数可以仅指定第 1 个、或者前 2 个、或者前 3 个，当前也可以全部指定。也就是说，property() 函数中参数的指定并不是完全随意的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class CLanguage:</span><br><span class="line">    def __init__(self,n):</span><br><span class="line">        self.__name = n</span><br><span class="line">    def setname(self,n):</span><br><span class="line">        self.__name = n</span><br><span class="line">    def getname(self):</span><br><span class="line">        return self.__name</span><br><span class="line">    def delname(self):</span><br><span class="line">        self.__name=&quot;xxx&quot;</span><br><span class="line">    name = property(getname, setname, delname, &#x27;指明出处&#x27;)</span><br><span class="line">#调取说明文档的 2 种方式</span><br><span class="line">#print(CLanguage.name.__doc__)</span><br><span class="line">help(CLanguage.name)</span><br><span class="line">clang = CLanguage(&quot;漂亮鬼&quot;)</span><br><span class="line">#调用 getname() 方法</span><br><span class="line">print(clang.name)</span><br><span class="line">#调用 setname() 方法</span><br><span class="line">clang.name=&quot;Python&quot;</span><br><span class="line">print(clang.name)</span><br><span class="line">#调用 delname() 方法</span><br><span class="line">del clang.name</span><br><span class="line">print(clang.name)</span><br></pre></td></tr></table></figure><p>注意：<br>在此程序中，由于 getname() 方法中需要返回 name 属性，如果使用 self.name 的话，其本身又被调用 getname()，这将会先入无限死循环。为了避免这种情况的出现，<strong>程序中的 name 属性必须设置为私有属性</strong>，即使用 __name（前面有 2 个下划线）</p><h4 id="Python-property装饰器详解"><a href="#Python-property装饰器详解" class="headerlink" title="Python @property装饰器详解"></a>Python @property装饰器详解</h4><p>既要保护类的封装特性，又要让开发者可以使用“对象.属性”的方式操作操作类属性，除了使用 property() 函数，Python 还提供了 @property 装饰器。通过 @property 装饰器，可以直接通过方法名来<strong>访问方法</strong>，不需要在方法名后添加一对“（）”小括号。<br>@property 的语法格式如下：</p><p>@property<br>def 方法名(self)<br>    代码块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Rect:</span><br><span class="line">    def __init__(self,area):</span><br><span class="line">        self.__area = area</span><br><span class="line">    @property</span><br><span class="line">    def area(self):</span><br><span class="line">        return self.__area</span><br><span class="line">rect = Rect(30)</span><br><span class="line">#直接通过方法名来访问 area 方法</span><br><span class="line">print(&quot;矩形的面积是：&quot;,rect.area)</span><br></pre></td></tr></table></figure><p>使用 ＠property 修饰了 area() 方法，这样就使得该方法变成了 area 属性的 getter 方法。需要注意的是，如果类中只包含该方法，那么 area 属性将是一个只读属性。</p><p>也就是说，在使用 Rect 类时，无法对 area 属性重新赋值<br>运行如下代码会报错：<br>rect.area &#x3D; 90<br>print(“修改后的面积：”,rect.area)</p><p>而要想实现修改 area 属性的值，还需要为 area 属性添加 setter 方法，就需要用到 setter 装饰器<br>语法格式：<br>@方法名.setter<br>def 方法名(self, value):<br>    代码块</p><p>为 Rect 类中的 area 方法添加 setter 方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@area.setter</span><br><span class="line">def area(self, value):</span><br><span class="line">    self.__area = value</span><br></pre></td></tr></table></figure><p>然后就可以修改area的值了</p><p>除此之外，还可以使用 deleter 装饰器来删除指定属性<br>语法格式：<br>@方法名.deleter<br>def 方法名(self):<br>    代码块<br>为 Rect 类中，给 area() 方法添加 deleter 方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@area.deleter</span><br><span class="line">def area(self):</span><br><span class="line">    self.__area = 0</span><br></pre></td></tr></table></figure><p>＠property相当于前面的getname() 函数<br>@setter相当于setname()函数<br>@deleter 相当于delete()函数</p><h4 id="Python封装机制及实现方法"><a href="#Python封装机制及实现方法" class="headerlink" title="Python封装机制及实现方法"></a>Python封装机制及实现方法</h4><p>简单的理解封装（Encapsulation），即在设计类时，刻意地将一些属性和方法隐藏在类的内部，这样在使用此类时，将无法直接以“类对象.属性名”（或者“类对象.方法名(参数)”）的形式调用这些属性（或方法），而只能用未隐藏的类方法间接操作这些隐藏的属性和方法。<br>大致相当于c++中的将里面的属性设置为私有，然后外面不能直接通过对象名直接访问，必须通过函数留一些接口才能访问到</p><p>封装绝不是将类中所有的方法都隐藏起来，一定要留一些像键盘、鼠标这样可供外界使用的类方法<br>对一个类实现良好的封装，用户只能借助暴露出来的类方法来访问数据，我们只需要在这些暴露的方法中加入适当的控制逻辑，即可轻松实现用户对类中属性或方法的不合理操作。<br>并且，对类进行良好的封装，还可以提高代码的复用性。</p><h5 id="Python-类进行封装"><a href="#Python-类进行封装" class="headerlink" title="Python 类进行封装"></a>Python 类进行封装</h5><p>和其它面向对象的编程语言（如 C++、Java）不同，Python 类中的变量和函数，不是公有的（类似 public 属性），就是私有的（类似 private），这 2 种属性的区别如下：<br>public：公有属性的类变量和类函数，在类的外部、类内部以及子类中，都可以正常访问；<br>private：私有属性的类变量和类函数，只能在本类内部使用，类的外部以及子类都无法使用。</p><p>但是，Python 并没有提供 public、private 这些修饰符。为了实现类的封装</p><p>Python 采取了下面的方法：<br>默认情况下，Python 类中的变量和方法都是公有（public）的，它们的名称前都没有下划线（_）；<br>如果类中的变量和函数，其名称以双下划线“__”开头，则该变量（函数）为私有变量（私有函数），其属性等同于 private。</p><p>除此之外，还可以定义以单下划线“_”开头的类属性或者类方法</p><p>（例如 _name、_display(self)），这种类属性和类方法通常被视为私有属性和私有方法，虽然它们也能通过类对象正常访问，但这是一种约定俗称的用法，初学者一定要遵守。</p><p>注意，Python 类中还有以双下划线开头和结尾的类方法（例如类的构造函数__init__(self)），这些都是 Python 内部定义的，用于 Python 内部调用。我们自己定义类属性或者类方法时，不要使用这种格式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class CLanguage :</span><br><span class="line">    def setname(self, name):</span><br><span class="line">        if len(name) &lt; 3:</span><br><span class="line">            raise ValueError(&#x27;名称长度必须大于3！&#x27;)</span><br><span class="line">        self.__name = name</span><br><span class="line">    def getname(self):</span><br><span class="line">        return self.__name</span><br><span class="line">    name = property(getname, setname)</span><br><span class="line">    def setadd(self, add):</span><br><span class="line">        if add.startswith(&quot;http://&quot;):</span><br><span class="line">            self.__add = add</span><br><span class="line">        else:</span><br><span class="line">            raise ValueError(&#x27;地址必须以 http:// 开头&#x27;)</span><br><span class="line">    def getadd(self):</span><br><span class="line">        return self.__add  </span><br><span class="line">    #为 add 配置 setter 和 getter 方法</span><br><span class="line">    add = property(getadd, setadd)</span><br><span class="line">    #定义个私有方法</span><br><span class="line">    def __display(self):</span><br><span class="line">        print(self.__name,self.__add)</span><br><span class="line">       </span><br><span class="line">clang = CLanguage()</span><br><span class="line">clang.name = &quot;漂亮鬼blog&quot;</span><br><span class="line">clang.add = &quot;http://xiaoyangzst.vercel.app/&quot;</span><br><span class="line">print(clang.name)</span><br><span class="line">print(clang.add)</span><br></pre></td></tr></table></figure><p>会做详细的讲解，这里可简单理解成，如果用户输入不规范，程序将会报错。<br>通过此程序的运行逻辑不难看出，通过对 CLanguage 类进行良好的封装，使得用户仅能通过暴露的 setter() 和 getter() 方法操作 name 和 add 属性，而通过对 setname() 和 setadd() 方法进行适当的设计，可以避免用户对类中属性的不合理操作，从而提高了类的可维护性和安全性。<br>细心的读者可能还发现，CLanguage 类中还有一个 __display() 方法，由于该类方法为私有（private）方法，且该类没有提供操作该私有方法的“窗口”，因此我们无法在类的外部使用它。</p><h4 id="Python封装底层实现原理详解"><a href="#Python封装底层实现原理详解" class="headerlink" title="Python封装底层实现原理详解"></a>Python封装底层实现原理详解</h4><p>类对象无法直接调用以双下划线开头命名的类属性和类方法，是因为其底层实现时，Python 偷偷改变了它们的名称。</p><p>是不是类似 display() 这种的私有方法，真的没有方法调用吗？如果你深入了解 Python 封装机制的底层实现原理，就可以调用它。<br><strong>事实上，对于以双下划线开头命名的类属性或类方法，Python 在底层实现时，将它们的名称都偷偷改成了 “_类名__属性（方法）名” 的格式</strong></p><p>前面display私有函数的调用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">clang = CLanguage()</span><br><span class="line">#调用name的setname()方法</span><br><span class="line">clang.name = &quot;漂亮鬼&quot;</span><br><span class="line">#调用add的setadd()方法</span><br><span class="line">clang.add = &quot;https://xiaoyangzst.vercel.app&quot;</span><br><span class="line">#直接调用隐藏的display()方法</span><br><span class="line">clang._CLanguage__display()</span><br></pre></td></tr></table></figure><p>不仅如此，那些原本我们认为是私有的类属性（例如 __name 和 __add），其底层的名称也改成了“_类名__属性名”的这种格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">clang = CLanguage()</span><br><span class="line">clang.name = &quot;漂亮鬼&quot;</span><br><span class="line">clang.add = &quot;https://xiaoyangzst.vercel.app&quot;</span><br><span class="line">#直接调用 name 和 add 私有属性</span><br><span class="line">print(clang._CLanguage__name, clang._CLanguage_)</span><br></pre></td></tr></table></figure><p>甚至于，我们还可以通过这种方式修改 clang 对象的私有属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">clang._CLanguage__name = &quot;Python&quot;</span><br><span class="line">clang._CLanguage__add = &quot;https://xiaoyangzst.vercel.app&quot;</span><br><span class="line">print(clang._CLanguage__name,clang._CLanguage__add)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tkinter-Scale控件</title>
      <link href="/post/ff3fc45d.html"/>
      <url>/post/ff3fc45d.html</url>
      
        <content type="html"><![CDATA[<h5 id="Tkinter-Scale控件详解"><a href="#Tkinter-Scale控件详解" class="headerlink" title="Tkinter Scale控件详解"></a>Tkinter Scale控件详解</h5><p>Scale 控件，即滑块控件或标尺控件，该控件可以创建一个类似于标尺式的滑动条对象，用户通过操作它可以直接设置相应的数值（刻度值)。</p><p>常用的基本属性：</p><p>activebackground<br>指定当鼠标在上方飘过的时候滑块的背景颜色</p><p>bigincrement</p><ol><li>设置“大”增长量</li><li>该选项设置增长量的大小</li><li>默认值是 0，增长量为范围的 1&#x2F;10</li></ol><p>borderwidth</p><ol><li>指定边框宽度</li><li>默认值是 2</li></ol><p>command</p><ol><li>指定一个函数，每当滑块发生改变的时候都会自动调用该函数</li><li>该函数有一个唯一的参数，就是最新的滑块位置</li><li>如果滑块快速地移动，函数可能无法获得每一个位置，但一定会获得滑块停下时的最终位置</li></ol><p>digits</p><ol><li>设置最多显示多少位数字</li><li>补充注释：例如设置 from 选项为 0，to 选项为 20，digits 选项设置为 5，那么滑块的范围就是在 0.000 ~ 20.000 直接滑动</li><li>默认值是 0（不开启）</li></ol><p>font</p><ol><li>指定滑块左侧的 Label 和刻度的文字字体</li><li>默认值由系统指定</li></ol><p>from_</p><ol><li>设置滑块最顶（左）端的位置</li><li>默认值是 0</li></ol><p>highlightcolor</p><ol><li>指定当 Scale 获得焦点的时候高亮边框的颜色</li><li>默认值由系统指定</li></ol><p>label</p><ol><li>你可以在垂直的 Scale 组件的顶端右侧（水平的话是左端上方）显示一个文本标签</li><li>默认值是不显示标签</li></ol><p>length</p><ol><li>Scale 组件的长度，默认值是 100 像素</li></ol><p>orient</p><ol><li>设置 Scale 控件是水平放置（HORIZONTAL）还是垂直放置（VERTICAL）</li><li>默认值是 VERTICAL（垂直放置）</li></ol><p>repeatdelay</p><ol><li>该选项指定鼠标左键点击滚动条凹槽的响应时间</li><li>默认值是 300（毫秒）</li></ol><p>repeatinterval</p><ol><li>该选项指定鼠标左键紧按滚动条凹槽时的响应间隔</li><li>默认值是 100（毫秒）</li></ol><p>resolution</p><ol><li>指定 Scale 组件的分辨率（每点击一下移动的步长）<br>示例： 比如 resolution 选项设置为 0.1 的话，那么每点击一下鼠标就是在 0.0 ~ 20.0 之间以 0.1 的步长移动</li><li>该参数的默认值是 1</li></ol><p>showvalue</p><ol><li>设置是否显示滑块旁边的数字</li><li>默认值为 True</li></ol><p>sliderlength</p><ol><li>设置滑块的长度</li><li>默认值是 30 像素</li></ol><p>state</p><ol><li>默认情况下 Scale 组件支持鼠标事件和键盘事件，可以通过设置该选项为 DISABLED 来禁用此功能</li><li>默认值是 NORMAL</li></ol><p>takefocus</p><ol><li>指定使用 Tab 键是否可以将焦点移动到该 Scale 组件上</li><li>默认是开启的，可以通过将该选项设置为 False 避免焦点落在此组件上</li></ol><p>tickinterval</p><ol><li>设置显示的刻度，如果设置一个值，那么就会按照该值的倍数显示刻度</li><li>默认值是不显示刻度</li></ol><p>to</p><ol><li>设置滑块最底（右）端的位置</li><li>默认值是 100</li></ol><p>troughcolor</p><ol><li>设置凹槽的颜色</li><li>默认值由系统指定</li></ol><p>variable</p><ol><li>指定一个与 Scale 组件相关联的 Tkinter 变量，该变量存放滑块最新的位置</li><li>当滑块移动的时候，该变量的值也会发生相应的变化</li></ol><p>width</p><ol><li>指定 Scale 组件的宽度</li><li>默认值是 15 像素</li></ol><p>Scale 常用方法有如下四个：</p><p>coords(value&#x3D;None)</p><ol><li>获得当前滑块位置相对于 Scale 控件左上角位置的相对坐标，</li><li>如果设置了 value 值，则返回当滑块位于该位置时与左上角的相对坐标get()获得当前滑块的位置（即当前数值），返回值可以为整型或者浮点型</li></ol><p>identify(x, y)<br>返回一个字符串表示指定位置下的 Scale 控件</p><p>set(value)<br>设置 Scale 控件的值，即滑块的位置，默认为初始位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from tkinter import *</span><br><span class="line">win =Tk()</span><br><span class="line">win.geometry(&#x27;400x250&#x27;)</span><br><span class="line"># 添加一个 Scale 控件，默认垂直方向，步长设置为 5，长度为200，滑动块的大小为 50，最后使用label参数文本</span><br><span class="line">s=Scale(win, from_ =100, to =0,resolution =5,length =100,sliderlength= 10,label =&#x27;音量控制&#x27; )</span><br><span class="line">s.pack()</span><br><span class="line"># 设置滑块的位置</span><br><span class="line">s.set(value=15)</span><br><span class="line">mainloop()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import tkinter as tk</span><br><span class="line">window = tk.Tk()</span><br><span class="line">window.geometry(&#x27;450x200+450+250&#x27;)</span><br><span class="line">window.resizable(0,0)</span><br><span class="line">label = tk.Label(window, bg=&#x27;#9FB6CD&#x27;,width=18, text=&#x27;&#x27;)</span><br><span class="line">label.grid(row =2)</span><br><span class="line">def select_price(value):</span><br><span class="line">    label.config(text=&#x27;您购买的数量是 &#x27; + value)</span><br><span class="line">scale = tk.Scale(window,</span><br><span class="line">             label=&#x27;选择您要购买的数量&#x27;,</span><br><span class="line">             from_=1,</span><br><span class="line">             to= 100,</span><br><span class="line">             orient=tk.HORIZONTAL,</span><br><span class="line">             length=400,</span><br><span class="line">             tickinterval=9,       # 设置刻度滑动条的间隔</span><br><span class="line">             command=select_price)  # 调用执行函数，是数值显示在 Label控件中</span><br><span class="line">scale.set(66)</span><br><span class="line">scale.grid(row =1)</span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python--tkinter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python提升二</title>
      <link href="/post/cae65769.html"/>
      <url>/post/cae65769.html</url>
      
        <content type="html"><![CDATA[<h4 id="Python-self用法"><a href="#Python-self用法" class="headerlink" title="Python self用法"></a>Python self用法</h4><p>在定义类的过程中，无论是显式创建类的构造方法，还是向类中添加实例方法，都要求将 self 参数作为方法的第一个参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        print(&quot;我使用了构造函数&quot;)</span><br><span class="line">    def say(self,name):</span><br><span class="line">        print(&quot;我名字是：&quot;,name)</span><br><span class="line">xiaoyang = Person()</span><br><span class="line">xiaoyang.say(&quot;xiaoyang&quot;)</span><br></pre></td></tr></table></figure><p>Python 只是规定，<strong>无论是构造方法还是实例方法，最少要包含一个参数</strong>，并没有规定该参数的具体名称。之所以将其命名为 self，只是程序员之间约定俗成的一种习惯，遵守这个约定，可以使我们编写的代码具有更好的可读性（大家一看到 self，就知道它的作用）。</p><p>self 参数的具体作用打个比方<br>如果把类比作造房子的图纸，那么类实例化后的对象是真正可以住的房子。根据一张图纸（类），我们可以设计出成千上万的房子（类对象），每个房子长相都是类似的（都有相同的类变量和类方法），但它们都有各自的主人，那么如何对它们进行区分呢？<br>当然是通过 self 参数，它就相当于每个房子的门钥匙，可以保证每个房子的主人仅能进入自己的房子（每个类对象只能调用自己的类变量和类方法）。如果你接触过其他面向对象的编程语言（例如 C++），<strong>其实 Python 类方法中的 self 参数就相当于 C++ 中的 this 指针</strong>。</p><p>也就是说，同一个类可以产生多个对象，<strong>当某个对象调用类方法时，该对象会把自身的引用作为第一个参数自动传给该方法，换句话说，Python 会自动绑定类方法的第一个参数指向调用该方法的对象</strong>。如此，Python解释器就能知道到底要操作哪个对象的方法了。</p><p>程序在调用实例方法和构造方法时，不需要手动为第一个参数传值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        print(&quot;正在执行构造方法&quot;)</span><br><span class="line">    def study(self):</span><br><span class="line">        print(self,&quot;正在学Python&quot;)</span><br><span class="line">zhangsan = Person()</span><br><span class="line">zhangsan.study()</span><br><span class="line">lisi = Person()</span><br><span class="line">lisi.study()</span><br></pre></td></tr></table></figure><h4 id="Python类变量和实例变量"><a href="#Python类变量和实例变量" class="headerlink" title="Python类变量和实例变量"></a>Python类变量和实例变量</h4><p>无论是类属性还是类方法，都无法像普通变量或者函数那样，在类的外部直接使用它们。我们可以将类看做一个独立的空间，则类属性其实就是在类体中定义的变量，类方法是在类体中定义的函数。</p><p>前面提到过，在类体中，根据变量定义的位置不同，以及定义的方式不同，类属性又可细分为以下 3 种类型：<br>1.类体中、所有函数之外：此范围定义的变量，称为类属性或类变量；<br>2.类体中，所有函数内部：以“<strong>self.变量名</strong>”的方式定义的变量，称为实例属性或实例变量；<br>3.类体中，所有函数内部：以“变量名&#x3D;变量值”的方式定义的变量，称为局部变量。</p><h5 id="类变量（类属性）"><a href="#类变量（类属性）" class="headerlink" title="类变量（类属性）"></a>类变量（类属性）</h5><p>类变量指的是在类中，但在各个类方法外定义的变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class CLanguage :</span><br><span class="line">    name = &quot;漂亮鬼&quot;</span><br><span class="line">    add = &quot;https://xiaoyangzst.vercel.app/&quot;</span><br><span class="line">    #下面定义了一个say实例方法</span><br><span class="line">    def say(self, content):</span><br><span class="line">        print(content)</span><br></pre></td></tr></table></figure><p><strong>类变量的特点</strong>: 所有类的实例化对象都同时共享类变量，也就是说，类变量在所有实例化对象中是作为公用资源存在的。</p><h5 id="类方法的调用方式有-2-种，"><a href="#类方法的调用方式有-2-种，" class="headerlink" title="类方法的调用方式有 2 种，"></a>类方法的调用方式有 2 种，</h5><p>既可以使用类名直接调用，也可以使用类的实例化对象调用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#使用类名直接调用</span><br><span class="line">print(CLanguage.name)</span><br><span class="line">print(CLanguage.add)</span><br><span class="line">#修改类变量的值</span><br><span class="line">CLanguage.name = &quot;Python&quot;</span><br><span class="line">CLanguage.add = &quot;http://python&quot;</span><br><span class="line">print(CLanguage.name)</span><br><span class="line">print(CLanguage.add)</span><br></pre></td></tr></table></figure><p><strong>通过类名不仅可以调用类变量，也可以修改它的值</strong>。</p><p>当然，也可以使用类对象来调用所属类中的类变量（此方式不推荐使用)</p><p>clang &#x3D; CLanguage()<br>print(clang.name)<br>print(clang.add)</p><p><strong>注意</strong>：因为类变量为所有实例化对象共有，通过类名修改类变量的值，会影响所有的实例化对象<br>通过类名修改类变量，会作用到所有的实例化对象</p><h5 id="实例变量（实例属性）"><a href="#实例变量（实例属性）" class="headerlink" title="实例变量（实例属性）"></a>实例变量（实例属性）</h5><p>实例变量指的是在任意类方法内部，以“self.变量名”的方式定义的变量，其特点是只作用于调用方法的对象。<br>另外，<strong>实例变量只能通过对象名访问，无法通过类名访问</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class CLanguage :</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.name = &quot;票连跪&quot;</span><br><span class="line">        self.add = &quot;https://xiaoyangzst.app.vercel&quot;</span><br><span class="line">    def say(self):</span><br><span class="line">        self.catalog = 78</span><br></pre></td></tr></table></figure><p>此 CLanguage 类中，name、add 以及 catalog 都是实例变量。其中，由于 <strong>init</strong>() 函数在创建类对象时会自动调用，而 say() 方法需要类对象手动调用。因此，CLanguage 类的类对象都会包含 name 和 add 实例变量，而只有调用了 say() 方法的类对象，才包含 catalog 实例变量。</p><h5 id="为什么不推荐使用类对象调用类变量"><a href="#为什么不推荐使用类对象调用类变量" class="headerlink" title="为什么不推荐使用类对象调用类变量"></a>为什么不推荐使用类对象调用类变量</h5><p>前面讲过，通过类对象可以访问类变量，但无法修改类变量的值。这是因为，通过类对象修改类变量的值，不是在给“类变量赋值”，而是定义新的<strong>实例变量</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">clang = CLanguage()</span><br><span class="line">print(clang.name)</span><br><span class="line">print(clang.add)</span><br><span class="line">clang.name = &quot;Python&quot;</span><br><span class="line">clang.add = &quot;http://python&quot;</span><br><span class="line">#clang实例变量的值</span><br><span class="line">print(clang.name)</span><br><span class="line">print(clang.add)</span><br><span class="line">#类变量的值</span><br><span class="line">print(CLanguage.name)</span><br><span class="line">print(CLanguage.add)</span><br></pre></td></tr></table></figure><p>通过类对象是无法修改类变量的值的，本质其实是给 clang 对象新添加 name 和 add 这 2 个<strong>实例变量</strong></p><p><strong>实例变量和类变量可以同名，但这种情况下使用类对象将无法调用类变量，它会首选实例变量</strong>，这也是不推荐“类变量使用对象名调用”的原因。<br>另外，和<strong>类变量不同，通过某个对象修改实例变量的值，不会影响类的其它实例化对象，更不会影响同名的类变量。</strong></p><h5 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h5><p>除了实例变量，类方法中还可以定义局部变量。和前者不同，局部变量直接以“变量名&#x3D;值”的方式进行定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class CLanguage :</span><br><span class="line">    def count(self,money):</span><br><span class="line">        sale = 0.8*money</span><br><span class="line">        print(&quot;优惠后的价格为：&quot;,sale)</span><br><span class="line">clang = CLanguage()</span><br><span class="line">clang.count(100)</span><br></pre></td></tr></table></figure><p>通常情况下，定义局部变量是为了所在类方法功能的实现。需要注意的一点是，局部变量只能用于所在函数中，函数执行完成后，局部变量也会被销毁。</p><h4 id="Python实例方法、静态方法和类方法"><a href="#Python实例方法、静态方法和类方法" class="headerlink" title="Python实例方法、静态方法和类方法"></a>Python实例方法、静态方法和类方法</h4><p>和类属性一样，类方法也可以进行更细致的划分，具体可分为类方法、实例方法和静态方法。<br>和类属性的分类不同，对于初学者来说，区分这 3 种类方法是非常简单的，采用 @classmethod 修饰的方法为类方法；<br>采用 @staticmethod 修饰的方法为静态方法；<br>不用任何修改的方法为实例方法。<br>其中 @classmethod 和 @staticmethod 都是函数装饰器</p><h5 id="Python类实例方法"><a href="#Python类实例方法" class="headerlink" title="Python类实例方法"></a>Python类实例方法</h5><p>通常情况下，在类中定义的方法默认都是实例方法。前面，我们已经定义了不只一个实例方法。不仅如此，类的构造方法理论上也属于实例方法，只不过它比较特殊。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class CLanguage:</span><br><span class="line">    #类构造方法，也属于实例方法</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.name = &quot;漂亮鬼&quot;</span><br><span class="line">        self.add = &quot;https:/xiaoyangzst.vercel.app&quot;</span><br><span class="line">    def say(self):</span><br><span class="line">        print(&quot;正在调用 say() 实例方法&quot;)</span><br></pre></td></tr></table></figure><p>实例方法最大的特点就是，它最少也要包含一个 self 参数，用于绑定调用此方法的实例对象（Python 会自动完成绑定）。<strong>实例方法通常会用类对象直接调用</strong></p><p>当然，<strong>Python 也支持使用类名调用实例方法，但此方式需要手动给 self 参数传值</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">clang = CLanguage()</span><br><span class="line">CLanguage.say(clang)</span><br><span class="line">class CLanguage:</span><br><span class="line">    def info(self):</span><br><span class="line">        print(self,&quot;正在学 Python&quot;)</span><br><span class="line">#通过类名直接调用实例方法</span><br><span class="line">CLanguage.info(&quot;zhangsan&quot;)</span><br></pre></td></tr></table></figure><h5 id="Python-类方法"><a href="#Python-类方法" class="headerlink" title="Python 类方法"></a>Python 类方法</h5><p>Python 类方法和实例方法相似，它最少也要包含一个参数，只不过类方法中通常将其命名为 cls，<br>Python 会自动将类本身绑定给 cls 参数（注意，绑定的不是类对象）。<br>也就是说，我们在调用类方法时，无需显式为 cls 参数传参。和 self 一样，cls 参数的命名也不是规定的（可以随意命名），只是 Python 程序员约定俗称的习惯而已</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class CLanguage:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.name = &quot;漂亮鬼&quot;</span><br><span class="line">        self.add = &quot;https:/xiaoyangzst.vercel.app&quot;</span><br><span class="line">    #下面定义了一个类方法</span><br><span class="line">    @classmethod</span><br><span class="line">    def info(cls):</span><br><span class="line">        print(&quot;正在调用类方法&quot;,cls)</span><br></pre></td></tr></table></figure><p>注意，如果没有 ＠classmethod，则 Python 解释器会将 fly() 方法认定为实例方法，而不是类方法。<br><strong>类方法推荐使用类名直接调用</strong>，当然也可以使用实例对象来调用（不推荐）</p><h5 id="Python类静态方法"><a href="#Python类静态方法" class="headerlink" title="Python类静态方法"></a>Python类静态方法</h5><p>静态方法，其实就是我们学过的函数，和函数唯一的区别是，静态方法定义在类这个空间（类命名空间）中，而函数则定义在程序所在的空间（全局命名空间）中。<br>静态方法没有类似 self、cls 这样的特殊参数，因此 Python 解释器不会对它包含的参数做任何类或对象的绑定。也正因为如此，类的静态方法中无法调用任何类属性和类方法。<br>静态方法需要使用＠staticmethod修饰</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class CLanguage:</span><br><span class="line">    @staticmethod</span><br><span class="line">    def info(name,add):</span><br><span class="line">        print(name,add)</span><br></pre></td></tr></table></figure><p><strong>静态方法的调用，既可以使用类名，也可以使用类对象</strong></p><p>在实际编程中，几乎不会用到类方法和静态方法，因为我们完全可以使用函数代替它们实现想要的功能</p><h4 id="浅谈Python类命名空间"><a href="#浅谈Python类命名空间" class="headerlink" title="浅谈Python类命名空间"></a>浅谈Python类命名空间</h4><p>Python 类体中的代码位于独立的命名空间（称为类命名空间）中。换句话说，所有用 class 关键字修饰的代码块，都可以看做是位于独立的命名空间中。</p><p>和类命名空间相对的是全局命名空间，即整个 Python 程序默认都位于全局命名空间中。而类体则独立位于类命名空间中。</p><p>但需要注意的一点是，当使用类对象调用类方法时，在传参方面是和外界的函数有区别的，因为 Python 会自动会第一个参数绑定方法的调用者，而位于全局空间中的函数，则必须显式为第一个参数传递参数。</p><h4 id="Python描述符"><a href="#Python描述符" class="headerlink" title="Python描述符"></a>Python描述符</h4><p>Python 中，通过使用描述符，可以让程序员在引用一个对象属性时自定义要完成的工作<br>本质上看，描述符就是一个类，只不过它定义了另一个类中属性的访问方式。换句话说，一个类可以将属性管理全权委托给描述符类。<br>描述符是 Python 中复杂属性访问的基础，它在内部被用于实现 property、方法、类方法、静态方法和 super 类型</p><p>描述符类基于以下 3 个特殊方法，换句话说，这 3 个方法组成了描述符协议：<br><strong>set</strong>(self, obj, type&#x3D;None)：在设置属性时将调用这一方法（后续用 setter 表示）；<br><strong>get</strong>(self, obj, value)：在读取属性时将调用这一方法（后续用 getter 表示）；<br><strong>delete</strong>(self, obj)：对属性调用 del 时将调用这一方法。</p><p>其中，实现了 setter 和 getter 方法的描述符类被称为数据描述符；<br>反之，如果只实现了 getter 方法，则称为非数据描述符。</p><p>在每次查找属性时，描述符协议中的方法都由类对象的特殊方法 <strong>getattribute</strong>() 调用（注意不要和 <strong>getattr</strong>() 弄混）。也就是说，每次使用类对象.属性（或者 getattr(类对象，属性值)）的调用方式时，都会隐式地调用 <strong>getattribute</strong>()，它会按照下列顺序查找该属性：</p><p>验证该属性是否为类实例对象的数据描述符；<br>如果不是，就查看该属性是否能在类实例对象的 <strong>dict</strong> 中找到；<br>最后，查看该属性是否为类实例对象的非数据描述符。</p><p>1、位于搜索链上的顺序。搜索链（或者优先链）的顺序大概是这样的：<br>数据描述符＞实体属性（存储在实体的_dict_中）&gt;非数据描述符。<br>这个顺序初看起来挺晦涩。解释如下：<br>获取一个属性的时候：<br>首先，看这个属性是不是一个数据描述符，如果是，就直接执行描述符的_get_，并返回值。<br>其次，如果这个属性不是数据描述符，那就按常规去从_dict_里面取。<br>最后，如果_dict_里面还没有，但这是一个非数据描述符，则执行非数据描述符的_get_方法，并返回</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class revealAccess:</span><br><span class="line">    def __init__(self, initval = None, name = &#x27;var&#x27;):</span><br><span class="line">        self.val = initval</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    def __get__(self, obj, objtype):</span><br><span class="line">        print(&quot;Retrieving&quot;,self.name)</span><br><span class="line">        return self.val</span><br><span class="line"></span><br><span class="line">    def __set__(self, obj, val):</span><br><span class="line">        print(&quot;updating&quot;,self.name)</span><br><span class="line">        self.val = val</span><br><span class="line">class myClass:</span><br><span class="line">    x = revealAccess(10,&#x27;var &quot;x&quot;&#x27;)</span><br><span class="line">    y = 5</span><br><span class="line">m = myClass()</span><br><span class="line">print(m.x)</span><br><span class="line">m.x = 20</span><br><span class="line">print(m.x)</span><br><span class="line">print(m.y)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果为：<br>Retrieving var “x”<br>10<br>updating var “x”<br>Retrieving var “x”<br>20<br>5</p><p>可以看到，如果一个类的某个属性有数据描述符，那么每次查找这个属性时，都会调用描述符的 <strong>get</strong>() 方法，并返回它的值；同样，每次在对该属性赋值时，也会调用 <strong>set</strong>() 方法</p>]]></content>
      
      
      <categories>
          
          <category> python提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tkinter--Checkbutton复选框控件</title>
      <link href="/post/4f692c96.html"/>
      <url>/post/4f692c96.html</url>
      
        <content type="html"><![CDATA[<h5 id="Checkbutton复选框控件"><a href="#Checkbutton复选框控件" class="headerlink" title="Checkbutton复选框控件"></a>Checkbutton复选框控件</h5><p>Checkbutton 控件是一种供用户选择相应条目的按钮控件，但与 Radiobutton 不同的是，Checkbutton 控件不仅允许用户选择一项，还允许用户同时选择多项，各个选项之间属于并列的关系。复选框控件同样有许多适用场景，比如选择兴趣爱好、选择选修课，以及购买多个物品等，在这种情况下都可以使用复选框控件<br>语法格式：</p><p>Checkbutton(master&#x3D;None, **options)</p><p>复选框控件，除了具有常用的共有属性之外，还具有一些其他重要属性和常用方法<br>属性 ：<br>text<br>显示的文本，使用 “\n” 来对文本进行换行。</p><p>variable</p><ol><li>和复选框按钮关联的变量，该变量值会随着用户选择行为来改变（选或不选），即在 onvalue 和 offvalue 设置值之间切换，这些操作由系统自动完成</li><li>在默认情况下，variable 选项设置为 1 表示选中状态，反之则为 0，表示不选中。</li></ol><p>onvalue通过设置 onvalue 的值来自定义选中状态的值。offvalue通过设置 offvalue 的值来自定义未选中状态的值。</p><p>indicatoron<br>默认为 True，表示是否绘制用来选择的选项的小方块，当设置为 False 时，会改变原有按钮的样式，与单选按钮相同</p><p>selectcolor<br>选择框的颜色（即小方块的颜色），默认由系统指定</p><p>selectimage<br>设置当 Checkbutton 为选中状态的时候显示的图片，若如果没有指定 image 选项，该选项被忽略</p><p>textvariableCheckbutton<br>显示 Tkinter 变量（通常是一个 StringVar 变量）的内容，如果变量被修改，Checkbutton 的文本会自动更新</p><p>wraplength<br>表示复选框文本应该被分成多少行，该选项指定每行的长度，单位是屏幕单元，默认值为 0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import tkinter as tk</span><br><span class="line">from typing_extensions import IntVar</span><br><span class="line">root= tk.Tk()</span><br><span class="line">root.geometry(&quot;400x400+300+300&quot;)</span><br><span class="line">CheckVar1 = tk.IntVar()</span><br><span class="line">CheckVar2 = tk.IntVar()</span><br><span class="line">CheckVar3 = tk.IntVar()</span><br><span class="line">check1 = tk.Checkbutton(root, text=&quot;Python&quot;,variable = CheckVar1,onvalue=1,offvalue=0)</span><br><span class="line">check2 = tk.Checkbutton(root, text=&quot;C语言&quot;,variable = CheckVar2,onvalue=1,offvalue=0)</span><br><span class="line">check3 = tk.Checkbutton(root, text=&quot;Java&quot;,variable = CheckVar3,onvalue=1,offvalue=0)</span><br><span class="line">check1.pack(side=tk.LEFT)</span><br><span class="line">check2.pack(side=tk.LEFT)</span><br><span class="line">check3.pack(side=tk.LEFT)</span><br><span class="line">check1.select()</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><p>复杂版 – 嘿嘿</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">from tkinter import *</span><br><span class="line">win = Tk()</span><br><span class="line">win.geometry(&#x27;500x200&#x27;)</span><br><span class="line">win.resizable(0,0)</span><br><span class="line">lb = Label(text=&#x27;C语言&#x27;,font=(&#x27;微软雅黑&#x27;, 18,&#x27;bold&#x27;),fg=&#x27;#CD7054&#x27;)</span><br><span class="line">lb.pack()</span><br><span class="line"># 新建整型变量</span><br><span class="line">CheckVar1 = IntVar()</span><br><span class="line">CheckVar2 = IntVar()</span><br><span class="line">CheckVar3 = IntVar()</span><br><span class="line"># 设置三个复选框控件，使用variable参数来接收变量</span><br><span class="line">check1 = Checkbutton(win, text=&quot;Python&quot;,variable = CheckVar1,onvalue=1,offvalue=0)</span><br><span class="line">check2 = Checkbutton(win, text=&quot;C语言&quot;,variable = CheckVar2,onvalue=1,offvalue=0)</span><br><span class="line">check3 = Checkbutton(win, text=&quot;Java&quot;,variable = CheckVar3,onvalue=1,offvalue=0)</span><br><span class="line"># 选择第一个为默认选项</span><br><span class="line">check1.select ()</span><br><span class="line">check1.pack (side = LEFT)</span><br><span class="line">check2.pack (side = LEFT)</span><br><span class="line">check3.pack (side = LEFT)</span><br><span class="line">def study():</span><br><span class="line">    #没有选择任何项目的情况下</span><br><span class="line">    if (CheckVar1.get() == 0 and CheckVar2.get() == 0 and CheckVar3.get() == 0):</span><br><span class="line">        s = &#x27;您还没选择任语言&#x27;</span><br><span class="line">    else:</span><br><span class="line">        s1 = &quot;Python&quot; if CheckVar1.get() == 1 else &quot;&quot;</span><br><span class="line">        s2 = &quot;C语言&quot; if CheckVar2.get() == 1 else &quot;&quot;</span><br><span class="line">        s3 = &quot;Java&quot; if CheckVar3.get() == 1 else &quot;&quot;</span><br><span class="line">        s = &quot;您选择了%s %s %s&quot; % (s1, s2, s3)</span><br><span class="line">     #设置标签lb2的字体</span><br><span class="line">    lb2.config(text=s)</span><br><span class="line">btn = Button(win,text=&quot;选好了&quot;,bg=&#x27;#BEBEBE&#x27;,command=study)</span><br><span class="line">btn.pack(side = LEFT)</span><br><span class="line"># 该标签，用来显示选择的文本</span><br><span class="line">lb2 = Label(win,text=&#x27;&#x27;,bg =&#x27;#9BCD9B&#x27;,font=(&#x27;微软雅黑&#x27;,11,&#x27;bold&#x27;),width = 5,height=2)</span><br><span class="line">lb2.pack(side = BOTTOM, fill = X)</span><br><span class="line">win.mainloop()</span><br></pre></td></tr></table></figure><p>复选框控件提供以下常用方法</p><p>desellect()<br>取消 Checkbutton 组件的选中状态，也就是设置 variable 为 offvalue</p><p>flash()<br>刷新 Checkbutton 组件，对其进行重绘操作，即将前景色与背景色互换从而产生闪烁的效果。</p><p>invoke()</p><ol><li>调用 Checkbutton 中 command 选项指定的函数或方法，并返回函数的返回值</li><li>如果 Checkbutton 的state(状态)”disabled”是 （不可用）或没有指定 command 选项，则该方法无效</li></ol><p>select()<br>将 Checkbutton 组件设置为选中状态，也就是设置 variable 为 onvalue</p><p>toggle()<br>改变复选框的状态，如果复选框现在状态是 on，就改成 off，反之亦然</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from tkinter import *</span><br><span class="line">win = Tk()</span><br><span class="line">win.geometry(&#x27;500x200&#x27;)</span><br><span class="line">win.resizable(0,0)</span><br><span class="line">lb = Label(text=&#x27;漂亮鬼&#x27;,font=(&#x27;微软雅黑&#x27;, 18,&#x27;bold&#x27;),fg=&#x27;#CD7054&#x27;)</span><br><span class="line">lb.pack()</span><br><span class="line"># 设置三个复选框控件</span><br><span class="line">check1 = Checkbutton(win, text=&quot;Python&quot;,font=(&#x27;微软雅黑&#x27;, 15,&#x27;bold&#x27;),onvalue=1,offvalue=0)</span><br><span class="line">check2 = Checkbutton(win, text=&quot;C语言&quot;,font=(&#x27;微软雅黑&#x27;, 15,&#x27;bold&#x27;),onvalue=1,offvalue=0)</span><br><span class="line">check3 = Checkbutton(win, text=&quot;Java&quot;,font=(&#x27;微软雅黑&#x27;, 15,&#x27;bold&#x27;),onvalue=1,offvalue=0)</span><br><span class="line"># 将第一个 复选框按钮的 variable值，设置为 onvalue =1 ，表示选中状态</span><br><span class="line">check1.select ()</span><br><span class="line">check2.select ()</span><br><span class="line"># 取消了第一个复选框的选中状态</span><br><span class="line">check1.toggle()</span><br><span class="line">check1.pack (side = LEFT)</span><br><span class="line">check2.pack (side = LEFT)</span><br><span class="line">check3.pack (side = LEFT)</span><br><span class="line">win.mainloop()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python--tkinter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python提升一</title>
      <link href="/post/f16679c0.html"/>
      <url>/post/f16679c0.html</url>
      
        <content type="html"><![CDATA[<h4 id="面向对象编程的相关术语"><a href="#面向对象编程的相关术语" class="headerlink" title="面向对象编程的相关术语"></a>面向对象编程的相关术语</h4><p>面向对象中，常用术语包括：</p><h5 id="类"><a href="#类" class="headerlink" title="类"></a>类</h5><p>可以理解是一个模板，通过它可以创建出无数个具体实例。<br>比如， tortoise 表示的只是乌龟这个物种，通过它可以创建出无数个实例来代表各种不同特征的乌龟（这一过程又称为类的实例化）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class tortoise:</span><br><span class="line">    bodyColor = &quot;绿色&quot;</span><br><span class="line">    footNum = 4</span><br><span class="line">    weight = 10</span><br><span class="line">    hasShell = True</span><br><span class="line">    def crawl(self):</span><br><span class="line">        print(&quot;乌龟会爬&quot;)</span><br><span class="line">    def eat(self):</span><br><span class="line">        print(&quot;乌龟吃东西&quot;)</span><br><span class="line">    def sleep(self):</span><br><span class="line">        print(&quot;乌龟在睡觉&quot;)</span><br><span class="line">    def protect(self):</span><br><span class="line">        print(&quot;乌龟缩进了壳里&quot;)</span><br></pre></td></tr></table></figure><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p>类并不能直接使用，通过类创建出的实例（又称对象）才能使用。这有点像汽车图纸和汽车的关系，图纸本身（类）并不能为人们使用，通过图纸创建出的一辆辆车（对象）才能使用。</p><h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><p>类中的所有变量称为属性。<br>如:<br>tortoise 这个类中，bodyColor、footNum、weight、hasShell 都是这个类拥有的属性。</p><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><p>类中的所有函数通常称为方法。<br>不过，和函数所有不同的是，<strong>类方法至少要包含一个 self 参数</strong>。例如，tortoise 类中，crawl()、eat()、sleep()、protect() 都是这个类所拥有的方法，<strong>类方法无法单独使用，只能和类的对象一起使用。</strong></p><h5 id="Python类的定义"><a href="#Python类的定义" class="headerlink" title="Python类的定义"></a>Python类的定义</h5><p>Python 中定义一个类使用 class 关键字实现<br>语法格式：</p><p>class 类名：<br>    多个（≥0）类属性…<br>    多个（≥0）类方法…</p><p><strong>注意</strong>：无论是类属性还是类方法，对于类来说，它们都不是必需的，可以有也可以没有。<br>另外，Python 类中属性和方法所在的位置是任意的，即它们之间并没有固定的前后次序</p><p>给类起好名字之后，其后要跟有冒号（：），表示告诉 Python 解释器，下面<br>要开始设计类的内部功能了，也就是编写类属性和类方法。<br>类属性指的就是包含在类中的变量；而类方法指的是包含类中的函数。<br><strong>换句话说，类属性和类方法其实分别是包含类中的变量和函数的别称</strong>。<br><strong>需要注意的一点是</strong>，同属一个类的所有类属性和类方法，要保持统一的缩进格式，通常统一缩进 4 个空格。</p><h5 id="说明文档："><a href="#说明文档：" class="headerlink" title="说明文档："></a>说明文档：</h5><p>和函数一样，我们也可以为类定义说明文档，其要放到类头之后，类体之前的位置</p><p>根据定义属性位置的不同，在各个<strong>类方法之外</strong>定义的变量称为<strong>类属性或类变量</strong>（如 add 属性），而在<strong>类方法中</strong>定义的属性称为<strong>实例属性</strong>（或实例变量）</p><p>事实上，我们完全可以创建一个没有任何类属性和类方法的类，换句话说，Python 允许创建空类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class Empty:</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p>可以看到，如果一个类没有任何类属性和类方法，那么可以直接用 pass 关键字作为类体即可。<strong>但在实际应用中，很少会创建空类，因为空类没有任何实际意义</strong>。</p><h4 id="init-类构造方法-构造函数"><a href="#init-类构造方法-构造函数" class="headerlink" title="init()类构造方法(构造函数)"></a><strong>init</strong>()类构造方法(构造函数)</h4><p>在创建类时，我们可以手动添加一个 <strong>init</strong>() 方法，该方法是一个特殊的类实例方法，称为构造方法（或构造函数）。</p><p>构造方法用于创建对象时使用，每当创建一个类的实例对象时，Python 解释器都会自动调用它。<br>Python 类中，手动添加构造方法的语法格式：</p><p>def <strong>init</strong>(self,…):<br>    代码块</p><p>注意，此方法的方法名中，开头和结尾各有 2 个下划线，且中间不能有空格</p><p><strong>init</strong>() <strong>方法可以包含多个参数，但必须包含一个名为 self 的参数，且必须作为第一个参数</strong>。<br>也就是说，类的构造方法最少也要有一个 self 参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class TheFirstDemo:</span><br><span class="line">    &#x27;&#x27;&#x27;这是一个学习Python定义的第一个类&#x27;&#x27;&#x27;</span><br><span class="line">    #构造方法</span><br><span class="line">    def __init__(self):</span><br><span class="line">        print(&quot;调用构造方法&quot;)</span><br><span class="line">    def say(self, content):</span><br><span class="line">        print(content)</span><br><span class="line">    add= 10</span><br><span class="line">zhangsan = TheFirstDemo()</span><br></pre></td></tr></table></figure><p>注意，即便不手动为类添加任何构造方法，Python 也会自动为类添加一个仅包含 self 参数的构造方法。</p><p>仅包含 self 参数的 <strong>init</strong>() 构造方法，又称为类的默认构造方法。</p><p>zhangsan &#x3D; TheFirstDemo()<br>这行代码的含义是创建一个名为 zhangsan 的 TheFirstDemo 类对象</p><p>在 <strong>init</strong>() 构造方法中，<strong>除了 self 参数外，还可以自定义一些参数，参数之间使用逗号“,”进行分割</strong>。<br>例如，下面的代码在创建 <strong>init</strong>() 方法时，额外指定了 2 个参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class TheFirstDemo:</span><br><span class="line">    &#x27;&#x27;&#x27;这是一个学习Python定义的第一个类&#x27;&#x27;&#x27;</span><br><span class="line">    #构造方法</span><br><span class="line">    def __init__(self):</span><br><span class="line">        print(&quot;调用构造方法&quot;)</span><br><span class="line">zhangsan = TheFirstDemo()</span><br></pre></td></tr></table></figure><p>由于创建对象时会调用类的构造方法，<br>如果构造函数有多个参数时，需要手动传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class TheFirstDemo:</span><br><span class="line">    &#x27;&#x27;&#x27;这是一个学习Python定义的第一个类&#x27;&#x27;&#x27;</span><br><span class="line">    #构造方法</span><br><span class="line">    def __init__(self,nihao):</span><br><span class="line">        print(&quot;调用构造方法&quot;)</span><br><span class="line">        print(nihao)</span><br><span class="line">zhangsan = TheFirstDemo(&quot;nihao&quot;)</span><br></pre></td></tr></table></figure><p>self 不需要手动传递参数。</p><h4 id="Python类对象的创建和使用"><a href="#Python类对象的创建和使用" class="headerlink" title="Python类对象的创建和使用"></a>Python类对象的创建和使用</h4><p>创建类对象的过程，又称为类的实例化。(c++&#x2F;java都是)</p><h5 id="Python类的实例化"><a href="#Python类的实例化" class="headerlink" title="Python类的实例化"></a>Python类的实例化</h5><p>对已定义好的类进行实例化，其语法格式：</p><p><strong>类名(参数)</strong></p><p>定义类时，如果没有手动添加 <strong>init</strong>() 构造方法，又或者添加的 <strong>init</strong>() 中仅有一个 self 参数，则创建类对象时的参数可以省略不写。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class CLanguage :</span><br><span class="line">    name = &quot;漂亮鬼的个人博客&quot;</span><br><span class="line">    add = &quot;https://xiaoyangzst.vercel.app/&quot;</span><br><span class="line">    def __init__(self,name,add):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.add = add</span><br><span class="line">        print(name,&quot;网址为：&quot;,add)</span><br><span class="line">    def say(self, content):</span><br><span class="line">        print(content)</span><br><span class="line">#将该CLanguage对象赋给clanguage变量</span><br><span class="line">clanguage = CLanguage(&quot;漂亮鬼的个人博客&quot;,&quot;https://xiaoyangzst.vercel.app/&quot;)</span><br></pre></td></tr></table></figure><p>由于构造方法除 self 参数外，还包含 2 个参数，且这 2 个参数没有设置默认参数，因此在实例化类对象时，需要传入相应的 name 值和 add 值（self 参数是特殊参数，不需要手动传值，Python 会自动传给它值）<br>类变量和实例变量：<br>定义在各个类方法之外（包含在类中）的变量为类变量（或者类属性）<br>定义在类方法中的变量为实例变量（或者实例属性）</p><h5 id="Python类对象的使用"><a href="#Python类对象的使用" class="headerlink" title="Python类对象的使用"></a>Python类对象的使用</h5><p>定义的类只有进行实例化，也就是使用该类创建对象之后，才能得到利用。总的来说，实例化后的类对象可以执行以下操作：<br><strong>访问或修改类对象具有的实例变量，甚至可以添加新的实例变量或者删除已有的实例变量</strong>；（注意操作的对象是实例变量）<br>调用类对象的方法，包括调用现有的方法，以及给类对象动态添加方法。</p><h5 id="类对象访问变量或方法"><a href="#类对象访问变量或方法" class="headerlink" title="类对象访问变量或方法"></a>类对象访问变量或方法</h5><p>使用已创建好的类对象访问类中实例变量的语法格式：</p><p>类对象名.变量名</p><p>使用类对象调用类中方法的语法格式：</p><p>对象名.方法名(参数)</p><p>注意，对象名和变量名以及方法名之间用点 “.” 连接。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class CLanguage :</span><br><span class="line">    name = &quot;漂亮鬼的个人博客&quot;</span><br><span class="line">    add = &quot;https://xiaoyangzst.vercel.app/&quot;</span><br><span class="line">    def __init__(self,name,add):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.add = add</span><br><span class="line">        print(name,&quot;网址为：&quot;,add)</span><br><span class="line">    def say(self, content):</span><br><span class="line">        print(content)</span><br><span class="line">#将该CLanguage对象赋给clanguage变量</span><br><span class="line">clanguage = CLanguage(&quot;漂亮鬼的个人博客&quot;,&quot;https://xiaoyangzst.vercel.app/&quot;)</span><br><span class="line">#输出name和add实例变量的值</span><br><span class="line">print(clanguage.name,clanguage.add)</span><br><span class="line"></span><br><span class="line">#修改实例变量的值</span><br><span class="line">clanguage.name=&quot;Python&quot;</span><br><span class="line">clanguage.add=&quot;https://xiaoyangzst.vercel.app/&quot;</span><br><span class="line"></span><br><span class="line">#调用clanguage的say()方法</span><br><span class="line">clanguage.say(&quot;人生苦短，我用Python&quot;)</span><br><span class="line">不用给self参数传值</span><br><span class="line"></span><br><span class="line">#再次输出name和add的值</span><br><span class="line">print(clanguage.name,clanguage.add)</span><br></pre></td></tr></table></figure><h5 id="给类对象动态添加-x2F-删除变量"><a href="#给类对象动态添加-x2F-删除变量" class="headerlink" title="给类对象动态添加&#x2F;删除变量"></a>给类对象动态添加&#x2F;删除变量</h5><p>Python 支持为已创建好的对象动态增加 <strong>实例变量</strong>，方法也很简单</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#为clanguage对象增加一个money实例变量</span><br><span class="line">clanguage.money= 159.9</span><br><span class="line">print(clanguage.money)</span><br></pre></td></tr></table></figure><p>通过直接增加一个新的实例变量并为其赋值，就成功地为 clanguage 对象添加了 money 变量。</p><p>动态删除,使用 del 语句即可实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#删除新添加的 money 实例变量</span><br><span class="line">del clanguage.money</span><br><span class="line">#再次尝试输出 money，此时会报错</span><br><span class="line">print(clanguage.money)</span><br></pre></td></tr></table></figure><h5 id="给类对象动态添加方法"><a href="#给类对象动态添加方法" class="headerlink" title="给类对象动态添加方法"></a>给类对象动态添加方法</h5><p>Python 也允许为对象动态增加方法。以前面的 Clanguage 类为例，由于其内部只包含一个 say() 方法，因此该类实例化出的 clanguage 对象也只包含一个 say() 方法。但其实，我们还可以为 clanguage 对象动态添加其它方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#先定义一个函数</span><br><span class="line">def info(self):</span><br><span class="line">    print(&quot;---info函数---&quot;, self)</span><br><span class="line">#使用info对clanguage的foo方法赋值（动态绑定方法）</span><br><span class="line">clanguage.foo = info</span><br><span class="line">#Python不会自动将调用者绑定到第一个参数，</span><br><span class="line">#因此程序需要手动将调用者绑定为第一个参数</span><br><span class="line">clanguage.foo(clanguage)  # ①</span><br><span class="line">#这是俩种添加方法的方式</span><br><span class="line">#使用lambda表达式为clanguage对象的bar方法赋值（动态绑定方法）</span><br><span class="line">clanguage.bar = lambda self: print(&#x27;--lambda表达式--&#x27;, self)</span><br><span class="line">clanguage.bar(clanguage) # ②</span><br></pre></td></tr></table></figure><p>上面的代码分别使用函数、lambda 表达式为 clanguage 对象动态增加了方法，但对于动态增加的方法，Python 不会自动将方法调用者绑定到它们的第一个参数，因此程序必须手动为第一个参数传入参数值，如上面程序中 ① 号、② 号代码所示。</p>]]></content>
      
      
      <categories>
          
          <category> python提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tkinter单选框和多选框按钮</title>
      <link href="/post/d6a06432.html"/>
      <url>/post/d6a06432.html</url>
      
        <content type="html"><![CDATA[<h5 id="Tkinter单选框和多选框按钮"><a href="#Tkinter单选框和多选框按钮" class="headerlink" title="Tkinter单选框和多选框按钮"></a>Tkinter单选框和多选框按钮</h5><p>单选框按钮控件（Radiobutton），同样允许用户选择具体的选项值，不过与 Listbox 相比，单选按钮控件仅允许用户选择单一的选项值，各个选项值之间是互斥的关系，因此只有一个选项可以被用户选择。<br><strong>Radiobutton 控件通常都是成组出现的，所有控件都使用相同的变量</strong></p><p><strong>Radiobutton 可以包含文本或图像，每一个按钮都可以与一个 Python 函数相关联。</strong></p><p>当按钮被按下时，对应的函数会被执行。这里需要注意的是，单选按钮控件仅能显示单一字体的文本，但文本可以跨越多行，除此之外，您还可以为个别的字符添加下划线。Radiobutton 除常用的共有属性之外，还具有一些其他属性</p><p>activebackground<br>设置当 Radiobutton 处于活动状态（通过 state 选项设置状态）的背景色，默认值由系统指定</p><p>compound</p><ol><li>默认值为 None，控制 Radiobutton 中文本和图像的混合模式，默认情况下，如果有指定位图或图片，则不显示文本</li><li>如果该选项设置为 “center”，文本显示在图像上（文本重叠图像）</li><li>设置为 “bottom”，”left”，”right” 或 “top”，那么图像显示在文本的旁边，比如如”bottom”，则显示图像在文本的下方。</li></ol><p>disabledforeground<br>指定当 Radiobutton 不可用的时的前景色颜色，默认由系统指定</p><p>indicatoron</p><ol><li>该参数表示选项前面的小圆圈是否被绘制，默认为 True，即绘制；</li><li>如果设置为 False，则会改变单选按钮的样式，当点击时按钮会变成 “sunken”（凹陷），再次点击变为 “raised”（凸起）</li></ol><p>selectcolor<br>设置当 Radiobutton 为选中状态的时候显示的图片；如果没有指定 image 选项，该选项被忽略</p><p>takefocus<br>如果是 True，该组件接受输入焦点，默认为 False</p><p>variable<br>表示与 Radiobutton 控件关联的变量，注意同一组中的所有按钮的 variable 选项应该都指向同一个变量，通过将该变量与 value 选项值对比，可以判断用户选中了哪个按钮。</p><p>Radiobutton 控件的常用方法</p><p>deselect()<br>取消该按钮的选中状态</p><p>flash()<br>刷新 Radiobutton 控件，该方法将重绘 Radiobutton控件若干次（即在”active” 和 “normal” 状态间切换）</p><p>invoke()</p><ol><li>调用 Radiobutton 中 command 参数指定的函数，并返回函数的返回值</li><li>如果 Radiobutton 控件的 state(状态) 是 “disabled” （不可用）或没有指定 command 选项，则该方法无效</li></ol><p>select()<br>将 Radiobutton 控件设置为选中状态</p><p>Radiobutton 控件用来解决多选一的问题，它通常是成组出现的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import tkinter as tk</span><br><span class="line"></span><br><span class="line">window = tk.Tk()</span><br><span class="line">window.geometry(&#x27;400x180&#x27;)</span><br><span class="line"># IntVar() 用于处理整数类型的变量</span><br><span class="line">v = tk.IntVar()</span><br><span class="line"># 根据单选按钮的 value 值来选择相应的选项</span><br><span class="line">v.set(0)</span><br><span class="line"># 使用 variable 参数来关联 IntVar() 的变量 v</span><br><span class="line">tk.Radiobutton(window, text=&quot;C语言中文网&quot;, variable=v, value=0).pack(anchor = &#x27;w&#x27;)</span><br><span class="line">tk.Radiobutton(window, text=&quot;CSDN平台&quot;, variable=v, value=2).pack(anchor = &#x27;w&#x27;)</span><br><span class="line">tk.Radiobutton(window, text=&quot;知乎平台&quot;, variable=v, value=3).pack(anchor = &#x27;w&#x27;)</span><br><span class="line">tk.Radiobutton(window, text=&quot;牛客网平台&quot;, variable=v, value=4).pack(anchor = &#x27;w&#x27;)</span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import tkinter as tk</span><br><span class="line"></span><br><span class="line">window = tk.Tk()</span><br><span class="line">window.geometry(&#x27;400x180&#x27;)</span><br><span class="line">site = [(&#x27;美团外卖&#x27;,1),</span><br><span class="line">        (&#x27;饿了么外卖&#x27;,2),</span><br><span class="line">        (&#x27;美团闪购&#x27;,3),</span><br><span class="line">        (&#x27;艾奇外卖&#x27;,4)]</span><br><span class="line"># IntVar() 用于处理整数类型的变量</span><br><span class="line">v = tk.IntVar()</span><br><span class="line">for name, num in site:</span><br><span class="line">    radio_button = tk.Radiobutton(window,text = name, variable = v,value =num)</span><br><span class="line">    radio_button.pack(anchor =&#x27;w&#x27;)</span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import tkinter as tk</span><br><span class="line">def select():</span><br><span class="line">    dict = &#123;1:&#x27;C语言中文网&#x27;,2:&#x27;菜鸟教程&#x27;,3:&#x27;W3SCHOOL&#x27;,4:&#x27;微学苑&#x27;&#125;</span><br><span class="line">    strings = &#x27;您选择了&#x27; + dict.get(v.get()) + &#x27;，祝您学习愉快&#x27;</span><br><span class="line">    lable.config(text = strings)</span><br><span class="line">window = tk.Tk()</span><br><span class="line">window.geometry(&#x27;400x180&#x27;)</span><br><span class="line">lable = tk.Label(window,font=(&#x27;微软雅黑&#x27;, &#x27;15&#x27;,&#x27;bold&#x27;),fg=&#x27;#43CD80&#x27;)</span><br><span class="line">lable.pack(side =&#x27;bottom&#x27;)</span><br><span class="line">site = [(&#x27;C语言中文网&#x27;,1),</span><br><span class="line">        (&#x27;菜鸟教程&#x27;,2),</span><br><span class="line">        (&#x27;W3SCHOOL&#x27;,3),</span><br><span class="line">        (&#x27;微学苑&#x27;,4)]</span><br><span class="line"># IntVar() 用于处理整数类型的变量</span><br><span class="line">v = tk.IntVar()</span><br><span class="line">for name, num in site:</span><br><span class="line">    radio_button = tk.Radiobutton(window,text = name, variable = v,value =num,command = select,indicatoron = False)</span><br><span class="line">    radio_button.pack(anchor =&#x27;w&#x27;)</span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><p>建议都自己手动敲一下这些代码，直接复制粘贴效果不大</p>]]></content>
      
      
      <categories>
          
          <category> python--tkinter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tkinter_Combobox控件</title>
      <link href="/post/fe65fb3c.html"/>
      <url>/post/fe65fb3c.html</url>
      
        <content type="html"><![CDATA[<h5 id="Combobox控件"><a href="#Combobox控件" class="headerlink" title="Combobox控件"></a>Combobox控件</h5><p>通过前面内容的介绍我们知道 Listbox 是一个供用户从列表项中选择相应条目的控件。但在有些情况下，比如列表的项目过多时，若使用列表控件，列出所有选项就会显得界面格外臃肿，这时就需要用到 Combobox 控件，也就是下拉菜单控件（或称复合框），该控件是列表控件的改进版，具有更加灵活的界面，因此其应用场景相比于前者要更加广泛。</p><p><strong>不过需要注意的是 Combobox 并不包含在 tkinter 模块中，而是包含在tkinter.ttk子模块中，因此若想使用 Combobox 控件，需要使用下面的导包方式</strong>：</p><p>from tkinter import ttk</p><p>语法格式：</p><p>cbox&#x3D;Combobox(窗口对象,[参数列表])</p><p>Combobox 控件在形式虽然与列表控件存在不同，但它们的本质是相同，因此属性和方法是<strong>通用</strong>的。</p><p>对于 Combobox 控件而言，它常用的方法有两个，分别是 get() 和 current()，前者表示获取当前选中选项的内容，后者表示获取选中选项的索引值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import tkinter</span><br><span class="line">from tkinter import ttk # 导入ttk模块，下拉菜单控件位于ttk子模块中</span><br><span class="line">win = tkinter.Tk()</span><br><span class="line">win.geometry(&#x27;400x250&#x27;)</span><br><span class="line">win.resizable(0,0)</span><br><span class="line">cbox = ttk.Combobox(win)</span><br><span class="line"># 使用 grid() 来控制控件的位置</span><br><span class="line">cbox.grid(row = 1, sticky=&quot;NW&quot;)</span><br><span class="line"># 设置下拉菜单中的值</span><br><span class="line">cbox[&#x27;value&#x27;] = (&#x27;C&#x27;,&#x27;C#&#x27;,&#x27;Go&#x27;,&#x27;Python&#x27;,&#x27;Java&#x27;)</span><br><span class="line">#通过 current() 设置下拉菜单选项的默认值</span><br><span class="line">cbox.current(3)</span><br><span class="line"># 编写回调函数，绑定执行事件,向文本插入选中文本</span><br><span class="line">def func(event):</span><br><span class="line">    text.insert(&#x27;insert&#x27;,cbox.get()+&quot;\n&quot;)</span><br><span class="line"># 绑定下拉菜单事件</span><br><span class="line">cbox.bind(&quot;&lt;&lt;ComboboxSelected&gt;&gt;&quot;,func)</span><br><span class="line">text = tkinter.Text(win)</span><br><span class="line">text.grid(pady = 5)</span><br><span class="line">win.mainloop()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python--tkinter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础知识六</title>
      <link href="/post/547ff74f.html"/>
      <url>/post/547ff74f.html</url>
      
        <content type="html"><![CDATA[<h5 id="函数传递参数的方式"><a href="#函数传递参数的方式" class="headerlink" title="函数传递参数的方式"></a>函数传递参数的方式</h5><p>Python 中，根据实际参数的类型不同，函数参数的传递方式可分为 2 种，分别为值传递和引用（地址）传递：</p><p>值传递：适用于实参类型为不可变类型（字符串、数字、元组）；</p><p>引用（地址）传递：适用于实参类型为可变类型（列表，字典）,<br>函数参数进行值传递后，若形参的值发生改变，不会影响实参的值；</p><p>函数参数继续引用传递后，改变形参的值，实参的值也会一同改变。<br>例如，定义一个名为 demo 的函数，分别为传入一个字符串类型的变量（代表值传递）和列表类型的变量（代表引用传递）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def nihao(str):</span><br><span class="line">    str +=str</span><br><span class="line">    print(str)</span><br><span class="line">str1 = &quot;213&quot;</span><br><span class="line">nihao(str1)</span><br><span class="line">print(&#x27;值传递：%s&#x27; %str1)</span><br><span class="line">list = [1,2,3]</span><br><span class="line">nihao(list)</span><br><span class="line">print(&#x27;引用传递：%s&#x27; %list)</span><br></pre></td></tr></table></figure><h5 id="函数关键字参数及用法"><a href="#函数关键字参数及用法" class="headerlink" title="函数关键字参数及用法"></a>函数关键字参数及用法</h5><p>关键字参数是指使用形式参数的名字来确定输入的参数值。<br><strong>通过此方式指定函数实参时，不再需要与形参的位置完全一致，只要将参数名写正确即可</strong></p><p>可以看到，在调用有参函数时，既可以根据位置参数来调用，也可以使用关键字参数（程序中第 8 行）来调用。在使用关键字参数调用时，可以任意调换参数传参的位置。<br>当然，还可以像第 7 行代码这样，使用位置参数和关键字参数混合传参的方式。但需要注意，混合传参时关键字参数必须位于所有的位置参数之后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def dis_str(str1,str2):</span><br><span class="line">    print(&quot;str1:&quot;,str1)</span><br><span class="line">    print(&quot;str2:&quot;,str2)</span><br><span class="line">#位置参数</span><br><span class="line">dis_str(&quot;http://c.biancheng.net/python/&quot;,&quot;http://c.biancheng.net/shell/&quot;)</span><br><span class="line">#关键字参数</span><br><span class="line">dis_str(&quot;http://c.biancheng.net/python/&quot;,str2=&quot;http://c.biancheng.net/shell/&quot;)</span><br><span class="line">dis_str(str2=&quot;http://c.biancheng.net/python/&quot;,str1=&quot;http://c.biancheng.net/shell/&quot;)</span><br></pre></td></tr></table></figure><h5 id="函数默认参数设置"><a href="#函数默认参数设置" class="headerlink" title="函数默认参数设置"></a>函数默认参数设置</h5><p>Python 定义带有默认值参数的函数，<br>语法格式：<br>def 函数名(…，形参名，形参名&#x3D;默认值)：<br>    代码块</p><pre><code>**注意**：在使用此格式定义函数时，指定有默认值的形式参数必须在所有没默认值参数的最后，否则会产生语法错误。</code></pre><p>当然在调用 dis_str() 函数时，也可以给所有的参数传值，这时即便 str2 有默认值，它也会优先使用传递给它的新值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#str1没有默认参数，str2有默认参数</span><br><span class="line">def dis_str(str1,str2 = &quot;http://c.biancheng.net/python/&quot;):</span><br><span class="line">    print(&quot;str1:&quot;,str1)</span><br><span class="line">    print(&quot;str2:&quot;,str2)</span><br><span class="line">dis_str(&quot;http://c.biancheng.net/shell/&quot;)</span><br><span class="line">dis_str(&quot;http://c.biancheng.net/java/&quot;,&quot;http://c.biancheng.net/golang/&quot;)</span><br></pre></td></tr></table></figure><p>但如果使用 Python 提供的内置函数，又或者其它第三方提供的函数，怎么知道哪些参数有默认值呢？<br>可以使用<br>“函数名.__defaults__”查看函数的默认值参数的当前值，其返回值是一个元组。以dis_str() 函数为例，在其基础上，执行如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(dis_str.__defaults__)</span><br></pre></td></tr></table></figure><h5 id="函数返回多个值的方法"><a href="#函数返回多个值的方法" class="headerlink" title="函数返回多个值的方法"></a>函数返回多个值的方法</h5><p>实际上 Python 也是如此，只不过 Python 函数能以返回列表或者元组的方式，将要返回的多个值保存到序列中，从而间接实现返回多个值的目的。<br>因此，实现 Python 函数返回多个值，有以下 2 种方式：</p><p>在函数中，提前将要返回的多个值存储到一个列表或元组中，然后函数返回该列表或元组；</p><p>函数直接返回多个值，之间用逗号（ , ）分隔，Python 会自动将多个值封装到一个元组中，其返回值仍是一个元组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def nihao(str):</span><br><span class="line">    a = 1</span><br><span class="line">    b =2</span><br><span class="line">    return a,b,str</span><br><span class="line">print(nihao (3))</span><br></pre></td></tr></table></figure><h5 id="将局部变量变成全局变量"><a href="#将局部变量变成全局变量" class="headerlink" title="将局部变量变成全局变量"></a>将局部变量变成全局变量</h5><p>在函数体内定义全局变量。使用 global 关键字对变量进行修饰后，该变量就会变为全局变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def text():</span><br><span class="line">    global add</span><br><span class="line">    add= &quot;http://c.biancheng.net/java/&quot;</span><br><span class="line">    print(&quot;函数体内访问：&quot;,add)</span><br><span class="line">text()</span><br><span class="line">print(&#x27;函数体外访问：&#x27;,add)</span><br></pre></td></tr></table></figure><h5 id="获取指定作用域范围中的变量"><a href="#获取指定作用域范围中的变量" class="headerlink" title="获取指定作用域范围中的变量"></a>获取指定作用域范围中的变量</h5><p>在一些特定场景中，我们可能需要获取某个作用域内（全局范围内或者局部范围内）所有的变量，Python 提供了以下 3 种方式：</p><ol><li><p>globals()函数<br>globals() 函数为 Python 的内置函数，它可以返回一个包含全局范围内所有变量的字典，该字典中的每个键值对，键为变量名，值为该变量的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#全局变量</span><br><span class="line">Pyname = &quot;Python教程&quot;</span><br><span class="line">def text():#局部变量</span><br><span class="line">    Shename = &quot;shell教程&quot;</span><br><span class="line">    print(globals())</span><br></pre></td></tr></table></figure></li><li><p>locals()函数<br>locals() 函数也是 Python 内置函数之一，通过调用该函数，我们可以得到一个包含当前作用域内所有变量的字典。<br>这里所谓的“当前作用域”指的是，在函数内部调用 locals() 函数，会获得包含所有局部变量的字典；而在全局范文内调用 locals() 函数，其功能和 globals() 函数相同。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#全局变量</span><br><span class="line">Pyname = &quot;Python教程&quot;</span><br><span class="line">def text():#局部变量</span><br><span class="line">    Shename = &quot;shell教程&quot;</span><br><span class="line">    print(&quot;函数内部的 locals:&quot;)</span><br><span class="line">    print(locals())</span><br><span class="line">text()</span><br><span class="line">print(&quot;函数外部的 locals:&quot;)</span><br><span class="line">print(locals())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，当使用 locals() 函数获得所有局部变量组成的字典时，可以向 <strong>globals() 函数那样，通过指定键访问对应的变量值，但无法对变量值做修改</strong></p></li></ol><h5 id="局部变量和全局变量同名"><a href="#局部变量和全局变量同名" class="headerlink" title="局部变量和全局变量同名"></a>局部变量和全局变量同名</h5><p>当函数内部的局部变量和函数外部的全局变量同名时，在函数内部，局部变量会“遮蔽”同名的全局变量。</p><h5 id="lambda表达式（匿名函数）及用法"><a href="#lambda表达式（匿名函数）及用法" class="headerlink" title="lambda表达式（匿名函数）及用法"></a>lambda表达式（匿名函数）及用法</h5><p>lambda 表达式，又称匿名函数，常用来表示内部仅包含 1 行表达式的函数。如果一个函数的函数体仅有 1 行表达式，则该函数就可以用 lambda 表达式来代替。<br>语法格式：name &#x3D; lambda [list] : 表达式<br>其中，定义 lambda 表达式，必须使用 lambda 关键字；[list] 作为可选参数，等同于定义函数是指定的参数列表；value 为该表达式的名称。</p><p>该语法格式转换成普通函数的形式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def name(list):</span><br><span class="line">    return 表达式</span><br><span class="line">name(list)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add = lambda x,y:x+y</span><br><span class="line">print(add(3,4))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础知识五</title>
      <link href="/post/52663f4c.html"/>
      <url>/post/52663f4c.html</url>
      
        <content type="html"><![CDATA[<h5 id="Python字符串对齐方法（ljust-、rjust-和center"><a href="#Python字符串对齐方法（ljust-、rjust-和center" class="headerlink" title="Python字符串对齐方法（ljust()、rjust()和center()"></a>Python字符串对齐方法（ljust()、rjust()和center()</h5><h6 id="ljust-方法"><a href="#ljust-方法" class="headerlink" title="ljust()方法"></a>ljust()方法</h6><p>ljust() 方法的功能是向指定字符串的右侧填充指定字符，从而达到左对齐文本的目的。<br>格式如下：S.ljust(width[, fillchar])</p><p>S：表示要进行填充的字符串<br>width：表示包括 S 本身长度在内，字符串要占的总长度；<br>fillchar：作为可选参数，用来指定填充字符串时所用的字符，默认情况使用空格。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n = &quot;xiaoyang&quot;</span><br><span class="line">print(n.ljust(15,&quot;1&quot;))</span><br></pre></td></tr></table></figure><h6 id="rjust-方法"><a href="#rjust-方法" class="headerlink" title="rjust()方法"></a>rjust()方法</h6><p>rjust() 和 ljust() 方法类似，唯一的不同在于，rjust() 方法是向字符串的左侧填充指定字符，从而达到右对齐文本的目的。<br>格式如下：S.rjust(width[, fillchar])<br>各个参数的含义和 ljust() 完全相同</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n = &quot;xiaoyang&quot;</span><br><span class="line">print(n.rjust(15,&quot;1&quot;))</span><br></pre></td></tr></table></figure><h6 id="center-方法"><a href="#center-方法" class="headerlink" title="center()方法"></a>center()方法</h6><p>center() 字符串方法与 ljust() 和 rjust() 的用法类似，但它让文本居中，而不是左对齐或右对齐。<br>格式如下：S.center(width[, fillchar])<br>其中各个参数的含义和 ljust()、rjust() 方法相同。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n = &quot;xiaoyang&quot;</span><br><span class="line">print(n.center(15,&quot;1&quot;))</span><br></pre></td></tr></table></figure><h5 id="startswith-方法"><a href="#startswith-方法" class="headerlink" title="startswith()方法"></a>startswith()方法</h5><p>startswith() 方法用于检索字符串是否以指定字符串开头，如果是返回 True；反之返回 False。<br>语法格式： str.startswith(sub[,start[,end]])</p><p>str：表示原字符串；<br>sub：要检索的子串；<br>start：指定检索开始的起始位置索引，如果不指定，则默认从头开始检索；<br>end：指定检索的结束位置索引，如果不指定，则默认一直检索在结束。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = &quot;xiaoyang&quot;</span><br><span class="line">print(a.startswith(&quot;xiao&quot;))</span><br></pre></td></tr></table></figure><h5 id="endswith-方法"><a href="#endswith-方法" class="headerlink" title="endswith()方法"></a>endswith()方法</h5><p>endswith() 方法用于检索字符串是否以指定字符串结尾，如果是则返回 True；反之则返回 False。<br>语法格式：<br>str.endswith(sub[,start[,end]])<br>str：表示原字符串；<br>sub：表示要检索的字符串；<br>start：指定检索开始时的起始位置索引（字符串第一个字符对应的索引值为 0），如果不指定，默认从头开始检索。<br>end：指定检索的结束位置索引，如果不指定，默认一直检索到结束。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = &quot;xiaoyang&quot;</span><br><span class="line">print(a.endwith(&quot;xiao&quot;))</span><br></pre></td></tr></table></figure><h5 id="title-方法"><a href="#title-方法" class="headerlink" title="title()方法"></a>title()方法</h5><p>title() 方法用于将字符串中每个单词的首字母转为大写，其他字母全部转为小写，转换完成后，此方法会返回转换得到的字符串。如果字符串中没有需要被转换的字符，此方法会将字符串原封不动地返回。<br>语法格式：str.title()<br>str 表示要进行转换的字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str = &quot;I LIKE C&quot;</span><br><span class="line">print(str.title())</span><br></pre></td></tr></table></figure><h5 id="lower-方法"><a href="#lower-方法" class="headerlink" title="lower()方法"></a>lower()方法</h5><p>lower() 方法用于将字符串中的所有大写字母转换为小写字母，转换完成后，该方法会返回新得到的字符串。如果字符串中原本就都是小写字母，则该方法会返回原字符串。<br>语法格式：str.lowerr()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str = &quot;I LIKE C&quot;</span><br><span class="line">print(str.lower())</span><br></pre></td></tr></table></figure><h5 id="upper-方法"><a href="#upper-方法" class="headerlink" title="upper()方法"></a>upper()方法</h5><p>upper() 的功能和 lower() 方法恰好相反，它用于将字符串中的所有小写字母转换为大写字母，和以上两种方法的返回方式相同，即如果转换成功，则返回新字符串；反之，则返回原字符串。<br>语法格式：str.upper()<br>str 表示要进行转换的字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str = &quot;i like you&quot;</span><br><span class="line">print(str.upper())</span><br></pre></td></tr></table></figure><h5 id="strip-lstrip-rstrip"><a href="#strip-lstrip-rstrip" class="headerlink" title="strip() , lstrip(), rstrip()"></a>strip() , lstrip(), rstrip()</h5><p>删除字符串<strong>前后</strong>（左右两侧）的空格或特殊字符。</p><p>lstrip()：删除字符串前面（左边）的空格或特殊字符。</p><p>rstrip()：删除字符串后面（右边）的空格或特殊字符。<br>注意，Python 的 str 是不可变的（不可变的意思是指，字符串一旦形成，它所包含的字符序列就不能发生任何改变），因此这三个<strong>方法只是返回字符串前面或后面空白被删除之后的副本，并不会改变字符串本身</strong>。</p><h6 id="strip-方法"><a href="#strip-方法" class="headerlink" title="strip()方法"></a>strip()方法</h6><p>strip() 方法用于删除字符串左右两个的空格和特殊字符</p><p>语法格式为： str.strip([chars])<br>str 表示原字符串<br>[chars] 用来指定要删除的字符，可以同时指定多个，如果不手动指定，则默认会删除空格以及制表符、回车符、换行符等特殊字符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str = &quot;                 I LIKE C &quot;</span><br><span class="line">print(str.strip())</span><br></pre></td></tr></table></figure><p>分析运行结果不难看出，通过 strip() 确实能够删除字符串左右两侧的空格和特殊字符，但并没有真正改变字符串本身 </p><h6 id="lstrip-方法"><a href="#lstrip-方法" class="headerlink" title="lstrip()方法"></a>lstrip()方法</h6><p>lstrip() 方法用于去掉字符串左侧的空格和特殊字符。<br>语法格式：str.lstrip([chars])<br>str 和 chars 参数的含义，分别同 strip() 语法格式中的 str 和 chars 完全相同。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str = &quot;                 I LIKE C &quot;</span><br><span class="line">print(str.ltrip())</span><br></pre></td></tr></table></figure><h6 id="rstrip-方法"><a href="#rstrip-方法" class="headerlink" title=".rstrip()方法"></a>.rstrip()方法</h6><p>rstrip() 方法用于删除字符串右侧的空格和特殊字符<br>语法格式： str.rstrip([chars])<br>str 和 chars 参数的含义和前面 2 种方法语法格式中的参数完全相同。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str = &quot;                 I LIKE C     &quot;</span><br><span class="line">print(str.rstrip())</span><br></pre></td></tr></table></figure><h5 id="encode-方法"><a href="#encode-方法" class="headerlink" title="encode()方法"></a>encode()方法</h5><p>encode() 方法为字符串类型（str）提供的方法，用于将 str 类型转换成 bytes 类型，这个过程也称为“编码”。<br>语法格式：<br>str.encode([encoding&#x3D;”utf-8”][,errors&#x3D;”strict”])</p><p>注意，格式中用 [] 括起来的参数为可选参数，也就是说，在使用此方法时，可以使用 [] 中的参数，也可以不使用。</p><img src="/post/52663f4c/35.png" class title="This is an image"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str = &quot;xiaoyang你好&quot;</span><br><span class="line">print(str.encode())</span><br></pre></td></tr></table></figure><h5 id="decode-方法"><a href="#decode-方法" class="headerlink" title="decode()方法"></a>decode()方法</h5><p>和 encode() 方法正好相反，decode() 方法用于将 bytes 类型的二进制数据转换为 str 类型，这个过程也称为“解码”。<br>语法格式：<br>bytes.decode([encoding&#x3D;”utf-8”][,errors&#x3D;”strict”])</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str = &quot;xiaoyang你好&quot;</span><br><span class="line">b = str.encode()</span><br><span class="line">print(b.decode())</span><br></pre></td></tr></table></figure><h5 id="dir-函数-和-help-函数"><a href="#dir-函数-和-help-函数" class="headerlink" title="dir() 函数 和 help()函数"></a>dir() 函数 和 help()函数</h5><p>用来列出某个类或者某个模块中的全部内容，包括变量、方法、函数和类等<br>它的用法为：dir(obj)</p><p>obj 表示要查看的对象。obj 可以不写，此时 dir() 会列出当前范围内的变量、方法和定义的类型。</p><p> help() 函数用来查看某个函数或者模块的帮助文档<br> 它的用法为：help(obj)<br>obj 表示要查看的对象。obj 可以不写，此时 help() 会进入帮助子程序。<br>掌握了以上两个函数，我们就可以自行查阅 Python 中所有方法、函数、变量、类的用法和功能了。</p><p><strong>使用 help() 查看某个函数的用法时，函数名后边不能带括号，例如将上面的命令写作help(str.lower())就是错误的</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def nihao( a, b):</span><br><span class="line">    &quot;&quot;&quot;输出俩个数之和&quot;&quot;&quot;</span><br><span class="line">    print(a+b)</span><br><span class="line">a1 = 1</span><br><span class="line">a2 = 2</span><br><span class="line">nihao(a1,a2)</span><br><span class="line">print(dir(nihao))</span><br><span class="line">print()</span><br><span class="line">print(help(nihao))</span><br></pre></td></tr></table></figure><h5 id="空语句-pass"><a href="#空语句-pass" class="headerlink" title="空语句 pass"></a>空语句 pass</h5><p>pass 是 Python 中的关键字，用来让解释器跳过此处，什么都不做。<br>就像上面的情况，有时候程序需要占一个位置，或者放一条语句，但又不希望这条语句做任何事情，此时就可以通过 pass 语句来实现。使用 pass 语句比使用注释更加优雅。</p><h5 id="assert断言函数及用法"><a href="#assert断言函数及用法" class="headerlink" title="assert断言函数及用法"></a>assert断言函数及用法</h5><p>assert 语句通常用于检查用户的输入是否符合规定<br>当 assert 语句后的表达式值为真时，程序继续执行；反之，程序停止执行，并报 AssertionError 错误</p><p>语法格式：assert 条件表达式 [,描述信息]</p><p>[,描述信息] 作为可选参数，用于对条件表达式可能产生的异常进行描述</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a= 2</span><br><span class="line">b = 3</span><br><span class="line">assert a&lt;b , &quot;error&quot;</span><br></pre></td></tr></table></figure><h5 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h5><p>语法格式如下：<br>for 迭代变量 in 字符串|列表|元组|字典|集合：代码块</p><p>格式中，迭代变量用于存放从序列类型变量中读取出来的元素，<br>所以一般不会在循环中对迭代变量手动赋值；代码块指的是具有相同缩进格式的多行代码（和 while 一样），由于和循环结构联用，因此代码块又称为循环体。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for i in  range(1,20):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><h5 id="for-循环遍历字典"><a href="#for-循环遍历字典" class="headerlink" title="for 循环遍历字典"></a>for 循环遍历字典</h5><p>在使用 for 循环遍历字典时，经常会用到和字典相关的 3 个方法，即 items()、keys() 以及 values()。如果使用 for 循环直接遍历字典，则迭代变量会被先后赋值为每个键值对中的键。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;&quot;1&quot;:&quot;nihao&quot;, &quot;2&quot;: &quot;hello&quot;, &quot;3&quot;:&quot;Hi&quot;&#125;</span><br><span class="line">for i in  a.items():</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><p>Python 中，无论是 while 循环还是 for 循环，其后都可以紧跟着一个 else 代码块，它的作用是当循环条件为 False 跳出循环时，程序会最先执行 else 代码块中的代码。</p><h5 id="2-种强制离开当前循环体的办法：Continue语句和break语句"><a href="#2-种强制离开当前循环体的办法：Continue语句和break语句" class="headerlink" title="2 种强制离开当前循环体的办法：Continue语句和break语句"></a>2 种强制离开当前循环体的办法：Continue语句和break语句</h5><p>使用 continue 语句，可以跳过执行本次循环体中剩余的代码，转而执行下一次的循环。只用 break 语句，可以完全终止当前循环。</p><h5 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h5><p>列表推导式可以利用 range 区间、元组、列表、字典和集合等数据类型，快速生成一个满足指定需求的列表。<br>语法格式：[表达式 for 迭代变量 in 可迭代对象 [if 条件表达式] ]</p><p>[if 条件表达式] 不是必须的，可以使用，也可以省略。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [x**x for x in range(1,5)]</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><h5 id="元组推导式"><a href="#元组推导式" class="headerlink" title="元组推导式"></a>元组推导式</h5><p>元组推导式可以利用 range 区间、元组、列表、字典和集合等数据类型，快速生成一个满足指定需求的元组。<br>语法格式：(表达式 for 迭代变量 in 可迭代对象 [if 条件表达式] )</p><p>用 [] 括起来的部分，可以使用，也可以省略。</p><p>如果我们想要使用元组推导式获得新元组或新元组中的元素，有以下三种方式：</p><ol><li><p>使用 tuple() 函数，可以直接将生成器对象转换成元组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = (x for x in range(1,10))</span><br><span class="line">print(tuple(a))</span><br></pre></td></tr></table></figure><p>要使用tuple函数不然输出的是a的一段地址</p></li><li><p>直接使用 for 循环遍历生成器对象，可以获得各个元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = (x for x in range(1,10))</span><br><span class="line">for i in a:</span><br><span class="line">    print(i,end=&#x27; &#x27;)</span><br><span class="line">print(tuple(a))</span><br></pre></td></tr></table></figure></li><li><p>使用 <strong>next</strong>() 方法遍历生成器对象，也可以获得各个元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = (x for x in range(3))</span><br><span class="line">print(a.__next__())</span><br><span class="line">print(a.__next__())</span><br><span class="line">print(a.__next__())</span><br></pre></td></tr></table></figure></li></ol><h5 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h5><p>Python 中，使用字典推导式可以借助列表、元组、字典、集合以及 range 区间，快速生成符合需求的字典。<br>语法格式：{表达式 for 迭代变量 in 可迭代对象 [if 条件表达式]}</p><p>用 [] 括起来的部分，可以使用，也可以省略。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">listdemo = &#123;&quot;123&quot; : &quot;一二三&quot;, &quot;456&quot;:&quot;四五六&quot;&#125;</span><br><span class="line">newdict = &#123;key:len(key) for key in listdemo&#125;</span><br><span class="line">print(newdict)</span><br></pre></td></tr></table></figure><h5 id="集合推导式"><a href="#集合推导式" class="headerlink" title="集合推导式"></a>集合推导式</h5><p>Python中，使用集合推导式可以借助列表、元组、字典、集合以及 range 区间，快速生成符合需求的集合。</p><p>集合推导式的语法格式和字典推导式完全相同：</p><p>{ 表达式 for 迭代变量 in 可迭代对象 [if 条件表达式] }<br>其中，用 [] 括起来的部分，可以使用，也可以省略。</p><p>既然生成的是集合，那么其保存的元素必须是唯一的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setnew = &#123;i**2 for i in range(3)&#125;</span><br><span class="line">print(setnew)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础知识四</title>
      <link href="/post/4f845d09.html"/>
      <url>/post/4f845d09.html</url>
      
        <content type="html"><![CDATA[<h5 id="set集合"><a href="#set集合" class="headerlink" title="set集合"></a>set集合</h5><p><strong>Python 中的集合，和数学中的集合概念一样，用来保存不重复的元素，即集合中的元素都是唯一的，互不相同</strong>。<br>感觉集合使用的非常的少</p><p>从形式上看，和字典类似，Python 集合会将所有元素放在一对大括号 {} 中，相邻元素之间用“,”分隔，如下所示：</p><p>{element1,element2,…,elementn}<br>elementn 表示集合中的元素，个数没有限制<br>从内容上看，<strong>同一集合中，只能存储不可变的数据类型，包括整形、浮点型、字符串、元组</strong>，无法存储列表、字典、集合这些可变的数据类型，否则 Python 解释器会抛出 TypeError 错误<br>并且需要注意的是，数据必须保证是唯一的，因为集合对于每种数据元素，只会保留一份。<br>由于 Python 中的 set 集合是无序的，所以每次输出时元素的排序顺序可能都不相同。</p><h5 id="创建set集合"><a href="#创建set集合" class="headerlink" title="创建set集合"></a>创建set集合</h5><p>Python 提供了 2 种创建 set 集合的方法，分别是使用 {} 创建和使用 set() 函数将列表、元组等类型数据转换为集合。</p><p>使用 {} 创建</p><p>在 Python 中，创建 set 集合可以像列表、元素和字典一样，直接将集合赋值给变量，从而实现创建集合的目的<br>语法格式：setname &#x3D; {element1,element2,…,elementn}</p><p>setname 表示集合的名称，起名时既要符合 Python 命名规范，也要避免与 Python 内置函数重名。</p><p>set()函数创建集合</p><p>set() 函数为 Python 的内置函数，其功能是将字符串、列表、元组、range 对象等可迭代对象转换成集合<br>语法格式：setname &#x3D; set(iteration)<br>iteration 就表示字符串、列表、元组、range 对象等数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">set1 = set(&quot;c.biancheng.net&quot;)</span><br><span class="line">set2 = set([1,2,3,4,5])</span><br><span class="line">set3=set((1,2,3,4,5))</span><br><span class="line">print(&quot;set1:&quot;,set1)</span><br><span class="line">print(&quot;set2:&quot;,set2)</span><br><span class="line">print(&quot;set3:&quot;,set3)</span><br></pre></td></tr></table></figure><p>注意，如果要创建空集合，只能使用 set() 函数实现。因为直接使用一对 {}，Python 解释器会将其视为一个空字典。</p><h5 id="访问set集合元素"><a href="#访问set集合元素" class="headerlink" title="访问set集合元素"></a>访问set集合元素</h5><p>由于集合中的元素是无序的，因此无法向列表那样使用下标访问元素。Python 中，访问集合元素最常用的方法是使用循环结构，将集合中的数据逐一读取出来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;1,&#x27;c&#x27;,1,(1,2,3),&#x27;c&#x27;&#125;</span><br><span class="line">for ele in a:</span><br><span class="line">    print(ele,end=&#x27; &#x27;)</span><br></pre></td></tr></table></figure><h5 id="删除set集合"><a href="#删除set集合" class="headerlink" title="删除set集合"></a>删除set集合</h5><p>和其他序列类型一样，手动函数集合类型，也可以使用 del() 语句</p><h5 id="向-set-集合中添加元素：add"><a href="#向-set-集合中添加元素：add" class="headerlink" title="向 set 集合中添加元素：add()"></a>向 set 集合中添加元素：add()</h5><p>set 集合中添加元素，可以使用 set 类型提供的 add() 方法实现<br>语法格式：<br>setname.add(element)</p><p>setname 表示要添加元素的集合<br>element 表示要添加的元素内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set3=set((1,2,3,4,5))</span><br><span class="line">print(&quot;set1:&quot;,set3)</span><br><span class="line">set3.add(8)</span><br><span class="line">print(set3)</span><br></pre></td></tr></table></figure><p>需要注意的是，<strong>使用 add() 方法添加的元素，只能是数字、字符串、元组或者布尔类型（True 和 False）值，不能添加列表、字典、集合这类可变的数据，</strong>否则 Python 解释器会报 TypeError 错误</p><p>当成整体添加进去的</p><h5 id="从set集合中删除元素：remove"><a href="#从set集合中删除元素：remove" class="headerlink" title="从set集合中删除元素：remove()"></a>从set集合中删除元素：remove()</h5><p>删除现有 set 集合中的指定元素，可以使用 <strong>remove()</strong> 方法<br>语法格式：<br>setname.remove(element)</p><p>使用此方法删除集合中元素，需要注意的是，如果被删除元素本就不包含在集合中，则此方法会抛出 KeyError 错误</p><p>可以使用 <strong>discard()</strong> 方法，此方法和 remove() 方法的用法完全相同，唯一的区别就是，当删除集合中元素失败时，此方法不会抛出任何错误。</p><h5 id="set集合做交集、并集、差集运算"><a href="#set集合做交集、并集、差集运算" class="headerlink" title="set集合做交集、并集、差集运算"></a>set集合做交集、并集、差集运算</h5><p><img src="en-resource://database/569:1" alt="c9d93e16d9be661d5f1b99511529f6d0.png"></p><h5 id="set集合方法"><a href="#set集合方法" class="headerlink" title="set集合方法"></a>set集合方法</h5><p><img src="en-resource://database/571:1" alt="4ee7f45f9f2aca4af266ff1ee5bd8606.png"><br><img src="en-resource://database/573:1" alt="1916ac8b80a2a3117eb9a155e2744478.png"></p><h5 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h5><p><strong>浅拷贝</strong>，指的是重新分配一块内存，创建一个新的对象，但里面的元素是原对象中各个子对象的<strong>引用</strong>。<br>对数据采用浅拷贝的方式时，如果原对象中的元素不可变，那倒无所谓；但如果元素可变，浅拷贝通常会出现一些问题</p><p><strong>深拷贝</strong>，是指重新分配一块内存，创建一个新的对象，并且将原对象中的元素，以递归的方式，通过创建新的子对象拷贝到新对象中。因此，新对象和原对象没有任何关联。</p><h5 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h5><p>在 Python 中拼接（连接）字符串很简单，可以直接将两个字符串紧挨着写在一起<br>strname &#x3D; “str1” “str2”</p><p>strname 表示拼接以后的字符串变量名<br>str1 和 str2 是要拼接的字符串内容<br>使用这种写法，Python 会自动将两个字符串拼接在一起</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = &quot;hello&quot; &quot; xiaoyang&quot;</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><p><strong>需要注意的是，这种写法只能拼接字符串常量,如果需要使用变量，就得借助+运算符来拼接</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str1 = &quot;nihao&quot;</span><br><span class="line">str2 = &quot; xiaoyang&quot;</span><br><span class="line">a = str1+str2</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><h5 id="字符串和数字的拼接"><a href="#字符串和数字的拼接" class="headerlink" title="字符串和数字的拼接"></a>字符串和数字的拼接</h5><p> Python 不允许直接拼接数字和字符串，所以我们必须先将数字转换成字符串。<br>可以借助 str() 和 repr() 函数将数字转换为字符串<br>str(obj)<br>repr(obj)<br>obj 表示要转换的对象，它可以是数字、列表、元组、字典等多种类型的数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str1 = &quot;hello &quot;</span><br><span class="line">str2 = &quot;岁的漂亮鬼&quot;</span><br><span class="line">year =18</span><br><span class="line">n = str1 + str(year) + str2</span><br><span class="line">print(n)</span><br></pre></td></tr></table></figure><h5 id="截取字符串（字符串切片）"><a href="#截取字符串（字符串切片）" class="headerlink" title="截取字符串（字符串切片）"></a>截取字符串（字符串切片）</h5><p>字符串是由多个字符构成的，字符之间是有顺序的，这个顺序号就称为索引（index）。Python 允许通过索引来操作字符串中的单个或者多个字符，比如获取指定索引处的字符，返回指定字符的索引值等。</p><p><strong>获取单个字符</strong><br>知道字符串名字以后，在方括号[ ]中使用索引即可访问对应的字符<br>语法格式：<br>strname[index]<br>strname 表示字符串名字，index 表示索引值。<br>Python 允许从字符串的两端使用索引：<br>当以字符串的左端（字符串的开头）为起点时，索引是从 0 开始计数的；字符串的第一个字符的索引为 0，第二个字符的索引为 1，第三个字符串的索引为 2 ……<br>当以字符串的右端（字符串的末尾）为起点时，索引是从 -1 开始计数的；字符串的倒数第一个字符的索引为 -1，倒数第二个字符的索引为 -2，倒数第三个字符的索引为 -3 ……</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1 = &quot;hello&quot;</span><br><span class="line">print(str1[1])</span><br></pre></td></tr></table></figure><p><strong>获取多个字符（字符串截去&#x2F;字符串切片）</strong><br>使用[ ]除了可以获取单个字符外，还可以指定一个范围来获取多个字符，也就是一个子串或者片段<br>strname[start : end : step]</p><p>strname：要截取的字符串<br>start：表示要截取的第一个字符所在的索引（截取时包含该字符）。如果不指定，默认为 0，也就是从字符串的开头截取<br>end：表示要截取的最后一个字符所在的索引（截取时不包含该字符）。如果不指定，默认为字符串的长度；<br>step：指的是从 start 索引处的字符开始，每 step 个距离获取一个字符，直至 end 索引出的字符。step 默认值为 1，当省略该值时，最后一个冒号也可以省略。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str1 = &quot;hello &quot;</span><br><span class="line">print(str1[0:3])</span><br><span class="line">print(str1[-4:-1])</span><br></pre></td></tr></table></figure><h5 id="len-函数和encode-函数"><a href="#len-函数和encode-函数" class="headerlink" title="len()函数和encode()函数"></a>len()函数和encode()函数</h5><p>python 中，要想知道一个字符串有多少个字符（获得字符串长度），或者一个字符串占用多少个字节，可以使用 len 函数。</p><p>语法格式：<br>len（string）<br>string 用于指定要进行长度统计的字符串。</p><p>在实际开发中，除了常常要获取字符串的长度外，有时还要获取字符串的字节数。<br>在 Python 中，不同的字符所占的字节数不同，数字、英文字母、小数点、下划线以及空格，各占一个字节，而一个汉字可能占 2~4 个字节，具体占多少个，取决于采用的编码方式</p><p>encode() 方法，将字符串进行编码后再获取它的字节数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1 = &quot;人生苦短，我用Python&quot;</span><br><span class="line">len(str1.encode())</span><br></pre></td></tr></table></figure><h5 id="split-方法"><a href="#split-方法" class="headerlink" title="split()方法"></a>split()方法</h5><p>split() 方法可以实现将一个字符串按照指定的分隔符切分成多个子串，这些子串会被保存到列表中（不包含分隔符），作为方法的返回值反馈回来。</p><p>语法格式：str.split(sep,maxsplit)<br>str：表示要进行分割的字符串；</p><p>sep：用于指定分隔符，可以包含多个字符。此<strong>参数默认为 None，表示所有空字符，包括空格、换行符“\n”、制表符“\t”等</strong>。</p><p>maxsplit：可选参数，用于指定分割的次数，最后列表中子串的个数最多为 maxsplit+1。如果不指定或者指定为 -1，则表示分割次数没有限制。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1 = &quot;hello I am your brother&quot;</span><br><span class="line">print(str1.split())</span><br></pre></td></tr></table></figure><p>在未指定 sep 参数时，split() 方法默认采用空字符进行分割，但当字符串中有连续的空格或其他空字符时，都会被视为一个分隔符对字符串进行分割，</p><h5 id="join-方法"><a href="#join-方法" class="headerlink" title="join()方法"></a>join()方法</h5><p>使用 join() 方法合并字符串时，它会将列表（或元组）中多个字符串采用固定的分隔符连接在一起。</p><p>语法格式：newstr &#x3D; str.join(iterable)</p><p>newstr：表示合并后生成的新字符串<br>str：用于指定合并时的分隔符<br>iterable：做合并操作的源字符串数据，允许以列表、元组等形式提供</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list = [&quot;www&quot;,&quot;xiaoyangzst&quot;,&quot;vercel&quot;,&quot;app&quot;]</span><br><span class="line">a =&#x27;.&#x27;.join(list)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><h5 id="count-方法"><a href="#count-方法" class="headerlink" title="count()方法"></a>count()方法</h5><p>count 方法用于检索指定字符串在另一字符串中出现的次数，如果检索的字符串不存在，则返回 0，否则返回出现的次数。<br>语法格式：<br>str.count(sub[,start[,end]])</p><p>str：表示原字符串；<br>sub：表示要检索的字符串；<br>start：指定检索的起始位置，也就是从什么位置开始检测。如果不指定，默认从头开始检索；<br>end：指定检索的终止位置，如果不指定，则表示一直检索到结尾。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list = [&quot;www&quot;,&quot;xiaoyangzst&quot;,&quot;vercel&quot;,&quot;app&quot;]</span><br><span class="line">a =&#x27;.&#x27;.join(list)</span><br><span class="line">print(a)</span><br><span class="line">print()</span><br><span class="line">c=a.count(&#x27;.&#x27;)</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure><h5 id="find-方法和index-方法"><a href="#find-方法和index-方法" class="headerlink" title="find()方法和index()方法"></a>find()方法和index()方法</h5><p>find() 方法用于检索字符串中是否包含目标字符串，如果包含，则返回第一次出现该字符串的索引；反之，则返回 -1。<br>语法格式：<br>str.find(sub[,start[,end]])<br>str：表示原字符串；<br>sub：表示要检索的目标字符串；<br>start：表示开始检索的起始位置。如果不指定，则默认从头开始检索；<br>end：表示结束检索的结束位置。如果不指定，则默认一直检索到结尾。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list = [&quot;www&quot;,&quot;xiaoyangzst&quot;,&quot;vercel&quot;,&quot;app&quot;]</span><br><span class="line">a =&#x27;.&#x27;.join(list)</span><br><span class="line">c=a.find(&#x27;.&#x27;)</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure><p>同 find() 方法类似，index() 方法也可以用于检索是否包含指定的字符串，不同之处在于，当指定的字符串不存在时，index() 方法会抛出异常。<br>语法格式：<br>str.index(sub[,start[,end]])<br>str：表示原字符串；<br>sub：表示要检索的子字符串；<br>start：表示检索开始的起始位置，如果不指定，默认从头开始检索；<br>end：表示检索的结束位置，如果不指定，默认一直检索到结尾。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list = [&quot;www&quot;,&quot;xiaoyangzst&quot;,&quot;vercel&quot;,&quot;app&quot;]</span><br><span class="line">a =&#x27;.&#x27;.join(list)</span><br><span class="line">print(a)</span><br><span class="line">print()</span><br><span class="line">c = a.index(&#x27;.&#x27;)</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础知识三</title>
      <link href="/post/3563117.html"/>
      <url>/post/3563117.html</url>
      
        <content type="html"><![CDATA[<h5 id="tuple元组详解"><a href="#tuple元组详解" class="headerlink" title="tuple元组详解"></a>tuple元组详解</h5><p>元组和列表（list）的不同之处在于：<br>列表的元素是可以更改的，包括修改元素值，删除和插入元素，所以列表是可变序列；而元组一旦被创建，它的元素就不可更改了，所以元组是不可变序列。<br>从形式上看，元组的所有元素都放在一对小括号( )中，相邻元素之间用逗号,分隔，如下所示：<br>(ele1, ele2, … , elen)<br>其中 ele1~elen 表示元组中的各个元素，个数没有限制，只要是 Python 支持的数据类型就可以。并且在同一个元组中，元素的类型可以不同</p><h5 id="创建元组"><a href="#创建元组" class="headerlink" title="创建元组"></a>创建元组</h5><p>Python 提供了两种创建元组的方法</p><ol><li><p>使用 ( ) 直接创建<br>通过( )创建元组后，一般使用&#x3D;将它赋值给某个变量，具体格式为：tuplename &#x3D; (element1, element2, …, elementn)<br>tuplename 表示变量名，element1 ~ elementn 表示元组的元素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num = (7, 14, 21, 28, 35)</span><br><span class="line">course = (&quot;Python教程&quot;, &quot;http://c.biancheng.net/python/&quot;)</span><br><span class="line">abc = ( &quot;Python&quot;, 19, [1,2], (&#x27;c&#x27;,2.0) )</span><br></pre></td></tr></table></figure><p>在 Python 中，<strong>元组通常都是使用一对小括号将所有元素包围起来的，但小括号不是必须的</strong>，只要将各元素用逗号隔开，Python 就会将其视为元组，<br>eg.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">course = &quot;Python教程&quot;, &quot;http://c.biancheng.net/python/&quot;</span><br><span class="line">print(course)</span><br></pre></td></tr></table></figure><p><strong>需要注意的一点是，当创建的元组中只有一个字符串类型的元素时，该元素后面必须要加一个逗号,，否则 Python 解释器会将它视为字符串</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#最后加上逗号</span><br><span class="line">a =(&quot;http://c.biancheng.net/cplus/&quot;,)</span><br></pre></td></tr></table></figure></li><li><p>使用tuple()函数创建元组<br>Python提供了一个内置的函数 tuple()，用来将其它数据类型转换为元组类型。<br>tuple() 的语法格式如下：tuple(data)<br>其中，data 表示可以转化为元组的数据，包括字符串、元组、range 对象等。</p></li></ol><h5 id="访问元组元素"><a href="#访问元组元素" class="headerlink" title="访问元组元素"></a>访问元组元素</h5><p>和列表一样，我们可以使用索引（Index）访问元组中的某个元素（得到的是一个元素的值），也可以使用切片访问元组中的一组元素（得到的是一个新的子元组）<br>使用索引访问元组元素：<br>tuplename[i]<br>tuplename 表示元组名字，i 表示索引值。元组的索引可以是正数，也可以是负数。<br>使用切片访问元组元素：<br>tuplename[start : end : step]<br>其中，start 表示起始索引，end 表示结束索引，step 表示步长。</p><h5 id="修改元组"><a href="#修改元组" class="headerlink" title="修改元组"></a>修改元组</h5><p>前面我们已经说过，元组是不可变序列，元组中的元素不能被修改，所以我们只能创建一个新的元组去替代旧的元组。<br>对元组变量进行重新赋值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tup = (100, 0.5, -36, 73)</span><br><span class="line">print(tup)#对元组进行重新赋值</span><br><span class="line">tup = (&quot;nihao&quot;,&quot;hello&quot;)</span><br><span class="line">print(tup)</span><br></pre></td></tr></table></figure><p>添加元素的方法可以，但是有限制只能添加在最前面或者最后面<br><strong>另外，还可以通过连接多个元组（使用+可以拼接元组）的方式向元组中添加新元素</strong></p><h5 id="删除元组"><a href="#删除元组" class="headerlink" title="删除元组"></a>删除元组</h5><p>当创建的元组不再使用时，可以通过 del 关键字将其删除</p><h5 id="dict字典详解"><a href="#dict字典详解" class="headerlink" title="dict字典详解"></a>dict字典详解</h5><p>字典（dict）是一种无序的、可变的序列，它的元素以“键值对（key-value）”的形式存储。相对地，列表（list）和元组（tuple）都是有序的序列，它们的元素在底层是挨着存放的。</p><p>字典中，习惯将各元素对应的索引称为键（key），各个键对应的元素称为值（value）<br><strong>字典的主要特征</strong><br>通过键而不是通过索引来读取元素<br>字典是任意数据类型的无序集合<br>字典中的键必须唯一<br>键可以是整数、字符串或者元组，只要符合唯一和不可变的特性就行；字典的值可以是 Python 支持的任意数据类型</p><h5 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h5><p>创建字典的方式有很多</p><ol><li>使用 { } 创建字典</li></ol><p>由于字典中每个元素都包含两部分，分别是键（key）和值（value），因此在创建字典时，键和值之间使用冒号:分隔，相邻元素之间使用逗号,分隔，所有元素放在大括号{ }中。</p><p>使用{ }创建字典的语法格式如下：</p><p>dictname &#x3D; {‘key’:’value1’, ‘key2’:’value2’, …, ‘keyn’:valuen}<br>其中 dictname 表示字典变量名，keyn : valuen 表示各个元素的键值对。需要注意的是，同一字典中的各个键必须唯一，不能重复。</p><ol start="2"><li>通过 fromkeys() 方法创建字典<br>Python 中，还可以使用 dict 字典类型提供的 fromkeys() 方法创建带有默认值的字典，具体格式为：<br>dictname &#x3D; dict.fromkeys(list，value&#x3D;None)<br>list 参数表示字典中所有键的列表（list）<br>value 参数表示默认值，如果不写，则为空值 None<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">knowledge = [&#x27;语文&#x27;, &#x27;数学&#x27;, &#x27;英语&#x27;]</span><br><span class="line">scores = dict.fromkeys(knowledge, 60)</span><br><span class="line">print(scores)</span><br></pre></td></tr></table></figure></li><li>通过 dict() 映射函数创建字典</li></ol><h5 id="访问字典"><a href="#访问字典" class="headerlink" title="访问字典"></a>访问字典</h5><p>列表和元组是通过下标来访问元素的，而字典不同，它通过键来访问对应的值。因为字典中的元素是无序的，每个元素的位置都不固定，所以字典也不能像列表和元组那样，采用切片的方式一次性访问多个元素。<br>访问字典元素的具体格式为：<br>dictname[key]<br>dictname 表示字典变量的名字<br>key 表示键名。注意，键必须是存在的，否则会抛出异常。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tup = ([&#x27;two&#x27;,26], [&#x27;one&#x27;,88], [&#x27;three&#x27;,100], [&#x27;four&#x27;,-59])</span><br><span class="line">dic = dict(tup)</span><br><span class="line">print(dic[&#x27;one&#x27;]) #键存在</span><br><span class="line">print(dic[&#x27;five&#x27;]) #键不存在</span><br></pre></td></tr></table></figure><p>除了上面这种方式外，Python 更推荐使用 dict 类型提供的 get() 方法来获取指定键对应的值。当指定的键不存在时，get() 方法不会抛出异常。<br>get() 方法的语法格式为：<br>dictname.get(key[,default])</p><p>dictname 表示字典变量的名字；<br>key 表示指定的键；<br>default 用于指定要查询的键不存在时，此方法返回的默认值，如果不手动指定，会返回 None。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = dict(two=0.65, one=88, three=100, four=-59)</span><br><span class="line">print( a.get(&#x27;one&#x27;) )</span><br></pre></td></tr></table></figure><p>注意，当键不存在时，get() 返回空值 None，如果想明确地提示用户该键不存在，那么可以手动设置 get() 的第二个参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = dict(two=0.65, one=88, three=100, four=-59)</span><br><span class="line">print( a.get(&#x27;five&#x27;, &#x27;该键不存在&#x27;) )</span><br></pre></td></tr></table></figure><p>运行结果：<br>该键不存在</p><h5 id="删除字典"><a href="#删除字典" class="headerlink" title="删除字典"></a>删除字典</h5><p>和删除列表、元组一样，手动删除字典也可以使用 del 关键字</p><h5 id="字典添加键值对"><a href="#字典添加键值对" class="headerlink" title="字典添加键值对"></a>字典添加键值对</h5><p>为字典添加新的键值对很简单，直接给不存在的 key 赋值即可，具体语法格式如下：<br>dictname[key] &#x3D; value<br>dictname 表示字典名称<br>key 表示新的键<br>value 表示新的值，只要是 Python 支持的数据类型都可以。</p><h5 id="字典修改键值对"><a href="#字典修改键值对" class="headerlink" title="字典修改键值对"></a>字典修改键值对</h5><p><strong>Python 字典中键（key）的名字不能被修改</strong>，我们只能修改值（value）。<br>字典中各元素的键必须是唯一的，因此，<strong>如果新添加元素的键与已存在元素的键相同，那么键所对应的值就会被新的值替换掉</strong>，以此达到修改元素值的目的。</p><h5 id="字典删除键值对"><a href="#字典删除键值对" class="headerlink" title="字典删除键值对"></a>字典删除键值对</h5><p>删除字典中的键值对，还是可以使用 del 语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;&#x27;数学&#x27;: 95, &#x27;语文&#x27;: 89, &#x27;英语&#x27;: 90&#125;</span><br><span class="line">del a[&#x27;语文&#x27;]</span><br><span class="line">del a[&#x27;数学&#x27;]</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><h5 id="判断字典中是否存在指定键值对"><a href="#判断字典中是否存在指定键值对" class="headerlink" title="判断字典中是否存在指定键值对"></a>判断字典中是否存在指定键值对</h5><p>如果要判断字典中是否存在指定键值对，首先应判断字典中是否有对应的键。判断字典是否包含指定键值对的键，可以使用 in 或 not in 运算符。需要指出的是，对于 dict 而言，in 或 not in 运算符都是基于 key 来判断的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;&#x27;数学&#x27;: 95, &#x27;语文&#x27;: 89, &#x27;英语&#x27;: 90&#125;</span><br><span class="line">print(&#x27;数学&#x27; in a) </span><br><span class="line">print(&#x27;物理&#x27; in a) </span><br></pre></td></tr></table></figure><h5 id="dir查询"><a href="#dir查询" class="headerlink" title="dir查询"></a>dir查询</h5><p>Python 字典的数据类型为 dict，我们可使用 dir(dict) 来查看该类型包含哪些方法</p><h5 id="keys-、values-和-items-方法"><a href="#keys-、values-和-items-方法" class="headerlink" title="keys()、values() 和 items() 方法"></a>keys()、values() 和 items() 方法</h5><p>它们用来获取字典中的特定数据：<br>keys() 方法用于返回字典中的所有键（key）</p><p>values() 方法用于返回字典中所有键对应的值（value）</p><p>items() 用于返回字典中所有的键值对（key-value）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scores = &#123;&#x27;数学&#x27;: 95, &#x27;语文&#x27;: 89, &#x27;英语&#x27;: 90&#125;</span><br><span class="line">print(scores.keys())</span><br><span class="line">print(scores.values())</span><br><span class="line">print(scores.items())</span><br></pre></td></tr></table></figure><p>如果想使用这三个方法返回的数据，一般有下面两种方案：</p><ol><li>使用 list() 函数，将它们返回的数据转换成列表<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;&#x27;数学&#x27;: 95, &#x27;语文&#x27;: 89, &#x27;英语&#x27;: 90&#125;</span><br><span class="line">b = list(a.keys())</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure></li><li>使用 for in 循环遍历它们的返回值<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;&#x27;数学&#x27;: 95, &#x27;语文&#x27;: 89, &#x27;英语&#x27;: 90&#125;</span><br><span class="line">for k in a.keys():</span><br><span class="line">    print(k,end=&#x27; &#x27;)</span><br><span class="line">print()</span><br><span class="line">for v in a.values():</span><br><span class="line">    print(v,end=&#x27; &#x27;)</span><br><span class="line">print()</span><br><span class="line">for k,v in a.items():</span><br><span class="line">    print(&quot;key:&quot;,k,&quot; value:&quot;,v)</span><br></pre></td></tr></table></figure></li></ol><h5 id="copy-方法"><a href="#copy-方法" class="headerlink" title="copy() 方法"></a>copy() 方法</h5><p>copy() 方法返回一个字典的拷贝，也即返回一个具有相同键值对的新字典</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;&#x27;one&#x27;: 1, &#x27;two&#x27;: 2, &#x27;three&#x27;: [1,2,3]&#125;</span><br><span class="line">b = a.copy()</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><h5 id="update-方法"><a href="#update-方法" class="headerlink" title="update() 方法"></a>update() 方法</h5><p>update() 方法可以使用一个字典所包含的键值对来更新己有的字典。<br>在执行 update() 方法时，如果被更新的字典中己包含对应的键值对，那么原 value 会被覆盖；如果被更新的字典中不包含对应的键值对，则该键值对被添加进去。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;&#x27;one&#x27;: 1, &#x27;two&#x27;: 2, &#x27;three&#x27;: 3&#125;</span><br><span class="line">a.update(&#123;&#x27;one&#x27;:4.5, &#x27;four&#x27;: 9.3&#125;)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><h5 id="pop-和-popitem-方法"><a href="#pop-和-popitem-方法" class="headerlink" title="pop() 和 popitem() 方法"></a>pop() 和 popitem() 方法</h5><p>pop() 和 popitem() 都用来删除字典中的键值对，不同的是，pop() 用来删除指定的键值对，popitem() 总是弹出底层中的最后一个 key-value<br>语法格式：<br>dictname.pop(key)<br>dictname.popitem()<br>dictname 表示字典名<br>key 表示键。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;&#x27;数学&#x27;: 95, &#x27;语文&#x27;: 89, &#x27;英语&#x27;: 90, &#x27;化学&#x27;: 83, &#x27;生物&#x27;: 98, &#x27;物理&#x27;: 89&#125;</span><br><span class="line">print(a)</span><br><span class="line">a.pop(&#x27;化学&#x27;)</span><br><span class="line">print(a)</span><br><span class="line">a.popitem()</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><h5 id="setdefault-方法"><a href="#setdefault-方法" class="headerlink" title="setdefault() 方法"></a>setdefault() 方法</h5><p>setdefault() 方法用来返回某个 key 对应的 value<br>语法格式：<br>dictname.setdefault(key, defaultvalue)</p><p>dictname 表示字典名称<br>key 表示键<br>defaultvalue 表示默认值（可以不写，不写的话是 None）</p><p>当指定的 key 不存在时，setdefault() 会先为这个不存在的 key 设置一个默认的 defaultvalue，然后再返回 defaultvalue。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;&#x27;数学&#x27;: 95, &#x27;语文&#x27;: 89, &#x27;英语&#x27;: 90&#125;</span><br><span class="line">print(a)</span><br><span class="line">#key不存在，指定默认值</span><br><span class="line">a.setdefault(&#x27;物理&#x27;, 94)</span><br><span class="line">print(a)</span><br><span class="line">#key不存在，不指定默认值</span><br><span class="line">a.setdefault(&#x27;化学&#x27;)</span><br><span class="line">print(a)</span><br><span class="line">#key存在，指定默认值</span><br><span class="line">a.setdefault(&#x27;数学&#x27;, 100)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tkinter列表框控件</title>
      <link href="/post/ecbd7cdb.html"/>
      <url>/post/ecbd7cdb.html</url>
      
        <content type="html"><![CDATA[<h4 id="Tkinter列表框和组合框控件"><a href="#Tkinter列表框和组合框控件" class="headerlink" title="Tkinter列表框和组合框控件"></a>Tkinter列表框和组合框控件</h4><p>列表框，即 Listbox。在使用 Tkinter 进行 GUI 编程的过程中，如果需要用户自己进行选择时就可以使用列表框控件。列表框中的选项可以是多个条目，也可以是单个唯一条目，但常用于多个条目</p><h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h5><p>activate(index)<br>将给定索引号对应的选项激活，即文本下方画一条下划线</p><p>bbox(index)<br>返回给定索引号对应的选项的边框，返回值是一个以像素为单位的 4 元祖表示边框：(xoffset, yoffset, width, height)， xoffset 和 yoffset 表示距离左上角的偏移位置</p><p>curselection()<br>返回一个元组，包含被选中的选项序号（从 0 开始）</p><p>delete(first, last&#x3D;None)<br>删除参数 first 到 last 范围内（包含 first 和 last）的所有选项</p><p>get(first, last&#x3D;None)<br>返回一个元组，包含参数 first 到 last 范围内（包含 first 和 last）的所有选项的文本</p><p>index(index)<br>返回与 index 参数相应选项的序号</p><p>itemcget(index, option)<br>获得 index 参数指定的项目对应的选项（由 option 参数指定）</p><p>itemconfig(index, **options)</p><p>设置 index 参数指定的项目对应的选项（由可变参数 option 指定）</p><p>nearest(y)<br>返回与给定参数 y 在垂直坐标上最接近的项目的序号</p><p>selection_set(first, last&#x3D;None)<br>设置参数 first 到 last 范围内（包含 first 和 last）选项为选中状态，使用 selection_includes(序号) 可以判断选项是否被选中。 </p><p>size()<br>返回 Listbox 组件中选项的数量</p><p>xview(*args)</p><p>该方法用于在水平方向上滚动 Listbox 组件的内容，一般通过绑定 Scollbar 组件的 command 选项来实现。 如果第一个参数是 “moveto”，则第二个参数表示滚动到指定的位置：0.0 表示最左端，1.0 表示最右端；如果第一个参数是 “scroll”，则第二个参数表示滚动的数量，第三个参数表示滚动的单位（可以是 “units” 或 “pages”）<br>例如：xview(“scroll”, 2, “pages”)表示向右滚动二行。</p><p>yview(*args)</p><p>该方法用于在垂直方向上滚动 Listbox 组件的内容，一般通过绑定 Scollbar 组件的 command 选项来实现</p><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><p>除了共有属性之外，列表框控件也有一些其他属性</p><p>listvariable</p><ol><li>指向一个 StringVar 类型的变量，该变量存放 Listbox 中所有的项目</li><li>在 StringVar 类型的变量中，用空格分隔每个项目，例如 var.set(“c c++ java python”)</li></ol><p>selectbackground<br>指定当某个项目被选中的时候背景颜色，默认值由系统指定</p><p>selectborderwidth</p><ol><li>指定当某个项目被选中的时候边框的宽度</li><li>默认是由 selectbackground 指定的颜色填充，没有边框</li><li>如果设置了此选项，Listbox 的每一项会相应变大，被选中项为 “raised” 样式</li></ol><p>selectforeground<br>指定当某个项目被选中的时候文本颜色，默认值由系统指定</p><p>selectmode<br>决定选择的模式，tk 提供了四种不同的选择模式，分别是：”single”（单选）、”browse”（也是单选，但拖动鼠标或通过方向键可以直接改变选项）、”multiple”（多选）和 “extended”（也是多选，但需要同时按住 Shift 键或 Ctrl 键或拖拽鼠标实现），默认是 “browse”</p><p>setgrid<br>指定一个布尔类型的值，决定是否启用网格控制，默认值是 False</p><p>takefocus<br>指定该组件是否接受输入焦点（用户可以通过 tab 键将焦点转移上来），默认值是 True</p><p>xscrollcommand<br>为 Listbox 组件添加一条水平滚动条，将此选项与 Scrollbar 组件相关联即可</p><p>yscrollcommand<br>为 Listbox 组件添加一条垂直滚动条，将此选项与 Scrollbar 组件相关联即可</p><p>eg.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from tkinter import *</span><br><span class="line">win = Tk()</span><br><span class="line">win.geometry(&#x27;400x200&#x27;)</span><br><span class="line"># 创建列表选项</span><br><span class="line">listbox1 =Listbox(win)</span><br><span class="line">listbox1.pack()</span><br><span class="line"># i表示索引值，item 表示值，根据索引值的位置依次插入</span><br><span class="line">for i,item in enumerate([&quot;C&quot;,&quot;C++&quot;,&quot;C#&quot;,&quot;Python&quot;,&quot;Java&quot;]):</span><br><span class="line">    listbox1.insert(i,item)</span><br><span class="line">win.mainloop()</span><br></pre></td></tr></table></figure><p>除了上述使用 enumerate() 来实现选项插入的方法外，还可以使用 “end” 实现，它表示将选项插入到最后一个位置，所以“Java”一定会被插入到最后一个位置上，而之前的选项会依次向前排列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root = tk.Tk()</span><br><span class="line">root.geometry(&quot;400x400+500+100&quot;)</span><br><span class="line">list =tk.Listbox(root,selectbackground=&quot;#AAAAFF&quot;)</span><br><span class="line">list.pack()</span><br><span class="line">n1 = [&quot;张三&quot;, &quot;李四&quot;,&quot;王五&quot;]</span><br><span class="line">for i in n1:</span><br><span class="line">    list.insert(&#x27;end&#x27;,i)</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><ol start="2"><li>增加滚动条和删除功能</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from logging import RootLogger</span><br><span class="line">import tkinter as tk</span><br><span class="line">from turtle import right </span><br><span class="line">root = tk.Tk()</span><br><span class="line">s = tk.Scrollbar(root)</span><br><span class="line">s.pack(side=tk.RIGHT,fill=tk.Y)</span><br><span class="line">root.geometry(&quot;400x400+500+100&quot;)</span><br><span class="line">list =tk.Listbox(root,selectbackground=&quot;#AAAAFF&quot;,selectmode = tk.MULTIPLE,height =5, yscrollcommand = s.set)</span><br><span class="line">list.pack()</span><br><span class="line">s.config(command = list.yview)</span><br><span class="line">n1 = [&quot;张三&quot;, &quot;李四&quot;,&quot;王五&quot;,&#x27;老四&#x27;,&quot;小路&quot;,&quot;康康&quot;,&quot;小小&quot;,&quot;美美&quot;,&quot;小杨&quot;]</span><br><span class="line">for i in n1:</span><br><span class="line">    list.insert(&#x27;end&#x27;,i)</span><br><span class="line">bt = tk.Button(root,text=&#x27;删除&#x27;,command = lambda x = list:x.delete(tk.ACTIVE))</span><br><span class="line">bt.pack(side = tk.BOTTOM)</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><ol start="3"><li>StringVar() 添加列表选项</li></ol><p>StringVar() 方法动态地获取列表框中的选项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import tkinter as tk</span><br><span class="line">from tkinter import messagebox</span><br><span class="line">window = tk.Tk()</span><br><span class="line">window.geometry(&#x27;400x180&#x27;)</span><br><span class="line">var1 = tk.StringVar()</span><br><span class="line">l = tk.Label(window, bg=&#x27;#AAAAFF&#x27;, font=(&#x27;微软雅黑&#x27;, 15), width=20, textvariable=var1)</span><br><span class="line">l.pack()</span><br><span class="line">def click_button():</span><br><span class="line">    # 使用 curselection来选中文本</span><br><span class="line">    try:</span><br><span class="line">        val = lb.get(lb.curselection())</span><br><span class="line">        var1.set(val)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        e = &#x27;发现一个错误&#x27;</span><br><span class="line">        messagebox.showwarning(e,&#x27;没有选择任何条目&#x27;)</span><br><span class="line"></span><br><span class="line">b1 = tk.Button(window, text=&#x27;获取当前选项&#x27;, command=click_button)</span><br><span class="line">b1.pack()</span><br><span class="line">var2 = tk.StringVar()</span><br><span class="line">lb = tk.Listbox(window, listvariable=var2)</span><br><span class="line">items = [&quot;C&quot;, &quot;Java&quot;, &quot;Python&quot;, &quot;C#&quot;, &quot;Golang&quot;, &quot;Runby&quot;]</span><br><span class="line">for i in items:</span><br><span class="line">    lb.insert(&#x27;end&#x27;, i) </span><br><span class="line">lb.pack()</span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python--tkinter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础知识二</title>
      <link href="/post/410aa71a.html"/>
      <url>/post/410aa71a.html</url>
      
        <content type="html"><![CDATA[<h5 id="列表（list）和元组（tuple）字典（dict）和集合（set）的数据储存"><a href="#列表（list）和元组（tuple）字典（dict）和集合（set）的数据储存" class="headerlink" title="列表（list）和元组（tuple）字典（dict）和集合（set）的数据储存"></a>列表（list）和元组（tuple）字典（dict）和集合（set）的数据储存</h5><p>列表（list）和元组（tuple）比较相似，它们都<strong>按顺序保存元素</strong>，所有的元素占用一块连续的内存，每个元素都有自己的索引，因此列表和元组的元素都可以通过索引（index）来访问。它们的区别在于：<strong>列表是可以修改的，而元组是不可修改的</strong></p><p>字典（dict）和集合（set）<strong>存储的数据都是无序的</strong>，每份元素占用不同的内存，其中字典元素以 key-value 的形式保存。</p><h5 id="序列类型"><a href="#序列类型" class="headerlink" title="序列类型"></a>序列类型</h5><p>序列类型包括字符串、列表、元组、集合和字典，这些序列支持以下几种通用的操作，但比较特殊的是，<strong>集合和字典不支持索引、切片、相加和相乘操作。</strong></p><h5 id="序列切片"><a href="#序列切片" class="headerlink" title="序列切片"></a>序列切片</h5><p>切片操作是访问序列中元素的另一种方法，它可以访问一定范围内的元素，通过切片操作，可以生成一个新的序列</p><p>sname[start : end : step]<br>参数的含义分别是：<br>sname：表示序列的名称；<br>start：表示切片的开始索引位置（包括该位置），此参数也可以不指定，会默认为 0，也就是从序列的开头进行切片；<br>end：表示切片的结束索引位置（不包括该位置），如果不指定，则默认为序列的长度；<br>step：表示在切片过程中，隔几个存储位置（包含当前位置）取一次元素，也就是说，<strong>如果 step 的值大于 1，则在进行切片去序列元素时，会“跳跃式”的取元素</strong>。如果省略设置 step 的值，则最后一个冒号就可以省略。</p><h5 id="序列相加"><a href="#序列相加" class="headerlink" title="序列相加"></a>序列相加</h5><p>Python 中，支持两种类型相同的序列使用“+”运算符做相加操作，它会将两个序列进行连接，但不会去除重复的元素</p><h5 id="检查元素是否包含在序列中-in关键字"><a href="#检查元素是否包含在序列中-in关键字" class="headerlink" title="检查元素是否包含在序列中 in关键字"></a>检查元素是否包含在序列中 in关键字</h5><p>Python 中，可以使用 in 关键字检查某元素是否为序列的成员<br>和 in 关键字用法相同，但功能恰好相反的，还有 not in 关键字，它用来检查某个元素是否不包含在指定的序列中</p><h5 id="list列表"><a href="#list列表" class="headerlink" title="list列表"></a>list列表</h5><p>从形式上看，列表会将所有元素都放在一对中括号[ ]里面，相邻元素之间用逗号分隔<br>list &#x3D; [ele1,ele2,…..,elen]<br>格式中，ele1 ~ elen 表示列表中的元素，个数没有限制，只要是 Python 支持的数据类型就可以。<br>从内容上看，列表可以存储整数、小数、字符串、列表、元组等任何类型的数据，并且同一个列表中元素的类型也可以不同<br><strong>注意</strong>：在使用列表时，虽然可以将不同类型的数据放入到同一个列表中，但通常情况下不这么做，同一列表中只放入同一类型的数据，这样可以提高程序的可读性</p><h5 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h5><ol><li>使用 [ ] 直接创建列表</li></ol><p>listname &#x3D; [element1 , element2 , element3 , … , elementn]</p><ol start="2"><li>使用 list() 函数创建列表<br>除了使用[ ]创建列表外，Python 还提供了一个内置的函数 list()，使用它可以将其它数据类型转换为列表类型</li></ol><h5 id="访问列表元素"><a href="#访问列表元素" class="headerlink" title="访问列表元素"></a>访问列表元素</h5><p>列表是 Python 序列的一种<br>可以使用索引（Index）访问列表中的某个元素（得到的是一个元素的值）<br>也可以使用切片访问列表中的一组元素（得到的是一个新的子列表）</p><h5 id="删除列表"><a href="#删除列表" class="headerlink" title="删除列表"></a>删除列表</h5><p>对于已经创建的列表，如果不再使用，可以使用del关键字将其删除。<br>实际开发中并不经常使用 del 来删除列表，因为 Python 自带的垃圾回收机制会自动销毁无用的列表，即使开发者不手动删除，Python 也会自动将其回收</p><p>del 关键字的语法格式为：<br>del listname</p><h5 id="append-方法添加元素"><a href="#append-方法添加元素" class="headerlink" title="append()方法添加元素"></a>append()方法添加元素</h5><p>append() 方法用于在列表的<strong>末尾追加元素</strong></p><p>语法格式：<br>listname.append(obj)</p><p>当给 append() 方法传递列表或者元组和字符串时，此方法会将它们视为一个整体，作为一个元素添加到列表中，从而形成包含列表和元组的新列表</p><h5 id="extend-方法添加元素"><a href="#extend-方法添加元素" class="headerlink" title="extend()方法添加元素"></a>extend()方法添加元素</h5><p>extend() 和 append() 的不同之处在于：<strong>extend() 不会把列表或者元祖视为一个整体，而是把它们包含的元素逐个添加到列表中</strong></p><p>语法格式：<br>listname.extend(obj)</p><h5 id="insert-方法插入元素"><a href="#insert-方法插入元素" class="headerlink" title="insert()方法插入元素"></a>insert()方法插入元素</h5><p>语法格式：<br>listname.insert(index , obj)</p><p>index 表示指定位置的索引值。<br>insert() 会将 obj 插入到 listname 列表第 index 个元素的位置。<br><strong>当插入列表或者元祖和字符串时，insert() 也会将它们视为一个整体，作为一个元素插入到列表中，这一点和 append() 是一样的</strong></p><h5 id="del根据索引值删除元素"><a href="#del根据索引值删除元素" class="headerlink" title="del根据索引值删除元素"></a>del根据索引值删除元素</h5><p>del 是 Python 中的关键字，专门用来执行删除操作，它不仅可以删除整个列表，还可以删除列表中的某些元素。</p><p>del 可以删除列表中的单个元素<br>格式为：</p><p>del listname[index]<br>listname 表示列表名称，index 表示元素的索引值。</p><p>del 也可以删除中间一段连续的元素<br>格式为：</p><p>del listname[start : end]<br>start 表示起始索引，end 表示结束索引<br>del 会删除从索引 start 到 end 之间的元素，不包括 end 位置的元素</p><h5 id="pop-根据索引值删除元素"><a href="#pop-根据索引值删除元素" class="headerlink" title="pop()根据索引值删除元素"></a>pop()根据索引值删除元素</h5><p>pop() 方法用来删除列表中指定索引处的元素<br>格式如下：<br>listname.pop(index)</p><p>listname 表示列表名称<br>index 表示索引值。<br><strong>如果不写 index 参数，默认会删除列表中的最后一个元素，类似于数据结构中的“出栈</strong>”</p><h5 id="remove-根据元素值进行删除"><a href="#remove-根据元素值进行删除" class="headerlink" title="remove()根据元素值进行删除"></a>remove()根据元素值进行删除</h5><p>remove() 方法会根据元素本身的值来进行删除操作</p><p>需要注意的是，remove() 方法只会删除第一个和指定值相同的元素，而且必须保证该元素是存在的，否则会引发 ValueError 错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nums = [40, 36, 89, 2, 36, 100, 7]</span><br><span class="line">nums.remove(36)</span><br><span class="line">print(nums)</span><br></pre></td></tr></table></figure><h5 id="clear-删除列表所有元素"><a href="#clear-删除列表所有元素" class="headerlink" title="clear()删除列表所有元素"></a>clear()删除列表所有元素</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list = [1,2,3,4]</span><br><span class="line">print(list[1:4])</span><br><span class="line">list.clear()</span><br><span class="line">print(list)</span><br></pre></td></tr></table></figure><h5 id="修改单个元素"><a href="#修改单个元素" class="headerlink" title="修改单个元素"></a>修改单个元素</h5><p>修改单个元素非常简单，直接对元素赋值即可<br>list[2] &#x3D; -26 </p><h5 id="修改一组元素"><a href="#修改一组元素" class="headerlink" title="修改一组元素"></a>修改一组元素</h5><p>Python 支持通过切片语法给一组元素赋值。在进行这种操作时，如果不指定步长（step 参数），Python 就不要求新赋值的元素个数与原来的元素个数相同；这意味，该操作既可以为列表添加元素，也可以为列表删除元素。<br>添加元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list = [1,2,3,4]</span><br><span class="line">list[0:2]= [5,6]</span><br><span class="line">print(list)</span><br></pre></td></tr></table></figure><p>删除元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list = [1,2,3,4]</span><br><span class="line">list[0:2]= []</span><br><span class="line">print(list)</span><br></pre></td></tr></table></figure><h5 id="list列表查找元素-index-方法"><a href="#list列表查找元素-index-方法" class="headerlink" title="list列表查找元素 index() 方法"></a>list列表查找元素 index() 方法</h5><p>index() 方法用来查找某个元素在列表中出现的位置（也就是索引），如果该元素不存在，则会导致 ValueError 错误，所以在查找之前最好使用 count() 方法判断一下<br>语法格式：<br>listname.index(obj, start, end)</p><p>istname 表示列表名称<br>obj 表示要查找的元素<br>start 表示起始位置<br>end 表示结束位置</p><p>start 和 end 参数用来指定检索范围<br>start 和 end 可以都不写，此时会检索整个列表；如果只写 start 不写 end，那么表示检索从 start 到末尾的元素；如果 start 和 end 都写，那么表示检索 start 和 end 之间的元素。<br><strong>index() 方法会返回元素所在列表中的索引值</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nums = [40, 36, 89, 2, 36, 100, 7, -20.5, -999]</span><br><span class="line">print( nums.index(2) ) </span><br><span class="line">print( nums.index(100, 3, 7) )</span><br></pre></td></tr></table></figure><h5 id="list列表查找元素count-方法"><a href="#list列表查找元素count-方法" class="headerlink" title="list列表查找元素count()方法"></a>list列表查找元素count()方法</h5><p><strong>count() 方法用来统计某个元素在列表中出现的次数</strong><br>语法格式为：<br>listname.count(obj)</p><p>listname 代表列表名，obj 表示要统计的元素<br>如果 count() 返回 0，就表示列表中不存在该元素，所以 count() 也可以用来判断列表中的某个元素是否存在。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nums = [40, 36, 89, 2, 36, 100, 7, -20.5, 36]</span><br><span class="line">print(&quot;36出现了%d次&quot; % nums.count(36))</span><br><span class="line">if nums.count(100):</span><br><span class="line">    print(&quot;列表中存在100这个元素&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;列表中不存在100这个元素&quot;)</span><br></pre></td></tr></table></figure><h5 id="range-快速初始化数字列表"><a href="#range-快速初始化数字列表" class="headerlink" title="range()快速初始化数字列表"></a>range()快速初始化数字列表</h5><p>Python range() 函数能够轻松地生成一系列的数字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for value in range(1,5):</span><br><span class="line">    print(value)</span><br></pre></td></tr></table></figure><p>range() 只是打印数字 1~4，因为range() 函数的用法是：让 Python 从指定的第一个值开始，一直数到指定的第二个值停止，但<strong>不包含</strong>第二个值（这里为 5）</p><h5 id="list实现队列"><a href="#list实现队列" class="headerlink" title="list实现队列"></a>list实现队列</h5><p>使用 list 列表模拟队列功能的实现方法是，定义一个 list 变量，存入数据时使用 insert() 方法，设置其第一个参数为 0，即表示每次都从最前面插入数据；读取数据时，使用 pop() 方法，即将队列的最后一个元素弹出。满足先进先出的原则就可以了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">queue = []</span><br><span class="line">queue.insert(0,1)</span><br><span class="line">queue.insert(0,2)</span><br><span class="line">queue.insert(0,&quot;hello&quot;)</span><br><span class="line">print(queue)</span><br><span class="line">print(&quot;取一个元素：&quot;,queue.pop())</span><br><span class="line">print(&quot;取一个元素：&quot;,queue.pop())</span><br><span class="line">print(&quot;取一个元素：&quot;,queue.pop())</span><br></pre></td></tr></table></figure><h5 id="Python-list实现栈"><a href="#Python-list实现栈" class="headerlink" title="Python list实现栈"></a>Python list实现栈</h5><p>使用 list 列表模拟栈功能的实现方法是，使用 append() 方法存入数据；使用 pop() 方法读取数据。append() 方法向 list 中存入数据时，每次都在最后面添加数据，这和前面程序中的 insert() 方法正好相反。满足后进先出就ok</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#定义一个空 list 当做栈</span><br><span class="line">stack = []</span><br><span class="line">stack.append(1)</span><br><span class="line">stack.append(2)</span><br><span class="line">stack.append(&quot;hello&quot;)</span><br><span class="line">print(stack)</span><br><span class="line">print(&quot;取一个元素：&quot;,stack.pop())</span><br><span class="line">print(&quot;取一个元素：&quot;,stack.pop())</span><br><span class="line">print(&quot;取一个元素：&quot;,stack.pop())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础知识一</title>
      <link href="/post/7a8a89b3.html"/>
      <url>/post/7a8a89b3.html</url>
      
        <content type="html"><![CDATA[<h5 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h5><ol><li>不要在行尾添加分号，也不要用分号将两条命令放在同一行，一般书写是一条语句占一行</li></ol><p>​eg.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">height=float(input(&quot;输入身高：&quot;)) ;weight=fioat(input(&quot;输入体重：&quot;)) ;</span><br><span class="line">#这种是错误的</span><br></pre></td></tr></table></figure><ol start="2"><li><p>通常情况下，在运算符两侧、函数参数之间以及逗号两侧，都建议使用空格进行分隔。</p></li><li><p>在 Python 中，标识符中的字母是严格区分大小写</p></li><li><p>Python 语言中，以下划线开头的标识符有特殊含义<br>例如:<br>以单下划线开头的标识符（如 _width），表示不能直接访问的类属性，其无法通过 from…import* 的方式导入；</p></li></ol><p>​以双下划线开头的标识符（如__add）表示类的私有成员；</p><p>​以双下划线作为开头和结尾的标识符（如 __init__），是专用标识符。</p><ol start="5"><li><p>Python 允许使用汉字作为标识符</p></li><li><p>不要使用内置函数的名字作为标识符使用<br>（例如变量名、函数名、类名、模板名、对象名等），虽然这样做 Python 解释器不会报错，但这会导致同名的内置函数被覆盖，从而无法使用</p></li><li><p>Python 整数的取值范围是无限的<br>不管多大或者多小的数字,不管对于多大或者多小的整数，Python 只用一种类型存储，就是 int</p></li><li><p>Python 默认支持对复数的简单计算。</p></li><li><p>Python 字符串中的双引号和单引号没有任何区别</p></li><li><p>字符串的换行<br>Python 不是格式自由的语言，它对程序的换行、缩进都有严格的语法要求。要想换行书写一个比较长的字符串，必须在行尾添加反斜杠\</p></li></ol><h5 id="多个字符串显示"><a href="#多个字符串显示" class="headerlink" title="多个字符串显示"></a>多个字符串显示</h5><p>建议每行不超过 80 个字符，如果超过，建议使用小括号将多行内容隐式的连接起来，而不推荐使用反斜杠 \ 进行连接。如果一个字符串文本无法实现一行完全显示，则可以使用小括号将其分开显示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s=(&quot;C语言中文网是中国领先的C语言程序设计专业网站，&quot;</span><br><span class="line">&quot;提供C语言入门经典教程、C语言编译器、C语言函数手册等。&quot;)</span><br><span class="line">s=&quot;C语言中文网是中国领先的C语言程序设计专业网站，\</span><br><span class="line">提供C语言入门经典教程、C语言编译器、C语言函数手册等。&quot;</span><br></pre></td></tr></table></figure><h5 id="变量值"><a href="#变量值" class="headerlink" title="变量值"></a>变量值</h5><p>变量的值不是一成不变的，它可以随时被修改，只要重新赋值即可；<br>另外你也不用关心数据的类型，可以将不同类型的数据赋值给同一个变量</p><h5 id="弱类型语言有两个特点"><a href="#弱类型语言有两个特点" class="headerlink" title="弱类型语言有两个特点"></a>弱类型语言有两个特点</h5><p>变量无须声明就可以直接赋值，对一个不存在的变量赋值就相当于定义了一个新变量。<br>变量的数据类型可以随时改变，比如，同一个变量可以一会儿被赋值为整数，一会儿被赋值为字符串。</p><h5 id="当字符串内容中出现引号时，我们需要进行特殊处理，否则-Python-会解析出错"><a href="#当字符串内容中出现引号时，我们需要进行特殊处理，否则-Python-会解析出错" class="headerlink" title="当字符串内容中出现引号时，我们需要进行特殊处理，否则 Python 会解析出错"></a>当字符串内容中出现引号时，我们需要进行特殊处理，否则 Python 会解析出错</h5><ol><li><p>对引号进行转义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str1 = &#x27;I\&#x27;m a great coder!&#x27;</span><br><span class="line">str2 = &quot;引文双引号是\&quot;，中文双引号是“&quot;</span><br><span class="line">print(str1)</span><br><span class="line">print(str2)</span><br></pre></td></tr></table></figure></li><li><p>使用不同的引号包围字符串<br>如果字符串内容中出现了单引号，那么我们可以使用双引号包围字符串，反之亦然</p></li></ol><h5 id="Python长字符串"><a href="#Python长字符串" class="headerlink" title="Python长字符串"></a>Python长字符串</h5><p>长字符串，就是可以直接换行（不用加反斜杠\）书写的字符串。<br>Python 长字符串由三个双引号”””或者三个单引号’’’包围</p><p>如果长字符串没有赋值给任何变量，那么这个长字符串就不会起到任何作用，和一段普通的文本无异，相当于被注释掉了</p><p>长字符串中的换行、空格、缩进等空白符都会原样输出</p><h5 id="Python原始字符串"><a href="#Python原始字符串" class="headerlink" title="Python原始字符串"></a>Python原始字符串</h5><p>在原始字符串中，\不会被当作转义字符，所有的内容都保持“原汁原味”的样子。<br>普通字符串或者长字符串的开头加上r前缀，就变成了原始字符串</p><p><strong>一般在写文件的路径时使用原始字符串更好</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str1 = r&#x27;原始字符串内容&#x27;</span><br><span class="line">str2 = r&quot;&quot;&quot;原始字符串内容&quot;&quot;&quot;</span><br><span class="line">print(str1)</span><br><span class="line">print(str2)</span><br></pre></td></tr></table></figure><h5 id="bytes"><a href="#bytes" class="headerlink" title="bytes"></a>bytes</h5><p>bytes只负责以字节序列的形式（<strong>二进制形式</strong>）来存储数据，至于这些数据到底表示什么内容（字符串、数字、图片、音频等），完全由程序的解析方式决定。如果采用合适的字符编码方式（字符集），字节串可以恢复成字符串；反之亦然，字符串也可以转换成字节串。</p><h5 id="Python缓存重用机制"><a href="#Python缓存重用机制" class="headerlink" title="Python缓存重用机制"></a>Python缓存重用机制</h5><img src="/post/7a8a89b3/24.png" class title="This is an image"><p>大家可以上手试一下这个</p><h5 id="Python-内置函数将字符串转换成想要的类型"><a href="#Python-内置函数将字符串转换成想要的类型" class="headerlink" title="Python 内置函数将字符串转换成想要的类型"></a>Python 内置函数将字符串转换成想要的类型</h5><p> eg：<br>int(string) 将字符串转换成 int 类型；<br>float(string) 将字符串转换成 float 类型；<br>bool(string) 将字符串转换成 bool 类型。</p><img src="/post/7a8a89b3/27.png" class title="This is an image"><h5 id="指定对齐方式"><a href="#指定对齐方式" class="headerlink" title="指定对齐方式"></a>指定对齐方式</h5><p>print() 输出的数据总是右对齐的。也就是说，当数据不够宽时，数据总是靠右边输出，而在左边补充空格以达到指定的宽度</p><img src="/post/7a8a89b3/26.png" class title="This is an image"><h5 id="指定小数精度和格式化字符串"><a href="#指定小数精度和格式化字符串" class="headerlink" title="指定小数精度和格式化字符串"></a>指定小数精度和格式化字符串</h5><p>对于小数（浮点数），print() 还允许指定小数点后的数字位数，也即指定小数的输出精度。<br>%m.nf<br>%.nf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">age = 8</span><br><span class="line">print(&quot;C语言！&quot; % age)</span><br></pre></td></tr></table></figure><h5 id="‘-’重复字符串"><a href="#‘-’重复字符串" class="headerlink" title="‘*’重复字符串"></a>‘*’重复字符串</h5><p>“* “除了可以用作乘法运算，还可以用来重复字符串，也即将 n 个同样的字符串连接起来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1 = &quot;hello &quot;</span><br><span class="line">print(str1 * 4)</span><br></pre></td></tr></table></figure><h5 id="x2F-和-x2F-x2F-运算符"><a href="#x2F-和-x2F-x2F-运算符" class="headerlink" title="&#x2F;和&#x2F;&#x2F;运算符"></a>&#x2F;和&#x2F;&#x2F;运算符</h5><p>&#x2F;的计算结果总是小数，不管是否能除尽，也不管参与运算的是整数还是小数。<br>&#x2F;&#x2F;当有小数参与运算时，结果才是小数，否则就是整数。</p><h5 id="取余"><a href="#取余" class="headerlink" title="取余%"></a>取余%</h5><p>只有当第二个数字是负数时，求余的结果才是负数。换句话说，求余结果的正负和第一个数字没有关系，只由第二个数字决定。%两边的数字都是整数时，求余的结果也是整数；但是只要有一个数字是小数，求余的结果就是小数。</p><h5 id="次方（乘方）运算符"><a href="#次方（乘方）运算符" class="headerlink" title="** 次方（乘方）运算符"></a>** 次方（乘方）运算符</h5><p>Python ** 运算符用来求一个 x 的 y 次方，也即次方（乘方）运算符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(&#x27;----次方运算----&#x27;)</span><br><span class="line">print(&#x27;3**4 =&#x27;, 3**4)</span><br><span class="line">print(&#x27;2**5 =&#x27;, 2**5)</span><br></pre></td></tr></table></figure><h5 id="is和is-not"><a href="#is和is-not" class="headerlink" title="is和is not"></a>is和is not</h5><img src="/post/7a8a89b3/28.png" class title="This is an image"><p>如何判断两个对象是否相同呢？答案是判断两个对象的内存地址。如果内存地址相同，说明两个对象使用的是同一块内存，当然就是同一个对象了<br>可以使用 dir()查询</p><h5 id="and-or-not"><a href="#and-or-not" class="headerlink" title="and,or,not"></a>and,or,not</h5><img src="/post/7a8a89b3/29.png" class title="This is an image"><h5 id="Python三目运算符"><a href="#Python三目运算符" class="headerlink" title="Python三目运算符"></a>Python三目运算符</h5><p>格式：<br>exp1 if condition else exp2</p><p>condition 是判断条件，exp1 和 exp2 是两个表达式。如果 condition 成立（结果为真），就执行 exp1，并把 exp1 的结果作为整个表达式的结果；如果 condition 不成立（结果为假），就执行 exp2，并把 exp2 的结果作为整个表达式的结果</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tkinter--Text文本框控件</title>
      <link href="/post/6b4ce71c.html"/>
      <url>/post/6b4ce71c.html</url>
      
        <content type="html"><![CDATA[<h4 id="Tkinter-Text文本框控件"><a href="#Tkinter-Text文本框控件" class="headerlink" title="Tkinter Text文本框控件"></a>Tkinter Text文本框控件</h4><p>Text 文本控件是 Tkinter 中经常使用的控件，与 Entry 控件相比，Text 控件用于显示和编辑多行文本，而 Entry 控件则适合处理单行文本。<br>Text 控件的有很多的适用场景，比如显示某个产品的详细信息，或者人物介绍等。</p><h5 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h5><p>除了基本的共有属性之外，Text 控件还具备以下属性：</p><p>autoseparators<br>默认为 True，表示执行撤销操作时<strong>是否自动插入一个“分隔符”</strong>（其作用是用于分隔操作记录）</p><p>exportselection<br>默认值为 True，表示被选中的文本是否可以被复制到剪切板，若是 False 则表示不允许。</p><p>insertbackground<br>设置插入光标的颜色，默认为 BLACK</p><p>insertborderwidth<br>设置插入光标的边框宽度，默认值为 0</p><p>insertofftime<br>该选项控制光标的闪烁频频率（灭的状态）</p><p>insertontime<br>该选项控制光标的闪烁频频率（亮的状态）</p><p>selectbackground<br>指定被选中文本的背景颜色，默认由系统决定</p><p>selectborderwidth<br>指定被选中文本的背景颜色，默认值是0</p><p>selectforeground<br>指定被选中文本的字体颜色，默认值由系统指定</p><p>setgrid<br>默认值是 False，指定一个布尔类型的值，确定是否启用网格控制</p><p>spacing1<br>指定 Text 控件文本块中每一行与上方的空白间隔，注意忽略自动换行，且默认值为 0。</p><p>spacing2<br>指定 Text 控件文本块中自动换行的各行间的空白间隔，忽略换行符，默认值为0</p><p>spacing3<br>指定 Text 组件文本中每一行与下方的空白间隔，忽略自动换行，默认值是 0</p><p>tabs<br>定制 Tag 所描述的文本块中 Tab 按键的功能，默认被定义为 8 个字符宽度，比如 tabs&#x3D;(‘1c’, ‘2c’, ‘8c’) 表示前 3 个 Tab 宽度分别为 1厘米，2厘米，8厘米。</p><p>undo<br>该参数默认为 False，表示关闭 Text 控件的“撤销”功能，若为 True 则表示开启</p><p>wrap<br>该参数用来设置当一行文本的长度超过 width 选项设置的宽度时，是否自动换行，参数值 none（不自动换行）、char（按字符自动换行）、word（按单词自动换行）</p><p>xscrollcommand<br>该参数与 Scrollbar 相关联，表示沿水平方向上下滑动</p><p>yscrollcommand<br>该参数与 Scrollbar 相关联，表示沿垂直方向左右滑动</p><h5 id="基本方法-即可调用的函数"><a href="#基本方法-即可调用的函数" class="headerlink" title="基本方法(即可调用的函数)"></a>基本方法(即可调用的函数)</h5><p>Text 中的方法有几十个之多，这里不进行一一列举，主要对常用的方法进行介绍，如下表所示：</p><p>bbox(index)<br>返回指定索引的字符的边界框，返回值是一个 4 元组，格式为<br>(x,y,width,height)</p><p>edit_modified()<br>该方法用于查询和设置 modified 标志（该标标志用于追踪 Text 组件的内容是否发生变化）</p><p>edit_redo()<br>“恢复”上一次的“撤销”操作，如果设置 undo 选项为 False，则该方法无效。</p><p>edit_separator()<br>插入一个“分隔符”到存放操作记录的栈中，用于表示已经完成一次完整的操作，如果设置 undo 选项为 False，则该方法无效。</p><p>get(index1, index2)<br>返回特定位置的字符，或者一个范围内的文字。</p><p>image_cget(index, option)<br>返回 index 参数指定的嵌入 image 对象的 option 选项的值，如果给定的位置没有嵌入 image 对象，则抛出 TclError 异常</p><p>image_create()<br>在 index 参数指定的位置嵌入一个 image 对象，该 image 对象必须是 Tkinter 的 PhotoImage 或 BitmapImage 实例。</p><p>insert(index, text)<br>在 index 参数指定的位置插入字符串，第一个参数也可以设置为 INSERT，表示在光标处插入，END 表示在末尾处插入。</p><p>delete(startindex [, endindex])<br>删除特定位置的字符，或者一个范围内的文字。</p><p>see(index)<br>如果指定索引位置的文字是可见的，则返回 True，否则返回 False。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from tkinter import *</span><br><span class="line">win = Tk()</span><br><span class="line">win.geometry(&#x27;400x420&#x27;)</span><br><span class="line"># 创建一个文本控件</span><br><span class="line"># width 一行可见的字符数；height 显示的行数</span><br><span class="line">text = Text(win, width=50, height=30, undo=True, autoseparators=False)</span><br><span class="line">text.pack()</span><br><span class="line"># INSERT 光标处插入；END 末尾处插入</span><br><span class="line">text.insert(INSERT, &#x27;xiaoyyangzst.vercel.app&#x27;)</span><br><span class="line">win.mainloop()</span><br></pre></td></tr></table></figure><p>上述代码中 Text 控件通过 heigt 和 width 参数来控制文本域的大小（即纸张大小），当然您也可以将其设置为自适用模式，即不设置具体的文本域大小。</p><p>下面定义上述代码做一下稍微改动，为其增加“撤销”和“恢复”的功能，代码如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from tkinter import *</span><br><span class="line">win = Tk()</span><br><span class="line">win.geometry(&#x27;400x300&#x27;)</span><br><span class="line">text = Text(win, width=50, height=20, undo=True, autoseparators=False)</span><br><span class="line">text.grid()</span><br><span class="line"># INSERT 光标处插入；END 末尾处插入</span><br><span class="line">text.insert(INSERT, &#x27;xiaoyyangzst.vercel.app&#x27;)</span><br><span class="line"># 定义撤销和恢复方法，调用edit_undo()和 edit_redo()方法</span><br><span class="line">def backout():</span><br><span class="line">    text.edit_undo()</span><br><span class="line">def regain():</span><br><span class="line">    text.edit_redo()</span><br><span class="line">Button(win,text = &#x27;撤销&#x27;,command = backout).grid(row=3, column=0, sticky=&quot;w&quot;, padx=10, pady=5)</span><br><span class="line">Button(win,text = &#x27;恢复&#x27;,command = regain).grid(row=3, column=0, sticky=&quot;e&quot;, padx=10, pady=5)</span><br><span class="line">win.mainloop()</span><br></pre></td></tr></table></figure><p>注意：点击“撤销”按钮后输入的所有语句都会被删除，如果再点击“恢复”按钮，刚刚删除的内容又会恢复。</p><p>文本控件（Text）支持三种类型的特殊结构，即 Mark、Tag 以及 Index，每一种结构都有相应的方法，下面对这些结构做相关的介绍。</p><p><strong>Index文本索引</strong></p><p>Index 索引，用于指定字符在文本中的真实位置，这与我们经常使用 Python 索引是一样的，不过在 Text 文本控件中，两者之间的使用形式存在一些差异。Tkinter 提供以下文本索引类型，如下表所示：</p><p><strong>索引类型说明</strong><br>INSERT<br>对应插入光标的位置</p><p>CURRENT<br>对应与鼠标坐标最接近的位置</p><p>END<br>对应 Text 控件的文本域中最后一个字符的下一个位置</p><p>“line.column”<br>表示某一行某一列的一个位置，比如 1.2 表示第一行第二列的一个位置</p><p>“line.end”<br>表示某一行到末尾的最后一个位置</p><p>SEL一种针对于 Tag 的特殊索引用法，(SEL_FIRST,SEL_LAST) 表示当前被选中的范围</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from tkinter import *</span><br><span class="line">root = Tk()</span><br><span class="line">root.geometry(&#x27;400x200&#x27;)</span><br><span class="line">text =Text(root, width=35, heigh=15)</span><br><span class="line">text.pack()</span><br><span class="line"># 在文本域中插入文字</span><br><span class="line">text.insert(INSERT, &#x27;漂亮鬼&#x27;)</span><br><span class="line"># 继续向后插入文字</span><br><span class="line">text.insert(&quot;insert&quot;, &quot;，I love Python&quot;)</span><br><span class="line"># 获取字符，使用get() 方法</span><br><span class="line">print(text.get(&quot;1.3&quot;, &quot;1.end&quot;))</span><br><span class="line"># 显示窗口</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><p><strong>Tag文本标签</strong></p><p>Tag（标签）用来给一定范围内的文字起一个标签名，通过该标签名就能操控某一范围内的文字，比如修改文本的字体、尺寸和颜色。除此之外，该标签还可以和事件函数绑定在一起使用。<br><strong>这里需要注意，Tags 的名字是由字符串组成的，但不能是空白字符串。</strong></p><p>Tag 提供了一些常用的方法，通过这些方法可以操作 Tag（标签），常用方法如下：</p><p>tag_add(tagName,index1,index2)<br>为指定索引范围内的内容添加一个标签名字，如果 index2 不存在，则单独为 Index1 指定的内容添加</p><p>Tagtag_bind(tagName, sequence, func, add&#x3D;None)<br>为 Tag 绑定事件，解除绑定使用 tag_unbind() 方法</p><p>tag_cget（tagName,option）<br>返回 tagName 指定的 option 选项的值</p><p>tag_configure(tagName, cnf&#x3D;None, **kw)</p><p>设置 tagName 的选项</p><p>tag_delete(tagNames)<br>删除单个或者多个 tagNames 指定的标签</p><p>tag_lower(tagName, belowThis&#x3D;None)<br>降低 Tag 的优先级，如果 belowThis 参数不为空，则表示 tagName 需要比 belowThis 指定的 Tag 优先级更低</p><p>tag_names(index&#x3D;None)<br>如果不带参数，表示返回 Text 组件中所有 Tags 的名字，若存在 index 参数则返回该位置上所有 Tags 的名字</p><p>tag_nextrange(tagName, index1, index2&#x3D;None) 在 index1 到 index2 的范围内第一个 tagName 的位置，若不存在则返回空字符串。</p><p>tag_raise(tagName, aboveThis&#x3D;None)<br>提高 Tag 的优先级，如果 aboveThis 参数不为空，则表示 tagName 需要比 aboveThis 指定的 Tag 优先级更高</p><p>tag_ranges(tagName)<br>返回所有 tagName 指定的文本，并将它们的范围以列表的形式返回</p><p>tag_remove(tagName, index1, index2&#x3D;None)<br>删除 index1 到 index2 之间所有的 tagName，如果忽略 index2 参数，那么只删除 index1 指定字符的 tagName</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">from tkinter import *</span><br><span class="line">from tkinter import *</span><br><span class="line">win = Tk()</span><br><span class="line">win.title(string = &quot;漂亮鬼&quot;)</span><br><span class="line">text = Text (win)</span><br><span class="line"># 在Text控件内插入- -段文字 ，INSERT表示在光标处插入，END表示在末尾处插入</span><br><span class="line">text.insert (INSERT,  text.insert(INSERT, &#x27;xiaoyyangzst.vercel.app\n\n&quot;)</span><br><span class="line"># 跳下一行</span><br><span class="line">text.insert (INSERT, &quot;\n\n&quot;)</span><br><span class="line"># 在Text控件内插入- -个按钮</span><br><span class="line">button = Button(text, text=&quot;关闭&quot;,command=win.quit)</span><br><span class="line">text. window_create (END, window=button)</span><br><span class="line"># 填充水平和垂直方向,这里设置 expand为 True 否则不能垂直方向延展</span><br><span class="line">text .pack (fill=BOTH,expand=True)</span><br><span class="line"># 在第一行文字的第0个字符到第6个字符处插入标签，标签名称为&quot;name&quot;</span><br><span class="line">text.tag_add(&quot;name&quot;, &quot;1.0&quot;, &quot;1.6&quot;)</span><br><span class="line"># 将插入的按钮设置其标签名为&quot;button&quot;</span><br><span class="line">text.tag_add (&quot;button&quot;, button)</span><br><span class="line">#使用 tag_config() 来改变标签&quot;name&quot;的前景与背景颜色,并加下画线，通过标签控制字符的样式</span><br><span class="line">text.tag_config(&quot;name&quot;, font=(&#x27;微软雅黑&#x27;,18,&#x27;bold&#x27;),background=&quot;yellow&quot;, foreground= &quot;blue&quot;,underline=1)</span><br><span class="line">#设置标签&quot;button&quot;的居中排列</span><br><span class="line">text. tag_config(&quot;button&quot;, justify=&quot;center&quot;)</span><br><span class="line">win .mainloop()</span><br></pre></td></tr></table></figure><p><strong>Mark文本标记</strong></p><p>Mark（标记）通常被用来当作书签，它可以帮助用户快速找到内容的指定位置，并且跟随相应的字符一起移动。<br>Mark 有两种类型的标记，分别是“INSERT”和“CURRENT”，其含义如下：<br>INSERT：指定当前插入光标的位置，Tkinter 会在该位置绘制一个闪烁的光标；<br>CURRENT：用于指定当前光标所处坐标最邻近的位置。它们是 Tkinter 中预定义的标记，因此不能被删除。除此上述标记外，我们还可以通过 user-define marks（用户自定义标记） 的方式来自定义 Mark。Tkinter 也提供了一些有关 Mark 的常用的方法，<br>如下所示：</p><p>mark_gravity(markName, direction&#x3D;None)<br>设置 Mark 的移动方向，默认是 “right”，也可以设置为 “left” ，表示即如果在 Mark 处插入文本的话，Mark 的标记移动方向，也就是文本的插入方向。</p><p>mark_names()<br>返回 Text 组件中所有 Marks 的名字</p><p>mark_next(index)<br>返回在 index 指定的位置后边的一个 Mark 的名字</p><p>mark_previous(index)<br>返回在 index 指定的位置前边的一个 Mark 的名字</p><p>mark_set(markName, index)<br>移动 Mark 到 index 参数指定的位置，如果 markName 参数指定的 Mark 不存在，则创建一个新的 </p><p>Markmark_unset(MarkName)<br>删除指定的 Mark</p><p>注意：如果在 Mark 标记的位置之前插入或删除文本，那么 Mark 跟着一起移动。如果要删除 Mark 需要使用 mark_unset() 方法，但是只会删除 Mark 周围的文本，并不会删除 Mark 标记本身。下面看一组简单的实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import tkinter as tk</span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.geometry(&#x27;400x200&#x27;)</span><br><span class="line">text = tk.Text(root, width=35, heigh=15)</span><br><span class="line">text.pack()</span><br><span class="line"></span><br><span class="line">text.insert(&quot;insert&quot;, &quot;nihao&quot;)</span><br><span class="line"># 设置标记，这里的 1.end 表示 第一行最后一个字符，当然也可以使用数字来表示比如 1.5 表示第一行第五个字符</span><br><span class="line">text.mark_set(&quot;name&quot;, &quot;1.end&quot;)</span><br><span class="line">text.insert(&quot;name&quot;, &quot;,网址：www.xiaoyangzst.vercel.app&quot;)</span><br><span class="line"># 跟着自动移动，往后插入，而不是停留在原位置</span><br><span class="line">text.insert(&quot;name&quot;, &quot;,欢迎光临&quot;)</span><br><span class="line"># 若使用 mark_unset() 可以删除指定的标记</span><br><span class="line"># text.mark_unset(&quot;name&quot;)</span><br><span class="line"># 但使用delete来清楚所有的内容， mark 标记依旧会存在</span><br><span class="line"># text.delete(&quot;1.0&quot;,&quot;end&quot;)</span><br><span class="line"># 依然可以使用 name标记来插入</span><br><span class="line"># text.insert(&quot;name&quot;, &quot;Python答疑&quot;)</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python--tkinter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pillow为图片添加水印</title>
      <link href="/post/67fd3ea0.html"/>
      <url>/post/67fd3ea0.html</url>
      
        <content type="html"><![CDATA[<h3 id="Pillow为图片添加水印"><a href="#Pillow为图片添加水印" class="headerlink" title="Pillow为图片添加水印"></a>Pillow为图片添加水印</h3><p>Pillow 库提供了添加水印的方法，操作简单，易学、易用。<br>水印是附着在原图片上一段文字信息，因此添加水印的过程中会涉及两个问题：</p><p>第一、如何使文字信息附着在图片上；</p><p>第二、如何绘制文字信息。只要解决了这两个问题就可以成功添加水印。</p><p>Pillow 提供的ImageDraw和ImageFont模块成功解决了上述问题。</p><h4 id="ImageDraw"><a href="#ImageDraw" class="headerlink" title="ImageDraw"></a>ImageDraw</h4><p>PIL.ImageDraw 模块提供了一系列的绘图方法，通过该模块可以创建一个新的图形，或者在现有的图像上再绘制一个图形，从而起到对原图注释和修饰的作用。</p><p>draw &#x3D; ImageDraw.Draw(im)</p><p><strong>上述方法会返回一个 ImageDraw 对象</strong><br>参数 im 表示 Image 对象。<strong>这里我们可以把 Image 对象理解成画布</strong>，通过调用 ImageDraw 对象的一些方法，实现了在画布上绘制出新的图形目的。ImageDraw 对象的常用方法如下表所示：</p><img src="/post/67fd3ea0/67.png" class title="This is an image"><p>表格中第一个方法 text() 需要与 ImageFont 模块一起使用</p><p>绘制矩形图的语法格式如下：</p><p>draw.rectangle(xy, fill&#x3D;None, outline&#x3D;None)</p><p>参数说明如下：<br>xy：<strong>元组参数值</strong>，以图像的左上角为坐标原点，表示矩形图的位置、图形大小的坐标序列，形如 ((x1,y1,x2,y2))；<br>fill：矩形图的背景填充色；</p><p>outline：矩形图的边框线条颜色</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image, ImageDraw</span><br><span class="line">img = Image.open(&quot;D:\\File\\All\\web\\python\\blog\\src=http __pic4.zhimg.com_v2-9428748e22b6e7a563de20aa75a257e3_r.jpg&amp;refer=http __pic4.zhimg.webp&quot;)</span><br><span class="line">draw = ImageDraw.Draw(img)</span><br><span class="line">draw.rectangle((0,0,100,100),fill= &quot;blue&quot;,outline=(0,0,0))</span><br><span class="line">img.show()</span><br></pre></td></tr></table></figure><h4 id="ImageFont"><a href="#ImageFont" class="headerlink" title="ImageFont"></a>ImageFont</h4><p>PIL.ImagreFont 模块通过加载不同格式的字体文件，从而在图像上绘制出不同类型的文字，<br>如 TrueType 和 OpenType 类型的字体。</p><p>创建字体对象的语法格式如下：</p><p>font &#x3D; ImageFont.truetype(font&#x3D;’字体文件路径’, size&#x3D;字体大小)</p><p>如果想要在图片上添加文本，还需要使用 ImageDraw.text() 方法，语法格式如下：<br>draw.text((x,y), “text”, font, fill)</p><p>参数说明如下：<br>(x,y)：图像左上角为坐标原点，(x,y) 表示添加文本的起始坐标位置；<br>text：字符串格式，要添加的文本内容；<br>font：ImageFont 对象；<br>fill：文本填充颜色。下面看一组使用示例，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image, ImageDraw,ImageFont</span><br><span class="line">img = Image.open(&quot;D:\\File\\All\\web\\python\\blog\\src=http __pic4.zhimg.com_v2-9428748e22b6e7a563de20aa75a257e3_r.jpg&amp;refer=http __pic4.zhimg.webp&quot;)</span><br><span class="line">draw = ImageDraw.Draw(img)</span><br><span class="line">font = ImageFont.truetype(&quot;C:/Windows/Fonts/FREESCPT.TTF&quot;,size=70)</span><br><span class="line">draw.text(xy=(80,50),text=&#x27;hello&#x27;,fill=&quot;#AAAAFF&quot;,font=font)</span><br><span class="line">img.show()</span><br></pre></td></tr></table></figure><p>一般可以把这些都写在一个函数里面留一个接口，就好了</p>]]></content>
      
      
      <categories>
          
          <category> python--Pillow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pillow图像降噪处理和颜色处理</title>
      <link href="/post/4c1116f9.html"/>
      <url>/post/4c1116f9.html</url>
      
        <content type="html"><![CDATA[<h4 id="Pillow图像降噪处理"><a href="#Pillow图像降噪处理" class="headerlink" title="Pillow图像降噪处理"></a>Pillow图像降噪处理</h4><p>由于成像设备、传输媒介等因素的影响，图像总会或多或少的存在一些不必要的干扰信息，我们将这些干扰信息统称为“噪声”</p><p>如数字图像中常见的“椒盐噪声”，指的是图像会随机出现的一些白、黑色的像素点。图像噪声既影响了图像的质量，又妨碍人们的视觉观赏。因此，噪声处理是图像处理过程中必不可少的环节之一，我们把处理图像噪声的过程称为“图像降噪”。</p><p>随着数字图像技术的不断发展，图像降噪方法也日趋成熟，通过某些算法来构造滤波器是图像降噪的主要方式。滤波器能够有效抑制噪声的产生，并且不影响被处理图像的形状、大小以及原有的拓扑结构。</p><p>Pillow 通过 ImageFilter 类达到图像降噪的目的，该类中集成了不同种类的滤波器，通过调用它们从而实现图像的平滑、锐化、边界增强等图像降噪操作。</p><p><strong>使用 ImageFilter 类也会返回一个新对象</strong></p><p>常见的降噪滤波器如下</p><img src="/post/4c1116f9/66.png" class title="This is an image"><p>模糊处理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image, ImageFilter</span><br><span class="line">img = Image.open(&quot;D:\\File\\All\\web\\python\\blog\\947849.jpg&quot;)</span><br><span class="line">img1 = img.filter(ImageFilter.BLUR)</span><br><span class="line">img1.show()</span><br></pre></td></tr></table></figure><p>轮廓图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image, ImageFilter</span><br><span class="line">img = Image.open(&quot;D:\\File\\All\\web\\python\\blog\\947849.jpg&quot;)</span><br><span class="line">img1 = img.filter(ImageFilter.CONTOUR)</span><br><span class="line">img1.show()</span><br></pre></td></tr></table></figure><p>边缘检测 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image, ImageFilter</span><br><span class="line">img = Image.open(&quot;D:\\File\\All\\web\\python\\blog\\947849.jpg&quot;)</span><br><span class="line">img1 = img.filter(ImageFilter.FIND_EDGES)</span><br><span class="line">img1.show()</span><br></pre></td></tr></table></figure><p>浮雕图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image, ImageFilter</span><br><span class="line">img = Image.open(&quot;D:\\File\\All\\web\\python\\blog\\947849.jpg&quot;)</span><br><span class="line">img1 = img.filter(ImageFilter.EMBOSS)</span><br><span class="line">img1.show()</span><br></pre></td></tr></table></figure><p>可以一个一个试试里面的不同的滤波器，还是挺好玩的 ，这里面这个轮廓图加上界面的话可以弄一个画素描的程序出来，但是一般都是用opencv里面的玩</p><h4 id="Pillow图像颜色处理"><a href="#Pillow图像颜色处理" class="headerlink" title="Pillow图像颜色处理"></a>Pillow图像颜色处理</h4><p>Pillow 提供了颜色处理模块 ImageColor，该模块支持不同格式的颜色，比如 RGB 格式的颜色三元组、十六进制的颜色名称（#ff0000）以及颜色英文单词（”red”）。同时，它还可以将 CSS（层叠样式表，用来修饰网页）风格的颜色转换为 RGB 格式。</p><p>注意，在 ImageColor 模块对颜色的大小写并不敏感，比如 “Red” 也可以写为 “ red”。</p><p><strong>颜色命名</strong></p><p>ImageColor 支持多种颜色模式的的命名（即使用固定的格式对颜值进行表示），比如我们熟知的<br>RGB 色彩模式，除此之外，还有 HSL （色调-饱和度-明度）、HSB （又称 HSV，色调-饱和度-亮度）色彩模式。</p><p>HSL：<br>H：即 Hue 色调，取值范围 0 -360，其中 0 表示“red”，120 表示 “green”，240 表示“blue”；</p><p>S：即 Saturation 饱和度，代表色彩的纯度，取值 0~100%，其中 0 代表灰色（gry），100% 表示色光最饱和；</p><p>L：即 Lightness 明度，取值为 0~100%，其中 0 表示“black”黑色，50% 表示正常颜色，100% 则表示白色。</p><p>getrgb()方法顾名思义，该函数用来得到颜色的 RGB 值，语法格式如下：</p><p>PIL.ImageColor.getrgb(color)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image,ImageColor</span><br><span class="line">color1=ImageColor.getrgb(&quot;blue&quot;)</span><br><span class="line">print(color1)</span><br><span class="line">color2=ImageColor.getrgb(&#x27;#DCDCDC&#x27;)</span><br><span class="line">print(color2)</span><br><span class="line">color3=ImageColor.getrgb(&#x27;HSL(0,100%,50%)&#x27;)</span><br><span class="line">print(color3)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python--Pillow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tkinter库--Entry输入控件</title>
      <link href="/post/6210bf9c.html"/>
      <url>/post/6210bf9c.html</url>
      
        <content type="html"><![CDATA[<h4 id="Tkinter-Entry输入控件"><a href="#Tkinter-Entry输入控件" class="headerlink" title="Tkinter Entry输入控件"></a>Tkinter Entry输入控件</h4><p>Entry 控件是 Tkinter GUI 编程中的基础控件之一，它的作用就是允许用户输入内容，从而实现 GUI 程序与用户的交互，比如当用户登录软件时，输入用户名和密码，此时就需要使用 Entry 控件。</p><p>Entry 控件使用起来非常简单，下面对该控件做简单的介绍。<br>基本语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tk_entry = Entry( master, option, ... )</span><br></pre></td></tr></table></figure><h5 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h5><p>基本属性Entry 控件除了具备一些共有属性之外，还有一些自身的特殊属性，如下表所示：</p><p>exportselection<br>默认情况下，如果在输入框中选中文本会复制到粘贴板，如果要忽略这个功能，可以设置为 exportselection&#x3D;0</p><p>selectbackground<br>选中文字时的背景颜色</p><p>selectforeground<br>选中文字时的前景色</p><p>show<br>指定文本框内容以何种样式的字符显示，<br>比如密码可以将值设为 show&#x3D;”*”</p><p>textvariable<br>输入框内值，也称动态字符串，<strong>使用 StringVar() 对象来设置，而 text 为静态字符串对象</strong></p><p>text</p><p>输入框内值，也称静态字符串</p><p>xscrollcommand<br>设置输入框内容滚动条，当输入的内容大于输入框的宽度时使用户</p><p>动态数据类型上述表格中提及了 StringVar() 方法，和其同类的方法还有 BooleanVar()、DoubleVar()、IntVar() 方法，不难看出他们分别代表一种数据类型，即字符串、布尔值、浮点型、整型，这些方法并不属于 Python 内置方法，而是 Tkinter 特有的方法。</p><p>在界面编程的过程中，有时我们需要“动态跟踪”一些变量值的变化，从而保证值的变换及时的反映到显示界面上，但是 Python 内置的数据类型是无法这一目的的，因此使用了 Tcl 内置的对象，我们把这些方法创建的数据类型称为“动态类型”<br>比如 StringVar() 创建的字符串，称为“动态字符串”。常与textvariable一块使用<br>这里写一个时钟看看其的用法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import tkinter as tk</span><br><span class="line">import time #这里需要引入另一个模块，为了获取时间</span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.geometry(&#x27;450x150&#x27;)</span><br><span class="line"># 获取时间的函数</span><br><span class="line">def gettime():</span><br><span class="line">    # 获取当前时间</span><br><span class="line">    dstr.set(time.strftime(&quot;%H:%M:%S&quot;))</span><br><span class="line">    # 每隔 1s 调用一次 gettime()函数来获取时间</span><br><span class="line">    root.after(1000, gettime)</span><br><span class="line"># 生成动态字符串</span><br><span class="line">dstr = tk.StringVar()</span><br><span class="line"># 利用 textvariable 来实现文本变化</span><br><span class="line">lb = tk.Label(root,textvariable=dstr,font=(&quot;楷书&quot;,45))</span><br><span class="line">lb.pack()</span><br><span class="line"># 调用生成时间的函数</span><br><span class="line">gettime()</span><br><span class="line"># 显示窗口</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h5><p>常用方法除了一些基本的属性之外，Entry 控件还提供了一些常用的方法，如下所示：</p><p>delete()<br>根据索引值删除输入框内的值</p><p>get()<br>获取输入框内的值</p><p>set()<br>设置输入框内的值</p><p>insert()<br>在指定的位置插入字符串</p><p>index()<br>返回指定的索引值</p><p>select_clear()<br>取消选中状态</p><p>select_adujst()<br>确保输入框中选中的范围包含 index 参数所指定的字符，选中指定索引和光标所在位置之前的字符</p><p>select_from (index)<br>设置一个新的选中范围，通过索引值 index 来设置</p><p>select_present()<br>返回输入框是否有处于选中状态的文本，如果有则返回 true，否则返回false</p><p>select_to()<br>选中指定索引与光标之间的所有值</p><p>select_range()<br>选中指定索引与光标之间的所有值，参数值为 start,end，要求 start 必须小于 end。</p><p>注意：<br>在 Entry 控件中，我们可以通过以下方式来指定字符的所在位置：</p><p>数字索引：表示从 0 开始的索引数字；</p><p>“ANCHOE”：在存在字符的情况下，它对应第一个被选中的字符；</p><p>“END”：对应已存在文本中的最后一个位置；</p><p>“insert(index,’字符’)：将字符插入到 index 指定的索引位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import tkinter as tk</span><br><span class="line">win = tk.Tk()</span><br><span class="line">win.geometry(&#x27;500x500&#x27;)</span><br><span class="line">win.resizable(0,0)</span><br><span class="line">entry1 = tk.Entry(win,width=300)</span><br><span class="line">entry1.pack(padx=20, pady=20)</span><br><span class="line"># 插入默认文本</span><br><span class="line">entry1.insert(0,&#x27;博主的个人博客：xiaoyangzst.velcer.app&#x27;)</span><br><span class="line"># 得到输入框字符串</span><br><span class="line">print(entry1.get())</span><br><span class="line"># entry1.delete(0, &quot;end&quot;)</span><br><span class="line"># 删除所有字符</span><br><span class="line"># entry1.delete(0, tk.END)</span><br><span class="line">win.mainloop()</span><br></pre></td></tr></table></figure><h5 id="Entry控件验证功能"><a href="#Entry控件验证功能" class="headerlink" title="Entry控件验证功能"></a>Entry控件验证功能</h5><p>Entry 控件也提供了对输入内容的验证功能，比如要求输入英文字母，你却输入了数字，这就属于非法输入，Entry 控件通过以下参数实现对内容的校验：</p><p>validate<br>指定验证方式，字符串参数，参数值有 focus、focusin、focusout、key、all、none。 </p><p>validatecommand<br>指定用户自定义的验证函数，该函数只能返回 True 或者 Fasle</p><p>invalidcommand<br>当 validatecommand 指定的验证函数返回 False 时，可以使用该参数值再指定一个验证函数。</p><p>下面对 <strong>validate</strong> 的参数值做简单的介绍：</p><p>focus<br>当 Entry 组件获得或失去焦点的时候验证</p><p>focusin<br>当 Entry 组件获得焦点的时候验证</p><p>focusout<br>当 Entry 组件失去焦点的时候验证</p><p>key<br>当输入框被编辑的时候验证</p><p>all<br>当出现上边任何一种情况的时候验证</p><p>none<br>默认不启用验证功能，需要注意的是这里是字符串的 ‘none’</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import tkinter as tk</span><br><span class="line">from tkinter import messagebox</span><br><span class="line">win = tk.Tk()</span><br><span class="line">win.geometry(&#x27;250x200+250+200&#x27;)</span><br><span class="line">win.resizable(0,0)</span><br><span class="line">labe1 = tk.Label(win,text=&quot;账号：&quot;)</span><br><span class="line">labe1.grid(row=0)</span><br><span class="line">labe2 = tk.Label(win,text=&quot;密码：&quot;)</span><br><span class="line">labe2.grid(row=1)</span><br><span class="line">Dy_String = tk.StringVar()</span><br><span class="line">def check():</span><br><span class="line">    if entry1.get()== &quot;漂亮鬼&quot;:</span><br><span class="line">        messagebox.showinfo(&quot;恭喜&quot;,&quot;输入正确&quot;)</span><br><span class="line">    else:</span><br><span class="line">        messagebox.showinfo(&quot;恭喜&quot;,&quot;输入错误&quot;)</span><br><span class="line">    </span><br><span class="line"># 使用验证参数 validata,参数值为 focusout 当失去焦点的时候，验证输入框内容是否正确</span><br><span class="line">entry1 = tk.Entry(win,textvariable =Dy_String,validate =&quot;focusout&quot;,validatecommand=check)</span><br><span class="line">entry2 = tk.Entry(win,textvariable =Dy_String,validate =&quot;focusout&quot;,validatecommand=check)</span><br><span class="line"># 对控件进行布局管理，放在文本标签的后面</span><br><span class="line">entry1.grid(row=0, column=1)</span><br><span class="line">entry2.grid(row=1, column=1)</span><br><span class="line">win.mainloop()</span><br></pre></td></tr></table></figure><p>不仅如此，Tkinter 还为验证函数提供可一些<strong>额外</strong>的选项，不过想要使用这些额外选项，需要提前使用 <strong>register()</strong> 方法对验证函数进行注册，</p><p>常用的选项：<br>%d<br>有 3 个参数值，其中 0 表示删除操作；1 表示插入操作；2 表示获得、失去焦点或 textvariable 变量的值被修改导</p><p>%i<br>当用户进行插入或者删除操作的时，该选项不爱哦是插入或者删除的索引位置，若是其他的情况则选项值为 -1</p><p>%P<br>该选项值指定了输入框内的文本内容，只有当输入框的值允许改变的时候，该选项值才会生效。</p><p>%s<br>改值为调用验证函数钱输入框内的文本内容</p><p>%S<br>该选项值，只有插入或者删除操作触发验证函数的时候才会生效，它表示了被删除或者插入的内容</p><p>%v<br>表示当前 Entry 控件的 validate 参数的值</p><p>%V<br>表示触发验证函数的原因，值为 focus、focusin 、focusout、all、key.. 中的一个。</p><p>%W<br>该选项表示控件类型，即控件的名字（Entry）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">from tkinter import *</span><br><span class="line"># 创建窗体</span><br><span class="line">win = Tk()</span><br><span class="line">win.geometry(&#x27;300x300&#x27;)</span><br><span class="line"># 创建一个容器来包括其他控件</span><br><span class="line">frame = Frame (win)</span><br><span class="line"># 创建一个计算器</span><br><span class="line">def calc() :</span><br><span class="line">    result = &quot;= &quot;+ str (eval(expression.get()))</span><br><span class="line">    label.config(text =result)</span><br><span class="line">label = Label (frame)</span><br><span class="line">entry = Entry (frame)</span><br><span class="line">expression = StringVar ()</span><br><span class="line">entry [&quot;textvariable&quot;] = expression</span><br><span class="line">button1 = Button (frame, text=&quot;等 于&quot;,command=calc)</span><br><span class="line">entry.focus ()</span><br><span class="line">frame.pack ()</span><br><span class="line">entry .pack()</span><br><span class="line">label .pack (side=&quot;left&quot;)</span><br><span class="line">button1.pack (side=&quot;right&quot;)</span><br><span class="line">frame .mainloop()</span><br></pre></td></tr></table></figure><p>这种博主也用的少，可以了解一下就好了</p><h5 id="Spinbox-高级输入框"><a href="#Spinbox-高级输入框" class="headerlink" title="Spinbox 高级输入框"></a>Spinbox 高级输入框</h5><p>Spinbox 高级输入框Spinbox 是 Entry 控件的升级版，该控件不仅允许用户直接输入内容，还支持用户使用微调选择器（即上下按钮调节器）来输入内容。在一般情况下，Spinbox 控件用于在固定的范围内选取一个值的时候使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import tkinter as tk</span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.geometry(&#x27;300x200+300+300&#x27;)</span><br><span class="line"># 如果是数字使用 from_和to参数，范围 0-20,并且与2步长递增或递减</span><br><span class="line">w = tk.Spinbox(root,from_=0,to=20, increment=2,width = 15,)</span><br><span class="line">w.pack()</span><br><span class="line"># 显示窗口</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><p><strong>若不是数字，而是字符串形式的选项值，则采用values参数以元组的形式进行传参</strong>，如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import tkinter as tk</span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.geometry(&#x27;300x200+300+300&#x27;)</span><br><span class="line"># 使用 values 参数以元组的形式进行传参</span><br><span class="line">strings = tk.Spinbox(root,values=(&#x27;Python&#x27;,&#x27;java&#x27;,&#x27;C语言&#x27;,&#x27;PHP&#x27;))</span><br><span class="line">strings.pack()</span><br><span class="line"># 开启事件循环</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python--tkinter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tkinter库--Button控件</title>
      <link href="/post/11221ecd.html"/>
      <url>/post/11221ecd.html</url>
      
        <content type="html"><![CDATA[<h4 id="Tkinter-Button按钮控件"><a href="#Tkinter-Button按钮控件" class="headerlink" title="Tkinter Button按钮控件"></a>Tkinter Button按钮控件</h4><p>Button 控件是 Tkinter 中常用的窗口部件之一，同时也是实现程序与用户交互的主要控件。通过用户点击按钮的行为来执行回调函数，是 Button 控件的主要功用。</p><p>首先自定义一个函数或者方法，然后将函数与按钮关联起来，最后，当用户按下这个按钮时，Tkinter 就会自动调用相关函数。</p><p>按钮控件使用起来非常简单，它同样可以包含文本、图像、位图，并通过command参数回调函数。当然按钮也并非一定要执行回调函数（callback function），它也只可以当一个“摆设”，不过这样的按钮是没有“灵魂的”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import tkinter as tk</span><br><span class="line"># from setuptools import Command</span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.geometry(&quot;300x300&quot;)</span><br><span class="line">btn = tk.Button(root, text =&quot;xiaoyang&quot;, command=quit)</span><br><span class="line">btn.pack()</span><br><span class="line">root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="Button-控件的常营属性如下所示："><a href="#Button-控件的常营属性如下所示：" class="headerlink" title="Button 控件的常营属性如下所示："></a>Button 控件的常营属性如下所示：</h5><p>anchor<br>控制文本所在的位置，默认为中心位置（CENTER）</p><p>activebackground<br>当鼠标放在按钮上时候，按钮的背景颜色</p><p>activeforeground当鼠标放在按钮上时候，按钮的前景色</p><p>bd<br>按钮边框的大小，默认为 2 个像素</p><p>bg<br>按钮的背景色</p><p>command<br>用来执行按钮关联的回调函数。当按钮被点击时，执行该函数</p><p>fg<br>按钮的前景色</p><p>font按钮文本的字体样样式</p><p>height<br>按钮的高度</p><p>highlightcolor<br>按钮控件高亮处要显示的颜色</p><p>image<br>按钮上要显示的图片</p><p>justify<br>按钮显示多行文本时，用来指定文本的对齐方式，参数值有 LEFT&#x2F;RIGHT&#x2F;CENTER</p><p>padx&#x2F;pady<br>padx 指定 x 轴（水平方向）的间距大小，pady 则表示 y轴（垂直方向）的间距大小</p><p>ipadx&#x2F;ipady<br>ipadx 指标签文字与标签容器之间的横向距离；</p><p>ipady 则表示标签文字与标签容器之间的纵向距离</p><p>state设置按钮的可用状态，可选参数有NORMAL&#x2F;ACTIVE&#x2F;DISABLED，默认为 NORMAL</p><p>text<br>按钮控件要显示的文本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import tkinter as tk</span><br><span class="line">from tkinter import messagebox</span><br><span class="line"># from setuptools import Command </span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.geometry(&quot;300x300&quot;)</span><br><span class="line">def tishi():</span><br><span class="line">    # 使用消息对话框控件，showinfo()表示温馨提示</span><br><span class="line">    messagebox.showinfo(title=&#x27;温馨提示&#x27;, message=&#x27;hello&#x27;)</span><br><span class="line">btn = tk.Button(root, text =&quot;xiaoyang&quot;, command=tishi)</span><br><span class="line">btn.pack()</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><p>下面为 Button 控件添加一张背景图片，实现代码如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import tkinter as tk</span><br><span class="line">from tkinter import Image, messagebox</span><br><span class="line"># from setuptools import Command </span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.geometry(&quot;300x300&quot;)</span><br><span class="line">photo = tk.PhotoImage(file=&quot;D:\\File\\All\\web\\python\\blog\\99.png&quot;)</span><br><span class="line">def tishi():</span><br><span class="line">    # 使用消息对话框控件，showinfo()表示温馨提示</span><br><span class="line">    messagebox.showinfo(title=&#x27;温馨提示&#x27;, message=&#x27;hello&#x27;)</span><br><span class="line">btn = tk.Button(root, text =&quot;xiaoyang&quot;, command=tishi,image= photo,width=20,height=20)</span><br><span class="line">btn.pack()</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><h5 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h5><p>按钮的布局按钮在主窗口中的布局，通常使用 grid() 函数来完成，该函数以网格状的形式（即行和列）来管理窗口的布局。grid() 布局管理器提供了一个sticky参数，通过该参数可以设置按钮的方位，该参数默认将控件设置居中，其他参数值有 N&#x2F;S&#x2F;W&#x2F;E（上&#x2F;下&#x2F;左&#x2F;右），而且可以组合在一起使用，比如 NW&#x2F;WE&#x2F;SE&#x2F;SW&#x2F;NE 等，这与anchor参数控制文本的显示位置，有着异曲同工之妙。如下图所示：</p><p>注意：<br><strong>值得大家注意的是 grid() 布局方法不能与 pack() 混合在一起使用</strong></p><p>使用了grid布局就不用再使用pack了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import tkinter as tk</span><br><span class="line">from tkinter import messagebox</span><br><span class="line">win = tk.Tk()</span><br><span class="line">win.geometry(&#x27;400x200+100+100&#x27;)</span><br><span class="line">win.resizable(0,0)</span><br><span class="line"># 将俩个标签分别布置在第一行、第二行</span><br><span class="line">tk.Label(win, text=&quot;账号：&quot;).grid(row=0)</span><br><span class="line">tk.Label(win, text=&quot;密码：&quot;).grid(row=1)</span><br><span class="line"># 创建输入框控件</span><br><span class="line">e1 = tk.Entry(win)</span><br><span class="line"># 以 * 的形式显示密码</span><br><span class="line">e2 = tk.Entry(win,show=&#x27;*&#x27;)</span><br><span class="line">e1.grid(row=0, column=1, padx=10, pady=5)</span><br><span class="line">e2.grid(row=1, column=1, padx=10, pady=5)</span><br><span class="line"># 编写一个简单的回调函数</span><br><span class="line">def login():</span><br><span class="line">    messagebox.showinfo(&#x27;hello&#x27;)</span><br><span class="line"># 使用 grid()的函数来布局，并控制按钮的显示位置</span><br><span class="line">tk.Button(win, text=&quot;登录&quot;, width=10, command=login).grid(row=3, column=0, sticky=&quot;w&quot;, padx=10, pady=5)</span><br><span class="line">tk.Button(win, text=&quot;退出&quot;, width=10, command=win.quit).grid(row=3, column=1, sticky=&quot;e&quot;, padx=10, pady=5)</span><br><span class="line">win.mainloop()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python--tkinter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pillow图像几何变换</title>
      <link href="/post/2d89a648.html"/>
      <url>/post/2d89a648.html</url>
      
        <content type="html"><![CDATA[<h4 id="Pillow图像几何变换"><a href="#Pillow图像几何变换" class="headerlink" title="Pillow图像几何变换"></a>Pillow图像几何变换</h4><p>图像的几何变换主要包括图像翻转、图像旋转和图像变换操作，Image 类提供了处理这些操作的函数 transpose()、rotate() 和 transform()，下面分别对它们进行讲解。</p><h5 id="transpose图像翻转"><a href="#transpose图像翻转" class="headerlink" title="transpose图像翻转"></a>transpose图像翻转</h5><p>transpose()翻转操作该函数可以实现图像的垂直、水平翻转</p><p><strong>返回一个新的Image对象</strong></p><p>语法格式如下：</p><p>Image.transpose(method)</p><p>method 参数决定了图片要如何翻转，参数值如下：</p><p>Image.FLIP_LEFT_RIGHT：左右水平翻转；</p><p>Image.FLIP_TOP_BOTTOM：上下垂直翻转；</p><p>Image.ROTATE_90：图像旋转 90 度；</p><p>Image.ROTATE_180：图像旋转 180 度；</p><p>Image.ROTATE_270：图像旋转 270 度；</p><p>Image.TRANSPOSE：图像转置；</p><p>Image.TRANSVERSE：图像横向翻转</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">img1 = Image.open(&quot;D:\\File\\All\\web\\python\\blog\\947849.jpg&quot;) </span><br><span class="line">img2 = img1.transpose(Image.FLIP_LEFT_RIGHT)</span><br><span class="line">img2.show()</span><br></pre></td></tr></table></figure><h6 id="rotate-任意角度旋转"><a href="#rotate-任意角度旋转" class="headerlink" title="rotate()任意角度旋转"></a>rotate()任意角度旋转</h6><p>当我们想把图像旋转任意角度时，可以使用 rotate() 函数，<br><strong>产生一张规定大小的新图像</strong><br>语法格式如下：<br>Image.rotate(angle, resample&#x3D;PIL.Image.NEAREST, expand&#x3D;None, center&#x3D;None, translate&#x3D;None, fillcolor&#x3D;None)</p><p>参数说明如下：</p><p>angle：表示任意旋转的角度；</p><p>resample：重采样滤波器，默认为 PIL.Image.NEAREST 最近邻插值方法；</p><p>expand：可选参数，表示是否对图像进行扩展，如果参数值为 True 则扩大输出图像，如果为 False 或者省略，则表示按原图像大小输出；</p><p>center：可选参数，指定旋转中心，参数值是长度为 2 的元组，默认以图像中心进行旋转；</p><p>translate：参数值为二元组，表示对旋转后的图像进行平移，以左上角为原点；</p><p>fillcolor：可选参数，填充颜色，图像旋转后，对图像之外的区域进行填充。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">img1 = Image.open(&quot;D:\\File\\All\\web\\python\\blog\\947849.jpg&quot;) </span><br><span class="line">img2 = img1.rotate(50,translate=(100,100))</span><br><span class="line">img2.show()</span><br></pre></td></tr></table></figure><h6 id="transform-图像变换"><a href="#transform-图像变换" class="headerlink" title="transform()图像变换"></a>transform()图像变换</h6><p>transform()图像变换该函数能够对图像进行变换操作，通过指定的变换方式，<strong>产生一张规定大小的新图像</strong><br>语法格式如下：</p><p>Image.transform(size, method, data&#x3D;None, resample&#x3D;0) </p><p>参数说明：</p><p>size：指定新图片的大小 (元组)；</p><p>method：指定图片的变化方式，比如 Image.EXTENT 表示矩形变换；</p><p>data：该参数用来给变换方式提供所需数据；</p><p>resample：图像重采样滤波器，默认参数值为 PIL.Image.NEAREST。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">img1 = Image.open(&quot;D:\\File\\All\\web\\python\\blog\\947849.jpg&quot;) </span><br><span class="line">img2 = img1.transform((1000,1000),Image.EXTENT,data=[0,0,30 + img1.width//4,img1.height//3])</span><br><span class="line">img2.show()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python--Pillow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pillow图像分离与合并</title>
      <link href="/post/f6193f79.html"/>
      <url>/post/f6193f79.html</url>
      
        <content type="html"><![CDATA[<h4 id="Pillow图像分离与合并"><a href="#Pillow图像分离与合并" class="headerlink" title="Pillow图像分离与合并"></a>Pillow图像分离与合并</h4><p>图像（指数字图像）由许多像素点组成，像素是组成图像的基本单位，而每一个像素点又可以使用不同的颜色，最终呈现出了绚丽多彩的图像。它们的本质就是图片呈现颜色时需要遵循的规则，比如 RGB、RGBA、CYMK 等，</p><p><strong>而图像的分离与合并，指的就是图像颜色的分离和合并</strong>。</p><p>Image 类提供了用于分离图像和合并图像的方法 split() 和 merge() 方法，通常情况下，这两个方法会一起使用。</p><h5 id="split（）分离操作"><a href="#split（）分离操作" class="headerlink" title="split（）分离操作"></a>split（）分离操作</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">img = Image.open(&quot;D:\\File\\All\\web\\python\\blog\\947849.jpg&quot;)</span><br><span class="line">r,g,b = img.split()</span><br><span class="line">r.show()</span><br><span class="line">g.show()</span><br><span class="line">b.show()</span><br></pre></td></tr></table></figure><h5 id="merge-合并操作"><a href="#merge-合并操作" class="headerlink" title="merge()合并操作"></a>merge()合并操作</h5><p>Image 类提供的 merge() 方法可以实现图像的合并操作。</p><p><strong>注意，图像合并，可以是单个图像合并，也可以合并两个以上的图像</strong>。merge() 方法的语法格式如下：</p><p>Image.merge(mode, bands)</p><p>参数说明如下：mode：指定输出图片的模式(前面文章博主有介绍)</p><p>bands：参数类型为<strong>元组或者列表序列</strong>，其元素值是组成图像的颜色通道，比如 RGB 分别代表三种颜色通道，可以表示为 (r,g,b)。</p><p>注意，<strong>该函数会返回一个新的 Image 对象</strong>。</p><ol><li>单个图像的合并指的是将颜色通道进行重新组合，从而得到不一样的图片效果，代码如下所示：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">img = Image.open(&quot;D:\\File\\All\\web\\python\\blog\\947849.jpg&quot;)</span><br><span class="line">r,g,b = img.split()</span><br><span class="line">ing_merge= Image.merge(&#x27;RGB&#x27;, (g,b,r))</span><br><span class="line">ing_merge.save(&quot;D:\\File\\All\\web\\python\\blog\\4.jpg&quot;)</span><br><span class="line">ing_merge.show()</span><br></pre></td></tr></table></figure></li><li>两张图片的合并操作也并不复杂，但是要求<strong>两张图片的模式、图像大小必须要保持一致</strong>，否则不能合并。因此，对于那些模式、大小不同的图片要进行预处理。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">img1 = Image.open(&quot;D:\\File\\All\\web\\python\\blog\\947849.jpg&quot;)</span><br><span class="line">img2 = Image.open(&quot;D:\\File\\All\\web\\python\\blog\\670099.jpg&quot;)</span><br><span class="line">img3 = img1.resize(img2.size)</span><br><span class="line">print(img3.size)</span><br><span class="line">r1,g1,b1 = img2.split()   </span><br><span class="line">r2,g2,b2 = img3.split()</span><br><span class="line">img4 = Image.merge(&#x27;RGB&#x27;,(r1,g2,b1))</span><br><span class="line">img4.show()</span><br></pre></td></tr></table></figure></li></ol><p>一般不会将多张图片混合因为看起来怪怪的</p><h5 id="扩展知识：blend-混合图片"><a href="#扩展知识：blend-混合图片" class="headerlink" title="扩展知识：blend() 混合图片"></a>扩展知识：blend() 混合图片</h5><p>Image 类也提供了 blend() 方法来混合 RGBA 模式的图片（PNG 格式），函数的语法格式如下：<br>Image.blend(image1,image2, alpha)<br>参数说明如下：<br>image1，image2：表示两个 Image 对象，<strong>俩张图片的大小应该一样大</strong>。</p><p>alpha：表示透明度，取值范围为 0 到 1，当取值为 0 时，输出图像相当于 image1 的拷贝，而取值为 1 时，则是 image2 的拷贝，只有当取值为 0.5 时，才为两个图像的中合。因此改值的大小决定了两个图像的混合程度。</p><p><strong>该函数会返回一个新的 Image 对象</strong>。</p><p>与 RGB 模式相比，RGBA 在 RGB 的基础上增加了透明度，通过 Alpha 取值来决定两个图像的混合程度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">img1 = Image.open(&quot;D:\\File\\All\\web\\python\\blog\\670099.png&quot;)</span><br><span class="line">img2 = Image.open(&quot;D:\\File\\All\\web\\python\\blog\\99.png&quot;)</span><br><span class="line">img4 = img2.resize(img1.size)</span><br><span class="line">img3 = Image.blend(img1,img4,0.5)</span><br><span class="line">img3.show()   </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python--Pillow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言杂项知识（一）</title>
      <link href="/post/f77ed13.html"/>
      <url>/post/f77ed13.html</url>
      
        <content type="html"><![CDATA[<h5 id="头文件的概念"><a href="#头文件的概念" class="headerlink" title="头文件的概念"></a>头文件的概念</h5><p>这一篇文章里面的知识比较杂也比较乱，但是看一下还是用一定的作用（相当于提醒一点易错点吧）</p><h5 id="引入头文件的原因"><a href="#引入头文件的原因" class="headerlink" title="引入头文件的原因"></a>引入头文件的原因</h5><p>#include &lt;stdio.h&gt;是什么意思呢？<br>C语言开发者们编写了很多常用函数，并分门别类的放在了不同的文件，这些文件就称为头文件（header file）。每个头文件中都包含了若干个功能类似的函数，调用某个函数时，要引入对应的头文件，否则编译器找不到函数。<br>实际上，头文件往往只包含函数的说明，也就是告诉我们函数怎么用，而函数本身保存在其他文件中，在链接时才会找到。</p><p>对于初学者，可以暂时理解为头文件中包含了若干函数。引入头文件使用#include命令，并将文件名放在&lt; &gt;中，#include 和 &lt; &gt; 之间可以有空格，也可以没有。</p><h5 id="数据的长度"><a href="#数据的长度" class="headerlink" title="数据的长度"></a>数据的长度</h5><p>这个还是比较重要</p><img src="/post/f77ed13/68.png" class title="This is an test image"><h5 id="强类型语言和弱类型语言"><a href="#强类型语言和弱类型语言" class="headerlink" title="强类型语言和弱类型语言"></a>强类型语言和弱类型语言</h5><p>除了C语言，Java、C++、C#等在定义变量时也必须指明数据类型，这样的编程语言称为强类型语言。而PHP、JavaScript等在定义变量时不必指明数据类型，编译系统会自动推演，这样的编程语言称为弱类型语言</p><h5 id="格式控制符"><a href="#格式控制符" class="headerlink" title="格式控制符"></a>格式控制符</h5><p>%d称为格式控制符，它指明了以何种形式输出数据。格式控制符均以%开头，后跟其他字符。%d 表示以十进制形式输出一个整数。</p><p>printf的格式控制的完整格式：%-0m.n格式字符</p><p>下面对组成格式说明的各项加以说明：<br>①%：表示格式说明的起始符号，不可缺少。<br>②-：有-表示左对齐输出，如省略表示右对齐输出。<br>③0：有0表示指定空位填0,如省略表示指定空位不填。<br>④m.n：m指域宽，即对应的输出项在输出设备上所占的字符数。N指精度。用于说明输出的实型数的小数位数。为指定n时，隐含的精度为n&#x3D;6位。<br>格式字符有d, s, c,f,lf等</p><p>不同整型的输出使用不同的格式控制符可以输出不同类型的整数，它们分别是：%hd用来输出 short int 类型；%d用来输出 int 类型；%ld用来输出 long int 类型。</p><h5 id="占用内存理解："><a href="#占用内存理解：" class="headerlink" title="占用内存理解："></a>占用内存理解：</h5><p>让整数占用更少的内存可以在 int 前边加 short，让整数占用更多的内存可以在 int 前边加 long<br>也可以将 int 省略，只写 short 和 long</p><p>只有 short 的长度是确定的，是两个字节，而 int 和 long 的长度无法确定，在不同的环境下有不同的表现</p><p>实际情况也确实如此，C语言并没有严格规定 short、int、long 的长度，只做了宽泛的限制：short 至少占用 2 个字节。int 建议为一个机器字长。32 位环境下机器字长为 4 字节，64 位环境下机器字长为 8 字节。short 的长度不能大于 int，long 的长度不能小于 int。</p><h5 id="sizeof-操作符"><a href="#sizeof-操作符" class="headerlink" title="sizeof 操作符"></a>sizeof 操作符</h5><p>sizeof 操作符获取某个数据类型的长度可以使用 sizeof 操作符，<br>sizeof 用来获取某个数据类型或变量所占用的字节数，如果后面跟的是变量名称，那么可以省略( )，如果跟的是数据类型，就必须带上( )。需要注意的是，sizeof 是C语言中的操作符，不是函数，所以可以不带( )<br>通常可以利用它计算字符串的长度</p><h5 id="二进制数、八进制数和十六进制数的表示"><a href="#二进制数、八进制数和十六进制数的表示" class="headerlink" title="二进制数、八进制数和十六进制数的表示"></a>二进制数、八进制数和十六进制数的表示</h5><ol><li><p>二进制二进制由 0 和 1 两个数字组成，使用时必须以0b或0B（不区分大小写）开头<br>eg.<br>int a &#x3D; 0b101;<br>int b &#x3D; -0b110010;</p></li><li><p>八进制八进制由 0~7 八个数字组成，使用时必须以0开头（注意是数字 0，不是字母 o）<br>int a &#x3D; 015;<br>int b &#x3D; -0101;</p></li><li><p>十六进制十六进制由数字 0<del>9、字母 A</del>F 或 a~f（不区分大小写）组成，使用时必须以0x或0X（不区分大小写）开头，</p></li></ol><p>int a &#x3D; 0X2A;<br>int b &#x3D; -0XA0; </p><p><strong>一般整数初始化的时候都是用十进制表示</strong></p><p><strong>输出的话比较重要，有时候可能比赛的题会出这种二进制数、八进制数和十六进制数的输出</strong></p><img src="/post/f77ed13/69.png" class title="This is an test image"><h5 id="正负号在内存中存储"><a href="#正负号在内存中存储" class="headerlink" title="正负号在内存中存储"></a>正负号在内存中存储</h5><p>符号也是数字的一部分，也要在内存中体现出来。符号只有正负两种情况，用1位（Bit）就足以表示；C语言规定，把内存的最高位作为符号位。<br>以 int 为例，它占用 32 位的内存，0~30 位表示数值，31 位表示正负号<br>在编程语言中，计数往往是从0开始，例如字符串 “abc123”，我们称第 0 个字符是 a，第 1 个字符是 b，第 5 个字符是 3</p><p>C语言规定，在符号位中，用 0 表示正数，用 1 表示负数。</p><h5 id="源码，反码，补码"><a href="#源码，反码，补码" class="headerlink" title="源码，反码，补码"></a>源码，反码，补码</h5><ol><li><p>原码将一个整数转换成二进制形式，就是其原码。例如<br>short a &#x3D; 6;，a 的原码就是0000 0000 0000 0110；<br>更改 a 的值a &#x3D; -18;，此时 a 的原码就是1000 0000 0001 0010。<br>通俗的理解，原码就是一个整数本来的二进制形式。</p></li><li><p>反码谈到反码，正数和负数要区别对待，因为它们的反码不一样。对于正数，它的反码就是其原码（原码和反码相同）；负数的反码是将原码中除符号位以外的所有位（数值位）取反，也就是 0 变成 1，1 变成 0。</p></li></ol><p>​例如short a &#x3D; 6; a 的原码和反码都是0000 0000 0000 0110；<br>​更改 a 的值a &#x3D; -18;此时 a 的反码是1111 1111 1110 1101。</p><ol start="3"><li>补码正数和负数的补码也不一样，也要区别对待。对于正数，它的补码就是其原码（原码、反码、补码都相同）；负数的补码是其反码加 1。</li></ol><p>例如short a &#x3D; 6;a 的原码、反码、补码都是0000 0000 0000 0110；<br>更改 a 的值a &#x3D; -18;，此时 a 的补码是1111 1111 1110 1110。可以认为，补码是在反码的基础上打了一个补丁，进行了一下修正，所以叫“补码”。原码、反码、补码的概念只对负数有实际意义，对于正数，它们都一样。</p><p>在计算机内存中，<strong>整数一律采用补码的形式来存储</strong>。这意味着，当读取整数时还要采用逆向的转换，也就是将补码转换为原码。将补码转换为原码也很简单：先减去 1，再将数值位取反即可。</p><h5 id="其他注意点"><a href="#其他注意点" class="headerlink" title="其他注意点"></a>其他注意点</h5><p>main 是程序的入口函数，一个C程序必须有 main 函数，而且只能有一个。<br>一个程序当中可以使用return 返回值，也可以不使用return<br>使用return 程序运行正确一般返回 0。</p><p>puts 输出完成后会自动换行，而 printf 不会，要自己添加换行符，这是 puts 和 printf 在输出字符串时的一个区别</p><p>这里主要想说的时这一点，刚开始博主也是不清楚还可以这么输出</p><p>%e 以指数形式输出 float 类型，输出结果中的 e 小写；%E 以指数形式输出 float 类型，输出结果中的 E 大写；%le 以指数形式输出 double 类型，输出结果中的 e 小写；%lE 以指数形式输出 double 类型，输出结果中的 E 大写。</p><p>对代码的说明：%f 和 %lf 默认保留六位小数，不足六位以 0 补齐，超过六位按四舍五入截断</p>]]></content>
      
      
      <categories>
          
          <category> c/c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 乱乱乱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tkinter库---Label标签控件</title>
      <link href="/post/6b688c36.html"/>
      <url>/post/6b688c36.html</url>
      
        <content type="html"><![CDATA[<h5 id="Tkinter-Label标签控件"><a href="#Tkinter-Label标签控件" class="headerlink" title="Tkinter Label标签控件"></a>Tkinter Label标签控件</h5><p>Label（标签）控件，是 Tkinter 中最常使用的一种控件，主要用来显示窗口中的文本或者图像，并且不同的 Lable（标签）允许设置各自不同的背景图片。<br><strong>常用的属性</strong><br>anchor<br>控制文本（或图像）在 Label 中显示的位置（方位），通过方位的英文字符串缩写（n、ne、e、se、s、sw、w、nw、center）实现定位，默认为居中（center）</p><p>bg<br>用来设置背景色</p><p>bd<br>即 borderwidth 用来指定 Label 控件的边框宽度，单位为像素，默认为 2 个像素</p><p>bitmap<br>指定显示在 Label 控件上的位图，若指定了 image 参数，则该参数会被忽略</p><p>compound<br>控制 Lable 中文本和图像的混合模式，若选项设置为 CENTER，则文本显示在图像上，如果将选项设置为 BOTTOM、LEFT、RIGHT、TOP，则图像显示在文本旁边。</p><p>cursor<br>指定当鼠标在 Label 上掠过的时候，鼠标的的显示样式，参数值为 arrow、circle、cross、plus</p><p>disableforeground<br>指定当 Label 设置为不可用状态的时候前景色的颜色</p><p>font<br>指定 Lable 中文本的 (字体,大小,样式）元组参数格式，一个 Lable 只能设置一种字体</p><p>fg<br>设置 Label 的前景色height&#x2F;width设置 Lable 的高度&#x2F;宽度，如果 Lable 显示的是文本，那么单位是文本单元，如果 Label 显示的是图像，那么单位就是像素，如果不设置，Label 会自动根据内容来计算出标签的高度</p><p>highlightbackground<br>当 Label 没有获得焦点的时候高亮边框的颜色，系统的默认是标准背景色</p><p>highlightcolor<br>指定当 Lable 获得焦点的话时候高亮边框的颜色，系统默认为0，不带高亮边框</p><p>image<br>指定 Label 显示的图片，一般是 PhotoImage、BitmapImage 的对象</p><p>justify<br>表示多行文本的对齐方式，参数值为 left、right、center，注意文本的位置取决于 anchor 选项</p><p>padx&#x2F;pady<br>padx 指定 Label 水平方向上的间距（即内容和边框间），pady 指定 Lable 水平方向上的间距（内容和边框间的距离）</p><p>relief<br>指定边框样式，默认值是 “flat”，其他参数值有 “groove”、”raised”、”ridge”、”solid”或者”sunken”</p><p>state<br>该参数用来指定 Lable 的状态，默认值为”normal”（正常状态），其他可选参数值有”active”和”disabled”</p><p>takefocus<br>默认值为False，如果是 True，表示该标签接受输入焦点text用来指定 Lable 显示的文本，注意文本内可以包含换行符underline给指定的字符添加下划线，默认值为 -1 表示不添加，当设置为 1 时，表示给第二个文本字符添加下划线。</p><p>wraplength<br>将 Label 显示的文本分行，该参数指定了分行后每一行的长度，默认值为 0</p><ol><li>Label控件构成一个控件主要由背景和前景两部分组成。其中背景由三部分构成分别是内容区域、填充区、边框，这三个区域的大小通过以下属性进行控制：<br> width&#x2F;height   padx&#x2F;pady   borderwidth<br>边框的宽度可以通过 borderwidth 来调整，其样式可以通过relief来设置（默认为平的 flat）；<br>填充区的大小调整分为水平方向和垂直方向，可以使用padx和pady来调整；内容区则主要用来显示文字或者图片，其大小由 width&#x2F;height 来控制。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import tkinter as tk</span><br><span class="line">win = tk.Tk()</span><br><span class="line">win.geometry(&#x27;400x200&#x27;)</span><br><span class="line"># 若内容是文字则以字符为单位，图像则以像素为单位</span><br><span class="line">label = tk.Label(win, text=&quot;你好&quot;,font=(&#x27;宋体&#x27;,20, &#x27;bold italic&#x27;),bg=&quot;#7CCD7C&quot;,</span><br><span class="line">                 width=30,height=5，</span><br><span class="line">                 padx=10, pady=15, borderwidth=10, relief=&quot;sunken&quot;)</span><br><span class="line">label.pack()</span><br><span class="line">win.mainloop()</span><br></pre></td></tr></table></figure><ol start="2"><li>标签添加背景图Label（标签）除了可以显示文本之外，还可以用来显示图片，通过一组示例做简单的说明，代码如下所示：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import tkinter as tk</span><br><span class="line">root= tk.Tk()</span><br><span class="line">root.geometry(&#x27;300x300&#x27;)</span><br><span class="line">phont = tk.PhotoImage(file=&#x27;D:\\File\\All\\web\\python\\blog\\99.png&#x27;)</span><br><span class="line">lab = tk.Label(root,image=phont,width=100,height=100)</span><br><span class="line">lab.pack()</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><ol start="3"><li>Message控件Message 控件与 Label 控件的功能类似，它主要用来显示多行不可编辑的文本信息，与 Label 的不同之处在于该控件增加了自动分行的功能。下面对它做简单的介绍，示例如下：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from tkinter import *</span><br><span class="line">#创建主窗口</span><br><span class="line">win = Tk()</span><br><span class="line">win.geometry(&#x27;400x300&#x27;)</span><br><span class="line">msg = Message (win, text=&#x27;hello&#x27;,width =60,font=(&#x27;微软雅黑&#x27;,10,&#x27;bold&#x27;))</span><br><span class="line">msg .pack (side=LEFT)</span><br><span class="line">#开始程序循环</span><br><span class="line">win .mainloop ()</span><br></pre></td></tr></table></figure></li></ol><p>Label控件Tkinter中使用的非常多</p>]]></content>
      
      
      <categories>
          
          <category> python--tkinter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Label控件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tkinter库的常用控件,方法和属性</title>
      <link href="/post/a3cef9b3.html"/>
      <url>/post/a3cef9b3.html</url>
      
        <content type="html"><![CDATA[<h5 id="Tkinter常用控件"><a href="#Tkinter常用控件" class="headerlink" title="Tkinter常用控件"></a>Tkinter常用控件</h5><p>Button  按钮<br>点击按钮时触发&#x2F;执行一些事件（函数）</p><p>Canvas  画布<br>提供绘制图，比如直线、矩形、多边形等</p><p>Checkbutton复选框<br>多项选择按钮，用于在程序中提供多项选择框</p><p>Entry文本框<br>输入框用于接收单行文本输入</p><p>Frame框架（容器）控件<br>定义一个窗体（根窗口也是一个窗体），用于承载其他控件，即作为其他控件的容器</p><p>Lable标签控件<br>用于显示单行文本或者图片</p><p>LableFrame容器控件<br>一个简单的容器控件，常用于复杂的窗口布局。</p><p>Listbox列表框控件<br>以列表的形式显示文本</p><p>Menu菜单控件<br>菜单组件（下拉菜单和弹出菜单）</p><p>Menubutton菜单按钮控件<br>用于显示菜单项</p><p>Message信息控件<br>用于显示多行不可编辑的文本，与 Label控件类似，增加了自动分行的功能</p><p>messageBox消息框控件<br>定义与用户交互的消息对话框</p><p>OptionMenu选项菜单<br>下拉菜单</p><p>PanedWindow窗口布局管理组件<br>为组件提供一个框架，允许用户自己划分窗口空间</p><p>Radiobutton单选框<br>单项选择按钮，只允许从多个选项中选择一项</p><p>Scale进度条控件<br>定义一个线性“滑块”用来控制范围，可以设定起始值和结束值，并显示当前位置的精确值</p><p>Spinbox高级输入框<br>Entry 控件的升级版，可以通过该组件的上、下箭头选择不同的值</p><p>Scrollbar滚动条<br>默认垂直方向，鼠标拖动改变数值，可以和 Text、Listbox、Canvas等控件配合使用</p><p>Text多行文本框<br>接收或输出多行文本内容</p><p>Toplevel子窗口<br>在创建一个独立于主窗口之外的子窗口，位于主窗口的上一层，可作为其他控件的容器</p><h5 id="控件基本属性"><a href="#控件基本属性" class="headerlink" title="控件基本属性"></a>控件基本属性</h5><p>每个控件都有着各自不同的功能，即使有些控件功能相似，但它们的适用场景也不同。在 Tkinter 中不同的控件受到各自参数的约束，所有控件既有相同属性，也有各自独有的属性。对这些控件的<strong>共用属性</strong>做简单介绍，</p><p>anchor<br>定义控件或者文字信息在窗口内的位置</p><p>bg<br>bg 是 background 的缩写，用来定义控件的背景颜色，参数值可以颜色的十六进制数，或者颜色英文单词</p><p>bitmap<br>定义显示在控件内的位图文件</p><p>borderwidth<br>定于控件的边框宽度，单位是像素</p><p>command<br>该参数用于执行事件函数，比如单击按钮时执行特定的动作，可将执行用户自定义的函数</p><p>cursor<br>当鼠标指针移动到控件上时，定义鼠标指针的类型，字符换格式，参数值有 crosshair（十字光标）watch（待加载圆圈）plus（加号）arrow（箭头）等</p><p>font<br>若控件支持设置标题文字，就可以使用此属性来定义，它是一个数组格式的参数 (字体,大小，字体样式)</p><p>fg<br>fg 是 foreground 的缩写，<strong>用来定义控件的前景色，也就是字体的颜色</strong></p><p>height<br>该参数值用来设置控件的高度，文本控件以字符的数目为高度（px），其他控件则以像素为单位</p><p>image<br>定义显示在控件内的图片文件</p><p>justify<br>定义多行文字的排列方式，此属性可以是 LEFT&#x2F;CENTER&#x2F;RIGHT</p><p>padx&#x2F;pady<br>定义控件内的文字或者图片与控件边框之间的水平&#x2F;垂直距离</p><p>relief<br>定义控件的边框样式，参数值为FLAT（平的）&#x2F;RAISED（凸起的）&#x2F;SUNKEN（凹陷的）&#x2F;GROOVE（沟槽桩边缘）&#x2F;RIDGE（脊状边缘）</p><p>text<br>定义控件的标题文字</p><p>state<br>控制控件是否处于可用状态，参数值默认为 NORMAL&#x2F;DISABLED，默认为 NORMAL（正常的）</p><p>width<br>用于设置控件的宽度，使用方法与 height 相同</p><p>小伙伴们可以把他当成一张表格来查看</p><h5 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h5><p>窗口常用方法下表列出了<strong>窗口的常用方法</strong>，其中 window 代表主窗口对象：</p><p>window.title(“my title”)<br>接受一个字符串参数，为窗口起一个标题</p><p>window.resizable()<br>是否允许用户拉伸主窗口大小，默认为可更改，当设置为 resizable(0,0)或者resizable(False,False)时不可更改</p><p>window.geometry()<br>设定主窗口的大小以及位置，当参数值为 None 时表示获取窗口的大小和位置信息。</p><p>eg.</p><p>geometry(‘450x400+300+200’)</p><p>设置主窗口的宽度为 450，高度为 400，同时窗口距离左边屏幕的距离为 300（以像素为单位），距离屏幕顶部的距离为 200，这里我们将带“+”的参数值称为“位置参数”，当然，您也可以将它们设置为负数，如下所示：geometry(‘+-1500+-2000’)当设置了一个超过屏幕的负参数值时，主窗口会被移动至“屏幕之外”，此时就看不到主窗口了，这也是隐藏窗口的一种方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import tkinter as tk</span><br><span class="line">window = tk.Tk()</span><br><span class="line"># 设置窗口大小变量</span><br><span class="line">window.geometry(&#x27;450x400+300+200&#x27;)</span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><p>window.quit()<br>关闭当前窗口</p><p>window.update()<br>刷新当前窗口</p><p>window.mainloop()<br>设置窗口主循环，使窗口循环显示（一直显示，指导窗口被关闭）</p><p>window.iconbitmap()<br>设置窗口左上角的图标（图标是.ico文件类型）</p><p>window.config(background &#x3D;”red”)<br>设置窗口的背景色为红色，也可以接受 16 进制的颜色值</p><p>window.minsize(50,50)<br>设置窗口被允许调整的最小范围，即宽和高各50</p><p>window.maxsize(400,400)<br>设置窗口被允许调整的最大范围，即宽和高各400</p><p>window.attributes(“-alpha”,0.5)<br>用来设置窗口的一些属性，比如透明度（-alpha）、是否置顶（-topmost）即将主屏置于其他图标之上、是否全屏（-fullscreen）全屏显示等</p><p>window.state(“normal”)<br>用来设置窗口的显示状态，参数值 normal（正常显示），icon（最小化），zoomed（最大化），</p><p>window.withdraw()<br>用来隐藏主窗口，但不会销毁窗口。</p><p>window.deiconify()<br>将窗口从隐藏状态还原</p><p>window.iconify()<br>设置窗口最小化</p><p>window.winfo_screenwidth()<br>window.winfo_screenheight()<br>获取电脑屏幕的分辨率（尺寸）</p><p>window.winfo_width()<br>window.winfo_height()<br>获取窗口的大小，同样也适用于其他控件，但是使用前需要使用<br>window.update() 刷新屏幕，否则返回值为1</p><p>window.protocol(“协议名”,回调函数)<br>启用协议处理机制，常用协议有 WN_DELETE_WINDOW，当用户点击关闭窗口时，窗口不会关闭，而是触发回调函数。 Tinter 除了提供事件绑定机制之外，还提供了协议处理机制，它指的是应用程序和窗口管理器之间的交互，最常用的协议为 WM_DELETE_WINDOW。当 Tkinter 使用 WM_DELETE_WINDOW 协议与主窗口进行交互时，Tkinter 主窗口右上角x号的关闭功能失效，也就是无法通过点击x来关闭窗口，而是转变成调用用户自定义的函数</p><p>eg</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from tkinter import Tk</span><br><span class="line"># 导入 对话框控件</span><br><span class="line">from tkinter import messagebox</span><br><span class="line">root = Tk()</span><br><span class="line"># 定义回调函数，当用户点击窗口x退出时，执行用户自定义的函数</span><br><span class="line">def QueryWindow():</span><br><span class="line">    # 显示一个警告信息，点击确后，销毁窗口</span><br><span class="line">    if messagebox.showwarning(&quot;警告&quot;,&quot;出现了一个错误&quot;):</span><br><span class="line">        # 这里使用 destory()关闭窗口，也可以使用上面提到的quit方法</span><br><span class="line">        root.destroy()</span><br><span class="line"># 使用协议机制与窗口交互，并回调用户自定义的函数</span><br><span class="line">root.protocol(&#x27;WM_DELETE_WINDOW&#x27;, QueryWindow)</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><p>下面通一个示例对上述表格中的常用方法做简单地介绍：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import tkinter as tk</span><br><span class="line"></span><br><span class="line">window =tk.Tk()</span><br><span class="line">#设置窗口大小:宽x高,注,此处不能为 &quot;*&quot;,必须使用 &quot;x&quot;</span><br><span class="line">window.geometry(&#x27;450x300&#x27;)</span><br><span class="line"># 获取电脑屏幕的大小</span><br><span class="line">print(&quot;电脑的分辨率是%dx%d&quot;%(window.winfo_screenwidth(),window.winfo_screenheight()))</span><br><span class="line"># 要求窗口的大小，必须先刷新一下屏幕</span><br><span class="line">window.update()</span><br><span class="line">print(&quot;窗口的分辨率是%dx%d&quot;%(window.winfo_width(),window.winfo_height()))</span><br><span class="line"># 如使用该函数则窗口不能被拉伸</span><br><span class="line"># window.resizable(0,0)</span><br><span class="line"># 改变背景颜色</span><br><span class="line">window.config(background=&quot;#6fb765&quot;)</span><br><span class="line"># 设置窗口处于顶层</span><br><span class="line">window.attributes(&#x27;-topmost&#x27;,True)</span><br><span class="line"># 设置窗口的透明度</span><br><span class="line">window.attributes(&#x27;-alpha&#x27;,1)</span><br><span class="line"># 设置窗口被允许最大调整的范围，与resizble()冲突</span><br><span class="line">window.maxsize(600,600)</span><br><span class="line"># 设置窗口被允许最小调整的范围，与resizble()冲突</span><br><span class="line">window.minsize(50,50)</span><br><span class="line">#更改左上角窗口的的icon图标</span><br><span class="line">window.iconbitmap(&#x27;C:/Users/1.ico&#x27;)</span><br><span class="line">#添加文本内容,并对字体添加相应的格式 font(字体,字号,&quot;字体类型&quot;)</span><br><span class="line">text=tk.Label(window,text=&quot;漂亮鬼，网址：www.xiaoyang.vercel.app&quot;,bg=&quot;yellow&quot;,fg=&quot;red&quot;,font=(&#x27;Times&#x27;, 15, &#x27;bold italic underline&#x27;))</span><br><span class="line">#将文本内容放置在主窗口内</span><br><span class="line">text.pack()</span><br><span class="line"># 添加按钮，以及按钮的文本，并通过command 参数设置关闭窗口的功能</span><br><span class="line">button=tk.Button(window,text=&quot;关闭&quot;,command=window.quit)</span><br><span class="line"># 将按钮放置在主窗口内</span><br><span class="line">button.pack(side=&quot;bottom&quot;)</span><br><span class="line">#进入主循环，显示主窗口</span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python--tkinter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tkinter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pillow图像格式转化和缩放操作</title>
      <link href="/post/1e6c0b4.html"/>
      <url>/post/1e6c0b4.html</url>
      
        <content type="html"><![CDATA[<h4 id="Pillow图片格式转换"><a href="#Pillow图片格式转换" class="headerlink" title="Pillow图片格式转换"></a>Pillow图片格式转换</h4><p>图片格式之间的转换主要有以下两种方法：</p><p>save() 方法用于保存图像，当不指定文件格式时，它会以默认的图片格式来存储；如果指定图片格式，则会以指定的格式存储图片。</p><p>save() 的语法格式如下：</p><p>Image.save(fp, format&#x3D;None)</p><p>fp：图片的存储路径，要声明图片的名字和格式；<br>format：可选参数，可以指定图片的格式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">img = Image.open(&quot;D:\\File\\All\\web\\python\\blog\\947849.jpg&quot;)</span><br><span class="line">img.save(&quot;D:\\File\\All\\web\\python\\blog\\949.jpg&quot;)</span><br></pre></td></tr></table></figure><p>convert()+save()注意，<strong>并非所有的图片格式都可以用 save() 方法转换完成，</strong><br>比如将 PNG 格式的图片保存为 JPG 格式，如果直接使用 save() 方法就会出现以下错误：</p><p>引发错误的原因是由于 PNG 和 JPG 图像模式不一致导致的。<br>其中 PNG 是四通道 RGBA 模式，即红色、绿色、蓝色、Alpha 透明色；<br>JPG 是三通道 RGB 模式。因此要想实现图片格式的转换，就要将 PNG 转变为三通道 RGB 模式。<br>Image 类提供的 convert() 方法可以实现图像模式的转换。该函数提供了多个参数，比如 mode、matrix、dither 等，其中最关键的参数是 mode，其余参数无须关心。语法格式如下：<br>convert(mode)<br>mode：指的是要转换成的<strong>图像模式</strong><br>params：其他可选参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">img = Image.open(&quot;D:\\File\\All\\web\\python\\blog\\947849.jpg&quot;)</span><br><span class="line">im= img.convert(&quot;RGBA&quot;)</span><br><span class="line">im.save(&quot;D:\\File\\All\\web\\python\\blog\\99.png&quot;)</span><br></pre></td></tr></table></figure><p><strong>covert() 会返回一个新的 image 对象</strong></p><h5 id="Pillow图像缩放操作"><a href="#Pillow图像缩放操作" class="headerlink" title="Pillow图像缩放操作"></a>Pillow图像缩放操作</h5><p>Image 类提供的 resize() 方法能够实现任意缩小和放大图像。<br>resize() 函数的语法格式如下：</p><p>resize(size, resample&#x3D;image.BICUBIC, box&#x3D;None,<br>reducing_gap&#x3D;None) 一般使用就用第一个参数比较常见</p><p>size：<strong>元组参数</strong> (width,height)，图片缩放后的尺寸；一般表示大小的基本上都是元组参数</p><p>resample：可选参数，指图像重采样滤波器，与 thumbnail() 的 resample 参数类似，默认为 Image.BICUBIC；</p><p>box：对指定图片区域进行缩放，box 的参数值是长度为 4 的像素坐标元组，即 (左,上,右,下)。<br>注意，被指定的区域必须在原图的范围内，如果超出范围就会报错。当不传该参数时，默认对整个原图进行缩放；</p><p>reducing_gap：可选参数，浮点参数值，用于优化图片的缩放效果，常用参数值有 3.0 和 5.0。</p><p>注意，<strong>resize() 会返回一个新的 image 对象</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">img = Image.open(&quot;D:\\File\\All\\web\\python\\blog\\947849.jpg&quot;)</span><br><span class="line">im=img.resize((900,900))</span><br><span class="line"># im.save(&quot;D:\\File\\All\\web\\python\\blog\\49.jpg&quot;)</span><br><span class="line">im.show()</span><br></pre></td></tr></table></figure><p>对图片的局部位置进行放大，示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">img = Image.open(&quot;D:\\File\\All\\web\\python\\blog\\947849.jpg&quot;)</span><br><span class="line">im=img.resize((100,100),box=(0,0,120,120))</span><br><span class="line"># im.save(&quot;D:\\File\\All\\web\\python\\blog\\49.jpg&quot;)</span><br><span class="line">im.show()</span><br></pre></td></tr></table></figure><p>​    实际使用时局部放大用的非常少</p><h5 id="创建缩略图缩略图"><a href="#创建缩略图缩略图" class="headerlink" title="创建缩略图缩略图"></a>创建缩略图缩略图</h5><p>（thumbnail image）指的是将原图缩小至一个指定大小（size）的图像。通过创建缩略图可以使图像更易于展示和浏览。Image 对象提供了一个 thumbnail() 方法用来生图像的缩略图，该函数的语法格式如下：</p><p>thumbnail(size,resample)</p><p>size：元组参数，指的是<strong>缩小后</strong>的图像大小；</p><p>resample：可选参数，指图像重采样滤波器，有四种过滤方式，分别是 Image.BICUBIC（双立方插值法）、PIL.Image.NEAREST（最近邻插值法）、PIL.Image.BILINEAR（双线性插值法）、PIL.Image.LANCZOS（下采样过滤插值法），默认为 Image.BICUBIC。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">im = Image.open(&quot;D:\\File\\All\\web\\python\\blog\\947849.jpg&quot;)</span><br><span class="line">im.thumbnail((150,50))</span><br><span class="line"># im.save(&quot;D:\\File\\All\\web\\python\\blog\\49.jpg&quot;)</span><br><span class="line">im.show()</span><br></pre></td></tr></table></figure><p><strong>注意，缩略图的尺寸可能与您指定的尺寸不一致，这是因为 Pillow 会对原图像的长、宽进行等比例缩小</strong>，当指定的尺寸不符合图像的尺寸规格时，缩略图就会创建失败， 比如指定的尺寸超出了原图像的尺寸规格</p><h5 id="批量修改图片尺寸"><a href="#批量修改图片尺寸" class="headerlink" title="批量修改图片尺寸"></a>批量修改图片尺寸</h5><p>采用批量处理方法，比如批量转换格式，批量修改尺寸，批量添加水印，批量创建缩略图等，这是一种提升工作效率的有效途径，它避免了单一、重复的操作。通过 Pillow 提供的 Image.resize() 方法可以批量地修改图片尺寸，下面看一组简单的示例。首先找一些类型相同，但尺寸不一的图片，并把它们放入桌面的 image01 文件夹中</p><p>批量修改图片尺寸</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">from PIL import Image</span><br><span class="line">#读取图片目录</span><br><span class="line">fileName = os.listdir(&#x27;C:/Users/Administrator/Desktop/image01/&#x27;)</span><br><span class="line">print(fileName)</span><br><span class="line">#设定尺寸</span><br><span class="line">width = 350</span><br><span class="line">height = 350</span><br><span class="line">#如果目录不存在，则创建目录</span><br><span class="line">if not os.path.exists(&#x27;C:/Users/Administrator/Desktop/NewImage/&#x27;):</span><br><span class="line">    os.mkdir(&#x27;C:/Users/Administrator/Desktop/NewImage/&#x27;)</span><br><span class="line">#循环读取每一张图片</span><br><span class="line">for img in fileName:</span><br><span class="line">    old_pic = Image.open(&#x27;C:/Users/Administrator/Desktop/image01/&#x27; + img)</span><br><span class="line">    new_image = old_pic.resize((width, height),Image.BILINEAR)</span><br><span class="line">    print (new_image)</span><br><span class="line">    new_image.save(&#x27;C:/Users/Administrator/Desktop/NewImage/&#x27;+img)</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>这里原理其实非常简单 ，即使需要大家对文件的下官操作非常熟悉</p>]]></content>
      
      
      <categories>
          
          <category> python--Pillow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pillow创建对象和对象属性</title>
      <link href="/post/5951139c.html"/>
      <url>/post/5951139c.html</url>
      
        <content type="html"><![CDATA[<p>这里博主分享一个pillow库的使用笔记专题</p><h4 id="Pillow"><a href="#Pillow" class="headerlink" title="Pillow"></a>Pillow</h4><p>除了 PIL 和 Pillow 库之外，Python 还提供了一些其他图像处理库：<br>Scikit-image：一款基于 scipy 科学计算的图像处理软件包，以数组的形式对图像进行处理；<br>OpenCV：其实是一个 C++ 图像处理库，不过它提供了 Python 语言的接口。（需要进阶的话可以看这个）</p><p>opencv在人工智能，面部识别方面应用的比较广泛</p><p>Pillow库特点Pillow 库作为图像处理的常用库，主要有以下三大特点：</p><ol><li><p>支持广泛的文件格式Pillow 支持广泛的图像格式，比如 “jpeg”，”png”，”bmp”，”gif”，”ppm”，”tiff” 等。同时，它也支持图像格式之间的相互转换。</p></li><li><p>提供了丰富的功能Pillow 提供了丰富的图像处理功能，可概括为两个方面：<br>图像归档，包括创建缩略图、生成预览图像、图像批量处理等；<br>图像处理，则包括调整图像大小、裁剪图像、像素点处理、添加滤镜、图像颜色处理等。</p></li><li><p>配合GUI工具使用Pillow 库可以配合 Python GUI（图形用户界面）工具 Tkinter 一起使用(将他俩联系在一起用才好玩，不然没有界面，看起来没有感觉)</p></li></ol><h5 id="Pillow创建Image对象"><a href="#Pillow创建Image对象" class="headerlink" title="Pillow创建Image对象"></a>Pillow创建Image对象</h5><p>Image 类是 Pillow 库中最为重要的类，该类被定义在和与其同名的 Image 模块中。</p><p>使用下列导包方式引入 Image 模块：from PIL import Image</p><p>使用 Image 类可以实例化一个 Image 对象，通过调用该对象的一系列属性和方法对图像进行处理。</p><p>Pilow 提供了<strong>两种创建 Image 实例对象</strong>的方法：</p><ol><li>open()使用 Image 类的 open() 方法，可以创建一个 Image 对象，语法格式如下：<br>  im &#x3D; Image.open(fp,mode&#x3D;”r”)</li></ol><p>  fp：即 filepath 的缩写，表示文件路径，字符串格式；<br>  mode：可选参数，若出现该参数，则必须设置为 “r”，否则会引发 ValueError 异常。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">img = Image.open(&#x27;D:\\File\\All\\web\\python\\blog\\670099.jpg&#x27;)</span><br><span class="line">#调用show()函数才能显示出图片</span><br><span class="line">img.show()</span><br></pre></td></tr></table></figure><ol start="2"><li>new()使用 Image 类提供的 new() 方法可以创建一个新的 Image 对象，语法格式如下:</li></ol><p>im&#x3D;Image.new(mode,size,color)</p><p>mode：图像模式，字符串参数，比如 RGB（真彩图像）、L（灰度图像）、CMYK（色彩图打印模式）等（下面博主会介绍）；</p><p>size：图像大小，<strong>元组</strong>参数（width, height）代表图像的像素大小；</p><p>color：图片颜色，默认值为 0 表示黑色，参数值支持（R,G,B）三元组数字格式、颜色的十六进制值以及颜色英文单词。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">im = Image.new(mode=&#x27;RGB&#x27;,size=(200,200),color=&#x27;#AAAAFF&#x27;)</span><br><span class="line">im.show()</span><br></pre></td></tr></table></figure><p>new相当于创建一个新的图片了而open相当于是打开一张图片</p><h4 id="Pillow-Image对象属性"><a href="#Pillow-Image对象属性" class="headerlink" title="Pillow Image对象属性"></a>Pillow Image对象属性</h4><p>一般直接输出这个对象就可以看到关于吧这张图片的大部分的信息，可以不用使用这些属性来查看了</p><h5 id="1-size：查看图像的尺寸"><a href="#1-size：查看图像的尺寸" class="headerlink" title="1) size：查看图像的尺寸"></a>1) size：查看图像的尺寸</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">img = Image.open(&quot;D:\\File\\All\\web\\python\\blog\\947849.jpg&quot;)</span><br><span class="line"># 方法一</span><br><span class="line">print(img.size)</span><br><span class="line"># 方法二</span><br><span class="line">print(img)</span><br><span class="line"># 方法三</span><br><span class="line">print(img.width,img.height)</span><br></pre></td></tr></table></figure><h5 id="2-format：查看图片的格式"><a href="#2-format：查看图片的格式" class="headerlink" title="2) format：查看图片的格式"></a>2) format：查看图片的格式</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">img = Image.open(&quot;D:\\File\\All\\web\\python\\blog\\947849.jpg&quot;)</span><br><span class="line">print(img.format)</span><br></pre></td></tr></table></figure><h5 id="3-readonly：图片是否为只读"><a href="#3-readonly：图片是否为只读" class="headerlink" title="3) readonly：图片是否为只读"></a>3) readonly：图片是否为只读</h5> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">img = Image.open(&quot;D:\\File\\All\\web\\python\\blog\\947849.jpg&quot;)</span><br><span class="line">print(img.readonly)</span><br></pre></td></tr></table></figure><p>该属性的返回为 0 或者 1，分别对应着是和否，输出结果如下：图像是否为只读: 1</p><h5 id="4-info：查看图片相关信息"><a href="#4-info：查看图片相关信息" class="headerlink" title="4) info：查看图片相关信息"></a>4) info：查看图片相关信息</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">img = Image.open(&quot;D:\\File\\All\\web\\python\\blog\\947849.jpg&quot;)</span><br><span class="line">print(img.info)</span><br></pre></td></tr></table></figure><p>该属性的返回值为字典格式，输出结果如下：图像信息: {‘dpi’: (96, 96), ‘Software’: ‘Snipaste’}</p><p>主要显示的都是二进制源码</p><h5 id="5-mode：图像模式"><a href="#5-mode：图像模式" class="headerlink" title="5)mode：图像模式"></a>5)mode：图像模式</h5> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">img = Image.open(&quot;D:\\File\\All\\web\\python\\blog\\947849.jpg&quot;)</span><br><span class="line">print(img.mode)</span><br></pre></td></tr></table></figure><img src="/post/5951139c/65.png" class title="This is an test image">]]></content>
      
      
      <categories>
          
          <category> python--Pillow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言编译链接和软件安装</title>
      <link href="/post/cdb8b2bb.html"/>
      <url>/post/cdb8b2bb.html</url>
      
        <content type="html"><![CDATA[<h4 id="C语言编译和链接"><a href="#C语言编译和链接" class="headerlink" title="C语言编译和链接"></a>C语言编译和链接</h4><p>我们平时所说的程序，是指双击后就可以直接运行的程序，这样的程序被称为可执行程序，在 Windows 下，可执行程序的后缀有.exe和.com（其中.exe比较常见）</p><h5 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h5><p>C语言代码由固定的词汇按照固定的格式组织起来，简单直观，程序员容易识别和理解，但是对于CPU，C语言代码就是天书，根本不认识，CPU只认识几百个二进制形式的指令。这就需要一个工具，将C语言代码转换成CPU能够识别的二进制指令，也就是将代码加工成 .exe 程序的格式；这个工具是一个特殊的软件，叫做编译器</p><p>编译器能够识别代码中的词汇、句子以及各种特定的格式，并将他们转换成计算机能够识别的二进制形式，这个过程称为<strong>编译</strong></p><h5 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h5><p>C语言代码经过编译以后，并没有生成最终的可执行文件（.exe 文件），而是生成了一种叫做<strong>目标文件</strong>（Object File）的中间文件（或者说临时文件）。目标文件也是二进制形式的，它和可执行文件的格式是一样的。对于 Visual C++，目标文件的后缀是.obj；对于 GCC（linux系统上面的），目标文件的后缀是.o</p><p>目标文件经过链接以后才能变成可执行文件</p><p><strong>编译：</strong><br>只是将我们自己写的代码变成了二进制形式，它还需要和系统组件（比如标准库、动态链接库等）结合起来，这些组件都是程序运行所必须的。<br><strong>链接：</strong><br>其实就是一个“打包”的过程，它将所有二进制形式的目标文件和系统组件组合成一个可执行文件。完成链接的过程也需要一个特殊的软件，叫做链接器</p><p>随着学习的深入，我们编写的代码越来越多，最终需要将它们分散到多个源文件中，编译器每次只能编译一个源文件，生成一个目标文件，这个时候，链接器除了将目标文件和系统组件组合起来，还需要将编译器生成的多个目标文件组合起来。</p><p>实际开发中，除了编译器是必须的工具，我们往往还需要很多其他辅助软件</p><p>eg.<br>编辑器：用来编写代码，并且给代码着色，以方便阅读；<br>代码提示器：输入部分代码，即可提示全部代码，加速代码的编写过程；<br>调试器：观察程序的每一个运行步骤，发现程序的逻辑错误；<br>项目管理工具：对程序涉及到的所有资源进行管理，包括源文件、图片、视频、第三方库等；<br>漂亮的界面：各种按钮、面板、菜单、窗口等控件整齐排布，操作更方便(c语言中涉及比较少)<br>这些工具通常被打包在一起，统一发布和安装<br>它们统称为集成开发环境（IDE，Integrated Development Environment）。<br>在实际开发中，我一般也是使用集成开发环境，而不是单独地使用编译器。<br>（vs code 就是一个编译器）</p><h4 id="Windows-下-IDE推荐"><a href="#Windows-下-IDE推荐" class="headerlink" title="Windows 下 IDE推荐"></a>Windows 下 IDE推荐</h4><ol><li><p>Visual Studio Windows 下首先推荐大家使用微软开发的 Visual Studio 2022</p><p>这个是博主自己用的安装包<a href="https://pan.baidu.com/s/1cW_wtbAwJwF4OaHljk1X9w">这儿呢Visual Studio 2022</a></p><p>提取码：2111</p></li><li><p>Dev C++如果你讨厌 VS 的复杂性，那么可以使用 Dev C++。Dev C++ 是一款免费开源的 C&#x2F;C++ IDE，内嵌 GCC 编译器（Linux GCC 编译器的 Windows 移植版），是 NOI、NOIP 等比赛的指定工具。Dev C++ 的优点是体积小（只有几十兆）、安装卸载方便、学习成本低，缺点是调试功能弱。</p><p><a href="https://pan.baidu.com/s/1AkhqynA1yV6ZlErKq4fTeA">Dev C++</a> 提取码：2111</p></li><li><p>Visual C++ 6.0（简称VC 6.0）是微软开发的一款经典的 IDE，很多高校都以 VC 6.0 为教学工具来讲解C和C++。</p><p><a href="https://pan.baidu.com/s/1JmZrSOL1Dv5yp_tb09ujhw">Visual C++ 6.0</a>提取码：2111</p><p>不会安装的可以自行百度</p></li></ol><h4 id="程序安装解释"><a href="#程序安装解释" class="headerlink" title="程序安装解释"></a>程序安装解释</h4><p>不同的操作系统，安装软件的方法虽然不一样，但基本原理是相同的，主要的思想就是将程序的二进制可执行文件拷贝到某个目录，设置一些路径。如果程序运行时需要一些库，将这些库拷贝到系统目录即可。</p><p>程序的安装基本上要经过下面四个步骤：</p><ol><li><p>将程序的<strong>可执行文件</strong>从安装包所在的位置，拷贝到要安装的目录。安装程序的时候，程序会给用户指定一个默认的安装目录，如果用户需要，也可以自定义安装，改变安装目录。一般所谓的“绿色软件”到此就安装结束了，可以使用了。</p></li><li><p>如果有必要，可以向系统目录拷贝一些动态链接库（DLL）。（可选操作）有的程序，比如大型游戏，可能需要很多动态链接库（DLL）的支持，这时候程序可能会将这些 DLL 拷贝到系统库的默认目录，Win7 下一般拷贝到C:\Windows\System32\（读者不妨打开该目录，会看到很多 DLL 文件）。有些程序用到的 DLL 文件不是系统必需的，只能由程序自己使用，这样放在系统目录里就不太合适，安装的软件多了，就会造成系统臃肿，所以这些 DLL 会被拷贝到程序的安装目录。</p></li><li><p>向系统注册表中写入相应的设置项，注册程序或者库的安装信息。（可选操作）安装前，用户可能会对软件做一些设置，安装时，这些设置就会被写入注册表。另外，当安装程序将 DLL 文件拷贝到系统目录时，一些 DLL 还需要向系统注册，告诉系统我在这里，不然使用的时候可能会找不到。</p></li><li><p>在开始菜单或者桌面上位程序创建快捷方式。（可选操作）创建快捷方式主要是为了用户使用方便，有了快捷方式，就不用再到安装目录去启动程序了。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> c/c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件推荐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据在内存中的存储</title>
      <link href="/post/6601b08a.html"/>
      <url>/post/6601b08a.html</url>
      
        <content type="html"><![CDATA[<p>这里博主给大家分享一下博主学习c&#x2F;c++的时候学习的计算机基础的知识</p><p>这里博主建议小白可以先不看这篇文章，等有一定的基础过后再回过来看这篇文章就不会那么迷糊了</p><p>博主本人就是这样学的</p><h3 id="数据在内存中的存储"><a href="#数据在内存中的存储" class="headerlink" title="数据在内存中的存储"></a>数据在内存中的存储</h3><h4 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h4><p>内存条是一个非常精密的部件，包含了上亿个电子元器件，它们很小，达到了纳米级别。这些元器件，实际上就是电路；电路的电压会变化，要么是 0V，要么是 5V，只有这两种电压。5V 是通电，用1来表示，0V 是断电，用0来表示。所以，一个元器件有2种状态，0 或者 1（没想到吧内存条竟然是这样的，当时博主也没想到）</p><p>一般情况下我们不一个一个的使用元器件，而是将8个元器件看做一个单位，即使表示很小的数，例如 1，也需要8个，也就是 00000001。</p><p>一个元器件称为1比特（Bit）或1位，8个元器件称为1字节（Byte），那么16个元器件就是2Byte，32个就是4Byte，<br>1024Byte，简写为1KB（程序猿经典1024，哈哈）<br>1024KB，简写为1MB<br>1024MB，简写为1GB。</p><p>以后可别再以为1kb就是1000个字节了哈（作为程序员属实丢不起这个人）</p><h4 id="程序的内存分配"><a href="#程序的内存分配" class="headerlink" title="程序的内存分配"></a>程序的内存分配</h4><p>在计算机系统中，运行的应用程序的数据都是保存在内存中，不同类型的数据，保存的内存区域不同，包括：<br>    1、栈区[stack]：由<strong>编译器自动分配释放</strong>，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的<strong>栈</strong>。<br>    2、堆区[heap]：一<strong>般由程序员分配释放</strong>，若程序员不释放，程序结束时可能由OS回收。注意它与数据结构中的堆是两回事，分配方式类似于<strong>链表</strong>。<br>    3、全局区[静态区]：全局变量和静态变量的存储是放在一块的，<strong>初始化</strong>的全局变量和静态变量在一块区域，<strong>未初始化</strong>的全局变量和未初始化的静态变量在<strong>相邻</strong>的另一块区域。<strong>程序结束后由系统释放</strong>。<br>    4、文字常量区：存放常量字符串。程序结束后由系统释放。<br>    5、程序代码区：存放函数体的二进制代码。<br>    6、寄存器区：用来保存栈顶指针和指令指针(汇编操作)</p><p>这里第4 5 6点见的比较少    </p><h5 id="一-栈区中的数据"><a href="#一-栈区中的数据" class="headerlink" title="(一)栈区中的数据"></a>(一)栈区中的数据</h5><p>​    1、应用程序启动后，<strong>操作系统</strong>会为应用程序在栈区中开辟内存空间，用于存放局部变量以及函数的参数等；<br>​    2、iOS主线程栈区大小为1M，MAC主线程栈区大小为8M；<br>​    3、栈区中的变量由编译器负责分配和释放；<br>​    4、栈区中的数据以“栈”的形式管理的，后进先出(LIFO)<br>​    5、访问栈区中变量的效率高，<strong>不会出现内存碎片</strong><br>​    6、栈区中的变量名(不带*)相当于是<strong>指向栈区数据的指针别名</strong>，变量名可以简化程序猿的工作。<br>​<br>​    </p><h5 id="二-堆区中的数据"><a href="#二-堆区中的数据" class="headerlink" title="(二)堆区中的数据"></a>(二)堆区中的数据</h5><p>​    1、由于栈区中的空间有限，iOS的应用程序中，对象都是建立在堆中的<br>​    2、堆区包括<strong>系统内存</strong>和<strong>虚拟内存</strong>(硬盘缓存)，由所有正在运行的应用程序共享使用；<br>​    3、堆区中的内存分配由<strong>操作系统</strong>负责，操作系统使用一个链表统一维护所有已经分配的内存记录<br>​    4、由于<strong>堆区是由所有应用程序共享</strong>的，操作系统以匿名(只记录内存地址和大小，不记录具体类型)的方式记录已经分配的内存区域<br>​    5、要访问堆区中的数据，必须通过<strong>指针</strong>的方式才可以进行，指针的类型决定了访问堆中的数据方式<br>​    6、当某一内存区域不再使用时，<strong>程序需要通知操作系统回收该内存区域</strong>，从而可以保证该内存区域被其他程序再次使用，否则，该区域将永远无法再次分配，这就是“内存泄露”<br>​    7、如果某一区域已经被释放，仍然试图访问该区域，会提示“坏内存访问”，这就是“野指针错误”<br>​    8、相比较栈区，堆区中的效率要低很多，同时容易出现内存碎片<br>​    9、相比较栈区，堆区中的访问方式更加灵活，对象占用的内存也可以更大</p><h5 id="运行软件原理"><a href="#运行软件原理" class="headerlink" title="运行软件原理"></a>运行软件原理</h5><p>eg.<br>双击QQ图标，操作系统就会知道你要运行这个软件，它会在硬盘中找到你安装的QQ软件，将数据复制到内存，QQ不是在硬盘中运行的，而是在内存中运行的。(不仅qq是这样的其他所有的软件都是这样的)</p><p><strong>因为内存的读写速度比硬盘快很多</strong></p><p>读写速度，内存 &gt; 固态硬盘 &gt; 机械硬盘</p><p>所以，不管是运行QQ还是编辑Word文档，都是先将硬盘上的数据复制到内存，才能让<strong>CPU</strong>来处理，这个过程就叫作载入内存。完成这个过程需要一个特殊的程序，这个程序就叫做加载器</p><p><strong>CPU直接与内存打交道</strong>，它会读取内存中的数据进行处理，并将结果保存到内存。如果需要保存到硬盘，才会将内存中的数据复制到硬盘。</p><h5 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h5><p>这里就是说到上面堆区提到的虚拟内存</p><p>如果我们运行的程序较多，占用的空间就会超过内存（内存条）容量。</p><p>eg.<br>计算机的内存容量为8G，却运行着10个程序，这10个程序共占用12G的空间，也就意味着需要从硬盘复制 12G 的数据到内存，这显然是不可能的。<br><strong>但是</strong>操作系统,为我们解决了这个问题：当程序运行需要的空间大于内存容量时，会将内存中暂时不用的数据再写回硬盘；需要这些数据时再从硬盘中读取，并将另外一部分不用的数据写入硬盘。这样，硬盘中就会有一部分空间用来存放内存中暂时不用的数据。这一部分空间就叫做虚拟内存</p><p>正是因为 虚拟内存 的存在，通过 虚拟内存 可以让程序可以拥有超过系统物理内存大小的可用内存空间。<br>另外，虚拟内存为每个进程提供了一个一致的、私有的地址空间，它让每个进程产生了一种自己在独享主存的错觉（每个进程拥有一片连续完整的内存空间）。这样会更加有效地管理内存并减少出错）</p><p>硬盘的读写速度比内存慢很多，反复交换数据会消耗很多时间，所以如果你的内存太小，会严重影响计算机的运行速度，甚至会出现”卡死“现象，即使CPU强劲，也不会有大的改观</p><p>CPU直接从内存中读取数据，处理完成后将结果再写入内存。</p><p>所以小伙伴们买电脑要买内存大的，运行就更快</p><h5 id="ASCII-编码"><a href="#ASCII-编码" class="headerlink" title="ASCII 编码"></a>ASCII 编码</h5><p>收录了 128 个字符，包含了基本的拉丁字母（英文字母）、阿拉伯数字（也就是 1234567890）、标点符号（,.!等）、特殊符号（@#$%^&amp;等）以及一些具有控制功能的字符</p><img src="/post/6601b08a/68.jpg" class title="This is an image"><h5 id="GB2312编码和GBK编码，将中文存储到计算机"><a href="#GB2312编码和GBK编码，将中文存储到计算机" class="headerlink" title="GB2312编码和GBK编码，将中文存储到计算机"></a>GB2312编码和GBK编码，将中文存储到计算机</h5><p>eg.<br>GBK就是在保存你的帖子的时候，一个汉字占用两个字节。外国人看会出现乱码，此为我国为自己汉字编码而形成之解决方案。UTF8就是在保存你的帖子的时候，一个汉字占用3个字节。。但是外国人看的话不会乱码。</p><h5 id="Unicode字符集，将全世界的文字存储到计算机"><a href="#Unicode字符集，将全世界的文字存储到计算机" class="headerlink" title="Unicode字符集，将全世界的文字存储到计算机"></a>Unicode字符集，将全世界的文字存储到计算机</h5><p><strong>Unicode 是一套字符集，而不是一套字符编码</strong></p><p>字符集定义了字符和二进制的对应关系，为每个字符分配了唯一的编号。<br>可以将字符集理解成一个很大的表格，它列出了所有字符和二进制的对应关系，计算机显示文字或者存储文字，就是一个查表的过程。</p><p>字符编码规定了如何将字符的编号存储到计算机中。字符编号在存储之前必须要经过转换，在读取时还要再逆向转换一次，使用的这套转换方案就叫做字符编码。</p><p>Unicode 可以使用的<strong>编码方案</strong>有三种，分别是：<br>       1. UTF-8：一种变长的编码方案，使用 1~6 个字节来存储<br>       2. UTF-32：一种固定长度的编码方案，不管字符编号大小，始终使用 4 个字节来存储<br>       3. UTF-16：介于 UTF-8 和 UTF-32 之间，使用 2 个或者 4 个字节来存储，长度既固定又可变</p><p><strong>注意</strong>：只有 UTF-8 兼容 ASCII，UTF-32 和 UTF-16 都不兼容 ASCII</p><p>本文对于编码部分博主介绍的比较少，如果想深入了解的小伙伴们自行百度</p>]]></content>
      
      
      <categories>
          
          <category> c/c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进制的介绍和进制的转换--详细版</title>
      <link href="/post/34c02115.html"/>
      <url>/post/34c02115.html</url>
      
        <content type="html"><![CDATA[<p>先介绍一下 这是博主第二次学习进制的时候使用的笔记资料（不要问为啥是第二次学习，🙃😭因为第一次学完忘了）并且博主在第一次学习的时候，没有很好的笔记在进制转换的时候把自己搅混了</p><p>第二次学习完了将自己的一些对教程当中的关键的分享给大家</p><p>这里博主<strong>建议</strong>在阅读的时候大家，对于博主给出的例子都动手算一下</p><h4 id="二进制、八进制和十六进制"><a href="#二进制、八进制和十六进制" class="headerlink" title="二进制、八进制和十六进制"></a>二进制、八进制和十六进制</h4><h5 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h5><p>在计算机内部，数据都是以二进制的形式存储的</p><p>其实二进制加减法和十进制加减法的思想是类似的</p><p>对于十进制，进行加法运算时逢十进一，进行减法运算时借一当十；<br>对于二进制，进行加法运算时逢二进一，进行减法运算时借一当二。</p><p> 二进制加法：1+0&#x3D;1、1+1&#x3D;10、11+10&#x3D;101、111+111&#x3D;1110</p><p> 二进制减法：1-0&#x3D;1、10-1&#x3D;1、101-11&#x3D;10、1100-111&#x3D;101</p><p>大家可以类比去记忆这个</p><h5 id="八进制"><a href="#八进制" class="headerlink" title="八进制"></a>八进制</h5><p>八进制有 0~7 共8个数字（<strong>一定要记住是0-7不是1-8或者0-8</strong>），基数为8，</p><p>加法运算时逢八进一，减法运算时借一当八（其实八进制二进制还有个十六进制他们的加减法运算规则是一样的）</p><p><strong>注意</strong>：八进制数一般是不能以0开头的</p><p>八进制加法：3+4&#x3D;7、5+6&#x3D;13、75+42&#x3D;137、2427+567&#x3D;3216</p><p>八进制减法：6-4&#x3D;2、52-27&#x3D;23、307-141&#x3D;146、7430-1451&#x3D;5757</p><h5 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a>十六进制</h5><p>十六进制中由0-9+A-F组成的，用A来表示10，B表示11，C表示12，D表示13，E表示14，F表示15，因此有 0~F 共16个数字，基数为16，加法运算时逢16进1，减法运算时借1当16</p><p><strong>注意</strong>：十六进制中的字母不区分大小写，ABCDEF 也可以写作 abcdef。</p><p><strong>注意</strong>：十六进制数一般是不能以0开头的</p><p>十六进制加法：6+7&#x3D;D、18+BA&#x3D;D2、595+792&#x3D;D27、2F87+F8A&#x3D;3F11</p><p>十六进制减法：D-3&#x3D;A、52-2F&#x3D;23、E07-141&#x3D;CC6、7CA0-1CB1&#x3D;5FEF</p><h4 id="进制转换：二进制、八进制、十六进制、十进制之间的转换"><a href="#进制转换：二进制、八进制、十六进制、十进制之间的转换" class="headerlink" title="进制转换：二进制、八进制、十六进制、十进制之间的转换"></a>进制转换：二进制、八进制、十六进制、十进制之间的转换</h4><p><strong>一定要记住这里</strong></p><p> 将十进制和其他进制间的转换分为一类</p><p>将其他进制间的转换分为另一类</p><h5 id="将二进制、八进制、十六进制转换为十进制"><a href="#将二进制、八进制、十六进制转换为十进制" class="headerlink" title="将二进制、八进制、十六进制转换为十进制"></a>将二进制、八进制、十六进制转换为十进制</h5><p>假设当前数字是 N 进制，那么：<br>对于整数，从<strong>右往左</strong>看，第 i 位的位权等于N^(i-1)<br>对于小数，要从<strong>左往右</strong>看，第 j 位的位权为N^(-j)。（仔细理解这俩句话，套着下面的例子实践他）</p><h6 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h6><p>eg.  将八进制数字 53627 转换成十进制：</p><p>53627 &#x3D; 5×8^4 + 3×8^3 + 6×8^2 + 2×8^1 + 7×8^0 &#x3D; 22423（十进制）</p><p><strong>解析</strong>：从右往左看，第1位的位权为 8^0&#x3D;1，第2位的位权为 8^1&#x3D;8，第3位的位权为 8^2&#x3D;64，第4位的位权为 8^3&#x3D;512，第5位的位权为 8^4&#x3D;4096 …… 第n位的位权就为 8^n-1。将各个位的数字乘以位权，然后再相加，就得到了十进制形式。</p><p>eg.  将十六进制数字 9FA8C 转换成十进制：</p><p>9FA8C &#x3D; 9×16^4 + 15×16^3 + 10×16^2 + 8×16^1 + 12×16^0 &#x3D; 653964（十进制）</p><p><strong>解析</strong>：从右往左看，第1位的位权为 16^0&#x3D;1，第2位的位权为 16^1&#x3D;16，第n位的位权就为 16^n-1。将各个位的数字乘以位权，然后再相加，就得到了十进制形式。</p><p>eg.  将二进制数字转换成十进制也是类似的道理：</p><p>11010 &#x3D; 1×2^4 + 1×2^3 + 0×2^2 + 1×2^1 + 0×2^0 &#x3D; 26（十进制）</p><p>这里就不给解析了</p><h6 id="小数"><a href="#小数" class="headerlink" title="小数"></a>小数</h6><p>eg. 将八进制数字 0.5176 转换成十进制：</p><p>0.5176 &#x3D;  5×8^-1 + 1×8^-2 + 7×8^-3 + 6×8^-4 &#x3D; 0.65576171875（十进制）</p><p>小数部分和整数部分相反，要从左往右看，第1位的位权为 8^-1&#x3D;1&#x2F;8，第2位的位权为 8^-2&#x3D;1&#x2F;64，第3位的位权为 8^-3&#x3D;1&#x2F;512，第4位的位权为 8^-4&#x3D;1&#x2F;4096 …… 第m位的位权就为 8^-m。</p><p>eg. 将二进制数字 0.1101 转换成十进制：</p><p>0.1101 &#x3D; 1×2^-1 + 1×2^-2 + 0×2^-3 + 1×2^-4 &#x3D; 0.8125（十进制）</p><p>小数部分和整数部分相反，要从左往右看，第1位的位权为 2^-1&#x3D;1&#x2F;2，第2位的位权为 2^-2&#x3D;1&#x2F;4，第3位的位权为 2^-3&#x3D;1&#x2F;8…… 第m位的位权就为 2^-m。</p><p><strong>如果一个数字既包含了整数部分又包含了小数部分，那么将整数部分和小数部分开，分别按照上面的方法完成转换，然后再合并在一起即可</strong></p><p>eg. 将八进制数字 423.5176 转换成十进制：</p><p>423.5176 &#x3D; 4×82 + 2×81 + 3×80 + 5×8-1 + 1×8-2 + 7×8-3 + 6×8-4 &#x3D; 275.65576171875（十进制）</p><h5 id="将十进制转换为二进制、八进制、十六进制"><a href="#将十进制转换为二进制、八进制、十六进制" class="headerlink" title="将十进制转换为二进制、八进制、十六进制"></a>将十进制转换为二进制、八进制、十六进制</h5><p>将十进制转换为其它进制时比较复杂，整数部分和小数部分的算法不一样</p><h6 id="整数部分"><a href="#整数部分" class="headerlink" title="整数部分"></a>整数部分</h6><p>十进制整数转换为 N 进制整数采用“<strong>除 N 取余，逆序排列</strong>”法。</p><p><strong>具体做法</strong>：将 N 作为除数，用十进制整数除以 N，可以得到一个商和余数；保留余数，用商继续除以 N，又得到一个新的商和余数；仍然保留余数……如此反复进行，每次都保留余数，用商接着除以 N，直到商为 0 时为止。</p><p><strong>把先得到的余数作为 N 进制数的低位数字，后得到的余数作为 N 进制数的高位数字，依次排列起来，就得到了 N 进制数字</strong>。</p><p>eg.</p><p>将十进制数字 36926 转换成八进制的过程：<br>十进制数字 36926 转换成八进制的结果为 110076。</p><p>十进制数字 42 转换成二进制<br>十进制数字 42 转换成二进制的结果为 101010</p><p>建议动手计算一下（不明白可以私信博主）</p><h6 id="小数部分"><a href="#小数部分" class="headerlink" title="小数部分"></a>小数部分</h6><p>十进制小数转换成 N 进制小数采用“<strong>乘 N 取整，顺序排列</strong>”法。</p><p><strong>具体做法</strong>：用 N 乘以十进制小数，可以得到一个积，这个积包含了整数部分和小数部分；将积的整数部分取出，再用 N 乘以余下的小数部分，又得到一个新的积……如此反复进行，每次都取出整数部分，用 N 接着乘以小数部分，直到积中的小数部分为 0，或者达到所要求的精度为止。</p><p><strong>把取出的整数部分按顺序排列起来，先取出的整数作为 N 进制小数的高位数字，后取出的整数作为低位数字，这样就得到了 N 进制小数。</strong>（注意这里是先取出的整数做高位数字）</p><p>eg.</p><p>十进制小数 0.930908203125 转换成八进制小数</p><p>十进制小数 0.930908203125 转换成八进制小数的结果为 0.7345</p><p>将十进制小数 0.6875 转换成二进制小数</p><p>十进制小数 0.6875 转换成二进制小数的结果为 0.1011</p><p><strong>如果一个数字既包含了整数部分又包含了小数部分，那么将整数部分和小数部分开，分别按照上面的方法完成转换，然后再合并在一起即可</strong></p><h5 id="二进制和八进制、十六进制的转换"><a href="#二进制和八进制、十六进制的转换" class="headerlink" title="二进制和八进制、十六进制的转换"></a>二进制和八进制、十六进制的转换</h5><h6 id="二进制整数和八进制整数之间的转换"><a href="#二进制整数和八进制整数之间的转换" class="headerlink" title="二进制整数和八进制整数之间的转换"></a>二进制整数和八进制整数之间的转换</h6><p>二进制整数转换为八进制整数时，每三位二进制数字转换为一位八进制数字，运算的顺序是从低位向高位依次进行，高位不足三位用零补齐。</p><p>eg.</p><p>将二进制整数 1110111100 转换为八进制：</p><p>二进制整数 1110111100 转换为八进制的结果为 1674</p><p>八进制整数转换为二进制整数时，思路是相反的，每一位八进制数字转换为三位二进制数字，运算的顺序也是从低位向高位依次进行。</p><p>eg.</p><p>将八进制整数 2743 转换为二进制：</p><p>八进制整数 2743 转换为二进制的结果为 10111100011</p><h6 id="二进制整数和十六进制整数之间的转换"><a href="#二进制整数和十六进制整数之间的转换" class="headerlink" title="二进制整数和十六进制整数之间的转换"></a>二进制整数和十六进制整数之间的转换</h6><p>二进制整数转换为十六进制整数时，每四位二进制数字转换为一位十六进制数字，运算的顺序是从低位向高位依次进行，高位不足四位用零补齐。</p><p>eg.</p><p>将二进制整数 10 1101 0101 1100 转换为十六进制：</p><p>二进制整数 10 1101 0101 1100 转换为十六进制的结果为 2D5C</p><p>十六进制整数转换为二进制整数时，思路是相反的，每一位十六进制数字转换为四位二进制数字，运算的顺序也是从低位向高位依次进行。</p><p>eg.</p><p>将十六进制整数 A5D6 转换为二进制：</p><p>十六进制整数 A5D6 转换为二进制的结果为 1010 0101 1101 0110</p>]]></content>
      
      
      <categories>
          
          <category> c/c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机底层必备 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>L1-006连续因子----团体程序设计天梯赛</title>
      <link href="/post/95b4e652.html"/>
      <url>/post/95b4e652.html</url>
      
        <content type="html"><![CDATA[<p><strong>题：</strong></p><p>一个正整数 N 的因子中可能存在若干连续的数字。例如 630 可以分解为 3×5×6×7，其中 5、6、7 就是 3 个连续的数字。给定任一正整数 N，要求编写程序求出最长连续因子的个数，并输出最小的连续因子序列。</p><p><strong>输入格式：</strong><br>输入在一行中给出一个正整数 N（1&lt;N&lt;231）。</p><p><strong>输出格式：</strong><br>首先在第 1 行输出最长连续因子的个数；然后在第 2 行中按 因子1因子2……*因子k 的格式输出最小的连续因子序列，其中因子按递增顺序输出，1 不算在内。</p><p><strong>输入样例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">630</span><br></pre></td></tr></table></figure><h5 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a><strong>输出样例：</strong></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">5*6*7</span><br></pre></td></tr></table></figure><p><strong>答案：</strong></p><p><strong>源码当中有注释较详细的解析，如有不理解的可以私信博主</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;math.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int n = 0;</span><br><span class="line">scanf(&quot;%d&quot;, &amp;n);</span><br><span class="line">int i = 0,j=0, a = 0, sum=0,num = 0,temp=0,qidian1=0,qidian2=0;</span><br><span class="line">int x = sqrt(n);// 连续因子当中最大的那一个 一定会小于这个正整数的平方根</span><br><span class="line">//找连续因子</span><br><span class="line">for (i = 2;i &lt;= x;i++)</span><br><span class="line">&#123;</span><br><span class="line">num = 0;// num 是使用来记录 满足条件的连续数的个数 ，每次使用完后要初始化为0 ，</span><br><span class="line">sum = n;</span><br><span class="line">qidian1 = i; //记录最开始连续的是哪一个数</span><br><span class="line">//判断 i 是否满足是连续的</span><br><span class="line">for (j = i;sum%j==0&amp;&amp;sum!=0;j++)</span><br><span class="line">&#123;</span><br><span class="line">sum /= j;</span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line">//筛选最长因子个数</span><br><span class="line">if (num &gt; temp)</span><br><span class="line">&#123;</span><br><span class="line">temp = num;</span><br><span class="line">qidian2 = qidian1; // 记录最长连续因子的 起点</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 判断是否有连续因子</span><br><span class="line">if (temp == 0)</span><br><span class="line">printf(&quot;1\n%d&quot;, n);</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%d\n&quot;, temp);</span><br><span class="line">i = qidian2;</span><br><span class="line">while (i &lt; qidian2 + temp)</span><br><span class="line">&#123;</span><br><span class="line">if (i != qidian2)</span><br><span class="line">printf(&quot;*&quot;);</span><br><span class="line">printf(&quot;%d&quot;, i);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 天梯赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 天梯赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>L1-002打印沙漏-----团体程序设计天梯赛</title>
      <link href="/post/f356fe17.html"/>
      <url>/post/f356fe17.html</url>
      
        <content type="html"><![CDATA[<p><strong>L1-002 打印沙漏</strong><br>本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个“*”，要求按下列格式打印.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*****</span><br><span class="line">***</span><br><span class="line">*</span><br><span class="line">***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><p>所谓“沙漏形状”，是指每行输出奇数个符号；各行符号中心对齐；相邻两行符号数差2；符号数先从大到小顺序递减到1，再从小到大顺序递增；首尾符号数相等。</p><p>给定任意N个符号，不一定能正好组成一个沙漏。要求打印出的沙漏能用掉尽可能多的符号。</p><p><strong>输入格式:</strong><br>输入在一行给出1个正整数N（≤1000）和一个符号，中间以空格分隔。</p><p><strong>输出格式:</strong><br>首先打印出由给定符号组成的最大的沙漏形状，最后在一行中输出剩下没用掉的符号数。</p><p><strong>输入样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">19 *</span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*****</span><br><span class="line">***</span><br><span class="line">*</span><br><span class="line">***</span><br><span class="line">*****</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p><strong>博主就不给单独的解释这个，源码里面都有详细的注释</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int num;</span><br><span class="line">    char s;</span><br><span class="line">    int left; //剩下的符号个数</span><br><span class="line">    int i = 1; //每一行要打印符号的个数</span><br><span class="line">    int n = 1;//总共能打印的符号个数</span><br><span class="line">    int j, k;</span><br><span class="line">    int count;</span><br><span class="line">    int total;</span><br><span class="line">    scanf(&quot;%d %c&quot;, &amp;num, &amp;s);</span><br><span class="line">    while (n &lt;= num &amp;&amp; i &gt;= 1)</span><br><span class="line">    &#123;</span><br><span class="line">        i = i+2;</span><br><span class="line">        n = n + 2 * i; </span><br><span class="line">    &#125;</span><br><span class="line">    n = n - 2 * i;</span><br><span class="line">    i = i - 2;</span><br><span class="line">    left = num - n;</span><br><span class="line">    // 上半部分符号打印，包括1个的哪一行</span><br><span class="line">    for (j = i; j &gt;= 1; j = j - 2)</span><br><span class="line">    &#123;</span><br><span class="line">    // 判断是否要输出空格，以及输出空格的个数</span><br><span class="line">        total = (i - j) / 2;</span><br><span class="line">        if (total) </span><br><span class="line">        &#123;</span><br><span class="line">            while (total)</span><br><span class="line">            &#123;</span><br><span class="line">                printf(&quot; &quot;);</span><br><span class="line">                total--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 输出对应行要打印的符号</span><br><span class="line">        for (count = j; count &gt;= 1; count--)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            printf(&quot;%c&quot;, s);</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    // 下半部分符号的打印，从3开始</span><br><span class="line">    for (k = 3; k &lt;= i; k = k+2)</span><br><span class="line">    &#123;</span><br><span class="line">    // 判断是否要输出空格，以及输出空格的个数</span><br><span class="line">        total = (i - k) / 2;</span><br><span class="line">        if (total)</span><br><span class="line">        &#123;</span><br><span class="line">            while (total)</span><br><span class="line">            &#123;</span><br><span class="line">                printf(&quot; &quot;);</span><br><span class="line">                total--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for (count = k; count &gt;=1; count--)</span><br><span class="line">        &#123;</span><br><span class="line">           </span><br><span class="line">            printf(&quot;%c&quot;, s);</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d&quot;, left);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>有不明白的可以加博主的联系方式私信博主</strong></p>]]></content>
      
      
      <categories>
          
          <category> 天梯赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博主自己做了的 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown工具--typora破解版</title>
      <link href="/post/ff89f67d.html"/>
      <url>/post/ff89f67d.html</url>
      
        <content type="html"><![CDATA[<p>获得其他免费资源 请点这儿<a href="https://1yzf2zst.github.io/link/">传送门</a></p><p><strong>Typora</strong>是一款简单易用的 Markdown 编辑器。</p><h5 id="介绍一下markdown语言"><a href="#介绍一下markdown语言" class="headerlink" title="介绍一下markdown语言"></a>介绍一下markdown语言</h5><p>Markdown 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式，其目标是实现易读易写，在其中还可以嵌套html和css。</p><h5 id="markdown语言学习"><a href="#markdown语言学习" class="headerlink" title="markdown语言学习"></a>markdown语言学习</h5><p>这门语言，学习非常简单，刚开始只需要记住一些常用的格式和语法即可，就能满足大部分小伙伴的使用需求，如果想要进阶，那就还需要了解怎么使用latex公式和流程图和甘特图。</p><p>因为比较简单博主就不专门出一篇教程，这里给大家推荐几篇其他大佬的markdown入门到进阶教程<a href="http://t.csdn.cn/M0HtE">点这里哦</a></p><h5 id="软件推荐"><a href="#软件推荐" class="headerlink" title="软件推荐"></a>软件推荐</h5><p>这里给大家推荐俩个app</p><p>一个是：<strong>typora</strong></p><p>另一个是：<strong>印象笔记</strong></p><h6 id="typora-破解版安装"><a href="#typora-破解版安装" class="headerlink" title="typora 破解版安装"></a>typora 破解版安装</h6><p>是一款简单易用的 Markdown 编辑器，它的界面非常的简洁直观，并且功能各方面也是非常的不错。</p><p>这里给大家分享一个 破解版的typora </p><p>这里是安装包<a href="https://pan.baidu.com/s/1yAKMCsn4LSfS-ggxggvNJA">我在这呢–点我安装呗</a> 提取码：2111</p><p><strong>第一步</strong>：解压压缩包，然后像正常安装软件一样安装 typora，<strong>记下安装路径</strong></p><p><strong>第二步</strong>：用解压后文件里的app.asar </p><img src="/post/ff89f67d/jieyahou.png" class title="This is an image"><p>到安装路径下的resources文件夹里，替换掉里面原有的app.asar文件</p><img src="/post/ff89f67d/lincunwei.png" class title="This is an image"><p><strong>第三步</strong>:重启typora，输入邮箱、注册码</p><img src="/post/ff89f67d/jihuo.png" class title="This is an image"><p>邮箱：<a href="mailto:&#x78;&#x69;&#97;&#x6a;&#105;&#101;&#x72;&#x6c;&#117;&#97;&#x6e;&#116;&#x69;&#x61;&#110;&#64;&#49;&#54;&#x33;&#46;&#99;&#111;&#109;">&#x78;&#x69;&#97;&#x6a;&#105;&#101;&#x72;&#x6c;&#117;&#97;&#x6e;&#116;&#x69;&#x61;&#110;&#64;&#49;&#54;&#x33;&#46;&#99;&#111;&#109;</a> (可以随便写)<br>授权码: E8Q9Y5-KXMTL5-7578SL-4S5XKS</p><img src="/post/ff89f67d/success.png" class title="This is an image"><p>然后就可以正常使用了，嘿嘿🤭</p><p><strong>本博主声明，这里该操作仅供学习使用，请在下载24小时之内删除，请支持正版</strong></p><h6 id="印象笔记"><a href="#印象笔记" class="headerlink" title="印象笔记"></a>印象笔记</h6><p>印象笔记的话大家可以去官方下载，博主还是比较推荐使用它的，和typora一样比较简洁，很方便使用，但是他的服务比较多 ，嗯嗯 大家懂得。</p><p>这里也给一个下载链接<a href="https://pan.baidu.com/s/1XCMZG1qpWz3iSa7YaLnnMg">点这儿呢</a></p><p>提取码：2111</p><p><strong>本博主再次声明，这里该操作仅供学习使用，请在下载24小时之内删除，请支持正版</strong></p>]]></content>
      
      
      <categories>
          
          <category> 资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 白嫖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站简介</title>
      <link href="/post/d431311d.html"/>
      <url>/post/d431311d.html</url>
      
        <content type="html"><![CDATA[<h4 id="博主建站成功"><a href="#博主建站成功" class="headerlink" title="博主建站成功"></a>博主建站成功</h4><p>历时俩天，终于简单的将自己，心心念念的个人博客网站搭起来。 嘿嘿😁</p><p>在搭建的过程中学习了许多的网上的一些搭建教程，给想要和我一样搭建属于自己的个人博客的小伙伴推荐一些博主认为比较详细的教程。</p><p><strong>计算机小白勿来</strong></p><h4 id="搭建和美化教程推荐"><a href="#搭建和美化教程推荐" class="headerlink" title="搭建和美化教程推荐"></a>搭建和美化教程推荐</h4><p><strong>搭建教程</strong>：<a href="https://www.bilibili.com/video/BV1mU4y1j72n?p=1&vd_source=ed0aad5b295bd6d3af5a85de9cbf348c">b站</a>这是一个视频教程比较详细，但是比较遗憾的是里面没有提供美化教程</p><p><a href="https://wushishu.xyz/">武师叔</a>这是一个blog搭建的比较漂亮的博主写的教程</p><p><strong>建议在搭建博客是将这俩个教程结合起来看，因为武师叔的教程里面有给出一些解决在搭建的时候出现的问题的解决方法</strong></p><p><strong>美化教程</strong>：<a href="https://dhndzwxj.vercel.app/3276806131.html">博士大佬</a>这位博主的教程给的比较详细有美化，也有搭建的教程</p><p><a href="http://haiyong.site/post/22e1d5da.html#Butterfly-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96">海拥</a>的教程，里面介绍了好一些漂亮的，美化挂件</p><p><a href="https://butterfly.js.org/">Jerry</a>讲的比较全面</p><p>博主就推荐这些搭建教程，有还想要其他详细教程的小伙伴可以私信博主</p><p><strong>注意：</strong>博主建议美化的时候，每美化一个地方就把他部署到本地，看一下是否有错误，别等教程看完后一块部署，不然可能在你的命令框弹出1mol的bug（<strong>博主亲测，玩废了四回在在美化阶段</strong>）</p><h4 id="搭站总结"><a href="#搭站总结" class="headerlink" title="搭站总结"></a>搭站总结</h4><p>对于搭建个人的博客网站，对小白比较不友好，因为你们会在搭建过程中遇到非常多的bug（哪怕你跟着教程一步一步的来），并且有很多对于你来说，你是在网上找不到解决方法的，官方给的参考文档是全英文版，所以对于小白来说想搭建并美化出一个漂亮的个人博客网站非常不容易。</p><p>到时候博主将会考虑这些出一套利用GitHub&#x2F;gitee+hexo搭建和美化的教程（该教程对小白会比较友好）届时欢迎各位来一起交流</p><p><strong>对于本站，后续博主还会继续完善本博客网站。</strong></p><h4 id="博主介绍"><a href="#博主介绍" class="headerlink" title="博主介绍"></a>博主介绍</h4><p>博主是一名在校双非大学生</p><p>主要研究的是 python c, qt,后续还会学习java（技术还比较菜）。</p><p>还会一些 前端html ，css，js，和c++，（会简单的使用，但是没有接触过一些项目）</p><p><strong>博主的其他博客：</strong></p><p>主要使用 csdn ，知乎博主主要是分享一些高清壁纸和动漫图片</p><p>掘金博主才开始使用不久里面的内容比较少（建议大家也可以去使用）</p><p>牛客，博主主要用来刚学一门语言的时候，用来刷题的（进阶的话可以去<a href="https://pintia.cn/home">PTA</a>和<a href="https://leetcode.cn/problemset/all/">leetcode</a>）</p><p>csdn :<a href="https://blog.csdn.net/smallcabbage12?spm=1000.2115.3001.5343">博主csdn的链接</a></p><p>知乎：<a href="https://www.zhihu.com/people/ming-zhao-39-10">知乎</a></p><p>掘金：<a href="https://juejin.cn/user/3474910374795448">掘金</a></p><p>牛客：<a href="https://www.nowcoder.com/profile/575419922">牛客</a></p><h4 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h4><p>qq: 2562644984</p><p>wechat: zst210621yzf</p><p>这个博客网站博主会主要使用来 介绍一些博主的技术学习和一些教程，资料, 资源的分享</p><h4 id="后续博客使用"><a href="#后续博客使用" class="headerlink" title="后续博客使用"></a>后续博客使用</h4><p>后续博主将相册开放出来，会给各位爱动漫和其他美照的小伙伴带一波福利（博主爬虫精挑，全高清）😎</p><p>会和大家分享一些项目的源码和破解app</p><p>对于这个博客网站博主会一直运营下去，非常非常期待各位小伙伴访问博主的博客和博主一起交流</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 第一篇博客哦 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
